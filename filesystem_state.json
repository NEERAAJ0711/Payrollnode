{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# HR Management System\n\n## Overview\nThis is a comprehensive Human Resources Management System built with React, Express.js, and PostgreSQL. The application provides a complete suite of HR functionalities including employee management, job posting and applications, department organization, authentication with role-based access control, and advanced features like attendance management with face and location verification, and a full payroll system. It supports multi-tenant operations for different companies and includes a Flutter mobile companion app. The system aims to provide an enterprise-level HR solution ready for deployment.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite\n- **UI Framework**: shadcn/ui components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables\n- **State Management**: TanStack Query (React Query) for server state\n- **Routing**: Wouter\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: JWT-based with bcrypt for password hashing\n- **Database Provider**: Neon serverless PostgreSQL\n- **API Design**: RESTful API with role-based access control\n\n### Database Design\nThe system uses PostgreSQL with core entities for multi-tenant support:\n- **Companies**: For organizational data.\n- **Users**: Authentication, role management (system_admin, admin, employee).\n- **Employees**: Profiles linked to users and companies, including detailed employment history, KYC, and family info.\n- **Departments, Designations, Branches, Locations, Cost Centers, Biometric Machines, Holidays, Leave Policies**: For comprehensive organizational management.\n- **Jobs & Job Applications**: For recruitment processes.\n- **Attendance**: Tracking daily attendance, face templates, and locations.\n- **Permission Requests**: For managing employee access to features.\n- **Monthly Payroll & Payroll Records**: For comprehensive payroll processing.\n\n### Mobile Companion App (Flutter)\n- **Framework**: Flutter with GetX state management.\n- **Architecture**: Modular with 10 core modules (splash, auth, dashboard, attendance, profile, employees, leave, payroll, compliances, permissions, settings).\n- **API Integration**: Dio HTTP client with interceptors for authentication.\n- **Authentication**: JWT-based with automatic token refresh.\n- **UI/UX**: Material Design 3 with custom theming.\n- **Core Features**: Attendance check-in/out, leave applications, payroll viewing, employee management, compliance data, and permission requests.\n- **Local Storage**: GetStorage for preferences and token management.\n\n### Key Features and Implementations\n- **Multi-Role Authentication & Authorization**: System Admin, Admin, and Employee roles with JWT-based, role-based, and company-scoped access control.\n- **Employee Management**: Comprehensive profiles, CRUD operations, Aadhar verification for registration and data lookup, and company-based access control.\n- **Recruitment Hub**: Job posting, application tracking, interview scheduling, and offer management.\n- **Company Management**: Admin onboarding with mandatory company profile setup and system admin approval workflow.\n- **Organizational Settings**: Management of departments, designations, branches, locations, cost centers, biometric machines, holidays, and leave policies via a tabbed interface.\n- **Attendance Management**: Enterprise-level system with face verification, GPS location tracking, and automated monthly pay day calculations.\n- **Payroll Management**: Comprehensive setup with compliance toggles (EPF, ESIC, LWF, OT, VPF, TDS, PT), dynamic salary calculation based on attendance, and monthly payroll processing workflow.\n- **Permission Management**: Request-based system for employees, with admin approval/rejection, and a complete permission enforcement system at the page level.\n\n## External Dependencies\n\n### Core Technologies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection.\n- **drizzle-orm**: Type-safe ORM for database operations.\n- **@tanstack/react-query**: Server state management and caching.\n- **react-hook-form**: Form state management and validation.\n- **zod**: Runtime type validation and schema definition.\n- **jsonwebtoken**: JWT token generation and validation.\n- **bcrypt**: Password hashing and comparison.\n\n### UI Components\n- **@radix-ui/***: Accessible component primitives.\n- **tailwindcss**: Utility-first CSS framework.\n- **class-variance-authority**: Component variant management.\n- **lucide-react**: Icon library.\n\n### Flutter Specific\n- **GetX**: State management for Flutter app.\n- **Dio**: HTTP client for API integration in Flutter.\n- **GetStorage**: Local storage management in Flutter.","size_bytes":4921},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"flutter_hr_app/README.md":{"content":"# HR Mobile App\n\nA comprehensive Flutter mobile companion app for the HR Management System, built with GetX state management and connecting to the existing Node.js backend APIs.\n\n## Features\n\n### 🔐 Authentication\n- JWT-based secure login\n- Automatic token refresh\n- Role-based access control (Employee, Admin, System Admin)\n- Demo credentials provided for testing\n\n### 📱 Core Modules\n- **Dashboard**: Overview with statistics and quick actions\n- **Attendance**: Check-in/out, monthly summaries, recent history\n- **Profile**: User information and account management\n- **Leave Management**: Apply for leave, view balance, track applications\n- **Payroll**: Salary breakdown, payslip history, download functionality\n- **Employee Management**: View employee list and details (Admin only)\n- **Compliances**: Project-based compliance data viewing (Admin only)\n- **Permissions**: Request and track permission approvals\n- **Settings**: App preferences, theme toggle, account options\n\n### 🎨 UI/UX Features\n- Material Design 3 with custom theming\n- Dark/Light mode support\n- Responsive design for all screen sizes\n- Pull-to-refresh on all data screens\n- Professional card-based layouts\n- Loading states and error handling\n- Toast notifications for user feedback\n\n### 🔧 Technical Architecture\n- **State Management**: GetX for reactive programming\n- **API Communication**: Dio HTTP client with interceptors\n- **Local Storage**: GetStorage for preferences and caching\n- **Authentication**: JWT token management with automatic refresh\n- **Navigation**: Declarative routing with GetX\n- **Error Handling**: Comprehensive error management with user-friendly messages\n\n## Project Structure\n\n```\nlib/\n├── app/\n│   ├── modules/           # Feature modules\n│   │   ├── splash/        # Splash screen\n│   │   ├── auth/          # Login/authentication\n│   │   ├── dashboard/     # Main dashboard\n│   │   ├── attendance/    # Attendance tracking\n│   │   ├── profile/       # User profile\n│   │   ├── employees/     # Employee management\n│   │   ├── leave/         # Leave management\n│   │   ├── payroll/       # Payroll information\n│   │   ├── compliances/   # Compliance data\n│   │   ├── permissions/   # Permission requests\n│   │   └── settings/      # App settings\n│   ├── models/            # Data models\n│   ├── services/          # Business logic services\n│   │   ├── api_service.dart      # HTTP API client\n│   │   ├── auth_service.dart     # Authentication logic\n│   │   └── storage_service.dart  # Local storage\n│   ├── routes/            # Navigation routes\n│   └── theme/             # App theming\n└── main.dart              # App entry point\n```\n\n## Getting Started\n\n### Prerequisites\n- Flutter SDK (>=3.10.0)\n- Dart SDK (>=3.0.0)\n- Node.js backend running on localhost:5000\n\n### Installation\n\n1. **Clone and setup Flutter dependencies:**\n```bash\ncd flutter_hr_app\nflutter pub get\n```\n\n2. **Update API base URL (if needed):**\nEdit `lib/app/services/api_service.dart` and update the `baseUrl`:\n```dart\nstatic const String baseUrl = 'http://YOUR_BACKEND_URL:5000/api';\n```\n\n3. **Run the app:**\n```bash\nflutter run\n```\n\n### Demo Credentials\n\nThe app includes demo credentials for testing:\n\n**Admin User:**\n- Email: admin@demo.com\n- Password: admin123\n\n**Employee User:**\n- Email: employee@demo.com\n- Password: emp123\n\n**System Admin:**\n- Email: system@techcorp.com\n- Password: sysadmin123\n\n## API Integration\n\nThe mobile app connects to the existing HR system backend APIs:\n\n### Authentication\n- `POST /api/auth/login` - User login\n- `GET /api/auth/me` - Get user profile\n\n### Employee Management\n- `GET /api/employees/:companyId` - Get company employees\n- `PUT /api/employees/:id` - Update employee profile\n\n### Attendance\n- `GET /api/attendance/summary/today` - Today's attendance summary\n- `GET /api/attendance/employee-data/:companyId/:year/:month` - Monthly attendance\n- `POST /api/attendance/check-in` - Check in attendance\n- `POST /api/attendance/check-out` - Check out attendance\n\n### Compliance\n- `GET /api/clients/:companyId` - Get company projects\n- `GET /api/compliances-data/:companyId/:projectId/:month` - Get compliance data\n\n### Permissions\n- `GET /api/permission-requests` - Get permission requests\n- `POST /api/permission-requests` - Create permission request\n\n## Key Features Implementation\n\n### GetX State Management\n```dart\n// Reactive variables\nfinal RxBool isLoading = false.obs;\nfinal Rx<User?> currentUser = Rx<User?>(null);\n\n// Reactive UI updates\nObx(() => Text(controller.currentUser.value?.name ?? ''))\n```\n\n### API Service with Interceptors\n```dart\n// Automatic token injection\n_dio.interceptors.add(InterceptorsWrapper(\n  onRequest: (options, handler) {\n    final token = _storage.getToken();\n    if (token != null) {\n      options.headers['Authorization'] = 'Bearer $token';\n    }\n    handler.next(options);\n  },\n));\n```\n\n### Local Storage Management\n```dart\n// Token management\nawait _storage.saveToken(token);\nfinal token = _storage.getToken();\n\n// User preferences\nawait _storage.saveSettings('theme_mode', 'dark');\nfinal theme = _storage.getSettings<String>('theme_mode');\n```\n\n## Security Features\n\n- **JWT Token Management**: Secure token storage and automatic refresh\n- **API Interceptors**: Automatic token injection and 401 handling\n- **Input Validation**: Form validation with error messages\n- **Secure Storage**: Encrypted local storage for sensitive data\n- **Role-based Access**: Different UI based on user roles\n\n## Performance Optimizations\n\n- **Lazy Loading**: Controllers loaded only when needed\n- **Caching**: API response caching with timestamp validation\n- **Efficient Rebuilds**: GetX reactive programming for minimal rebuilds\n- **Image Optimization**: Cached network images for better performance\n- **Memory Management**: Proper controller disposal on route changes\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is part of the HR Management System and follows the same licensing terms.","size_bytes":6373},"flutter_hr_app/pubspec.yaml":{"content":"name: hr_mobile_app\ndescription: HR Management Mobile Companion App\npublish_to: 'none'\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n  flutter: \">=3.10.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  \n  # State Management\n  get: ^4.6.6\n  \n  # HTTP Client\n  dio: ^5.3.2\n  \n  # Local Storage\n  get_storage: ^2.1.1\n  \n  # UI Components\n  cupertino_icons: ^1.0.6\n  flutter_svg: ^2.0.7\n  cached_network_image: ^3.3.0\n  \n  # Utils\n  intl: ^0.18.1\n  url_launcher: ^6.1.14\n  \n  # Authentication\n  jwt_decoder: ^2.0.1\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^3.0.0\n\nflutter:\n  uses-material-design: true\n  \n  assets:\n    - assets/images/\n    - assets/icons/\n  \n  fonts:\n    - family: Roboto\n      fonts:\n        - asset: fonts/Roboto-Regular.ttf\n        - asset: fonts/Roboto-Medium.ttf\n          weight: 500\n        - asset: fonts/Roboto-Bold.ttf\n          weight: 700","size_bytes":898},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport \"./types\"; // Import custom type definitions\nimport { storage } from \"./storage\";\nimport { loginSchema, insertEmployeeSchema, insertJobSchema, insertDepartmentSchema, insertEmployeeSalaryStructureSchema, leaveRequests, advanceRequests, clients, complianceSetups, compliancesData, employeeAssignments } from \"@shared/schema\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport jwt from \"jsonwebtoken\";\nimport ExcelJS from \"exceljs\";\nimport { PDFDocument, rgb, StandardFonts } from 'pdf-lib';\n\nconst JWT_SECRET = process.env.JWT_SECRET;\nif (!JWT_SECRET) {\n  if (process.env.NODE_ENV === 'production') {\n    throw new Error('JWT_SECRET environment variable is required for production security');\n  }\n  // Development fallback - NOT FOR PRODUCTION\n  console.warn('⚠️  WARNING: Using development JWT secret. Set JWT_SECRET environment variable for production!');\n}\nconst JWT_SECRET_VALUE = JWT_SECRET || 'dev-secret-key-not-for-production';\n\n// Middleware to verify JWT token and extract user\nasync function authenticateToken(req: any, res: any, next: any) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  // Only log for non-routine requests to reduce noise\n  if (req.path !== '/api/auth/me') {\n    console.log('Auth check for:', req.method, req.path);\n    console.log('Auth header present:', !!authHeader);\n    console.log('Token extracted:', !!token);\n  }\n\n  if (!token) {\n    console.log('No token provided, returning 401');\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET_VALUE) as any;\n    \n    const user = await storage.getUser(decoded.userId);\n    \n    if (!user) {\n      console.log('User not found for userId:', decoded.userId);\n      return res.status(401).json({ message: 'User not found' });\n    }\n    \n    if (!user.isActive) {\n      console.log('User inactive:', user.email);\n      return res.status(401).json({ message: 'User account is inactive' });\n    }\n    \n    req.user = user;\n    next();\n  } catch (error) {\n    console.log('Token verification failed:', error.message);\n    return res.status(401).json({ message: 'Invalid or expired token' });\n  }\n}\n\n// Middleware to check company access\nfunction checkCompanyAccess(req: any, res: any, next: any) {\n  const companyId = parseInt(req.params.companyId || req.body.companyId);\n  \n  if (req.user.role === 'system_admin') {\n    return next(); // System admin can access all companies\n  }\n  \n  if (req.user.companyId !== companyId) {\n    return res.status(403).json({ message: 'Access denied to this company' });\n  }\n  \n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      // Validate request body exists\n      if (!req.body || typeof req.body !== 'object') {\n        return res.status(400).json({ message: 'Request body is required' });\n      }\n\n      // Parse with Zod\n      const validationResult = loginSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Validation failed', \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const { email, password } = validationResult.data;\n      \n      // Test database connection first\n      try {\n        const user = await storage.authenticateUser(email, password);\n        \n        if (!user) {\n          return res.status(401).json({ message: 'Invalid credentials' });\n        }\n        \n        const token = jwt.sign({ userId: user.id }, JWT_SECRET_VALUE, { expiresIn: '7d' });\n        \n        res.json({\n          user: {\n            id: user.id,\n            email: user.email,\n            username: user.username,\n            role: user.role,\n            companyId: user.companyId,\n          },\n          token,\n        });\n      } catch (dbError) {\n        console.error('Database error:', dbError);\n        return res.status(500).json({ message: 'Database connection failed' });\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    res.json({\n      user: {\n        id: req.user.id,\n        email: req.user.email,\n        username: req.user.username,\n        role: req.user.role,\n        companyId: req.user.companyId,\n      }\n    });\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const stats = await storage.getDashboardStats(companyId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch dashboard stats' });\n    }\n  });\n\n  // Public companies endpoint MUST come before parameterized routes  \n  app.get(\"/api/companies/public\", async (req, res) => {\n    try {\n      const companies = await storage.getAllCompanies();\n      // Return only basic info for job browsing\n      const publicCompanies = companies.map(c => ({\n        id: c.id,\n        name: c.name,\n        status: c.status\n      })).filter(c => c.status === 'active');\n      res.json(publicCompanies);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch companies' });\n    }\n  });\n\n  // Company routes\n  app.get(\"/api/companies/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const company = await storage.getCompany(companyId);\n      if (!company) {\n        return res.status(404).json({ message: 'Company not found' });\n      }\n      res.json(company);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch company' });\n    }\n  });\n\n  // Employee routes\n  app.get(\"/api/employees/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const employees = await storage.getEmployeesByCompany(companyId);\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch employees' });\n    }\n  });\n\n  app.get(\"/api/employees/:companyId/:id\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const employee = await storage.getEmployee(id);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch employee' });\n    }\n  });\n\n  app.post(\"/api/employees\", authenticateToken, async (req, res) => {\n    try {\n      const employeeData = insertEmployeeSchema.parse(req.body);\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employeeData.companyId) {\n        return res.status(403).json({ message: 'Access denied to this company' });\n      }\n      \n      const employee = await storage.createEmployee(employeeData);\n      res.status(201).json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid employee data', errors: error.errors });\n      }\n      console.error('Employee creation error:', error);\n      res.status(500).json({ message: 'Failed to create employee', error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.put(\"/api/employees/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const employee = await storage.getEmployee(id);\n      \n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      // Extract payroll data from request body\n      const {\n        epfEnabled, employeePfLimit, employerPfLimit, esicEnabled, lwfEnabled, otEnabled,\n        doubleOt, vpfEnabled, vpfAmount, tdsEnabled, tdsAmount, ptEnabled, ptAmount,\n        bonusEnabled, bonusMonthlyPayment, entryType, ctcValue, grossValue,\n        earningHead1, earningHead2, earningHead3, earningHead4,\n        epfEmployeeAmount, esicEmployeeAmount, lwfEmployeeAmount,\n        ...employeeFields\n      } = req.body;\n\n      // Filter out undefined/null payroll fields and only include valid employee fields\n      const updateData: any = {\n        firstName: employeeFields.firstName,\n        lastName: employeeFields.lastName,\n        email: employeeFields.email,\n        phone: employeeFields.phone,\n        employeeId: employeeFields.employeeId,\n        position: employeeFields.position,\n        departmentId: employeeFields.departmentId,\n        address: employeeFields.address,\n        salary: employeeFields.salary || grossValue || ctcValue,\n        status: employeeFields.status,\n        emergencyContact: employeeFields.emergencyContact,\n        emergencyPhone: employeeFields.emergencyPhone,\n      };\n      \n      // Handle date fields properly\n      if (employeeFields.dateOfBirth) {\n        updateData.dateOfBirth = new Date(employeeFields.dateOfBirth);\n      }\n      if (employeeFields.hireDate) {\n        updateData.hireDate = new Date(employeeFields.hireDate);\n      }\n      \n      // Remove undefined fields\n      Object.keys(updateData).forEach(key => {\n        if (updateData[key] === undefined || updateData[key] === null || updateData[key] === '') {\n          delete updateData[key];\n        }\n      });\n      \n      const updatedEmployee = await storage.updateEmployee(id, updateData);\n      \n      // Handle payroll data separately\n      const payrollData = {\n        epfEnabled, employeePfLimit, employerPfLimit, esicEnabled, lwfEnabled, otEnabled,\n        doubleOt, vpfEnabled, vpfAmount, tdsEnabled, tdsAmount, ptEnabled, ptAmount,\n        bonusEnabled, bonusMonthlyPayment, entryType, ctcValue, grossValue,\n        earningHead1, earningHead2, earningHead3, earningHead4,\n        epfEmployeeAmount, esicEmployeeAmount, lwfEmployeeAmount\n      };\n\n      console.log('Raw payroll data received:', payrollData);\n\n      // Clean up payroll data but preserve boolean values (including false)\n      const cleanPayrollData = {};\n      Object.keys(payrollData).forEach(key => {\n        const value = payrollData[key];\n        // Keep boolean values (true/false), non-empty strings, and numbers\n        if (typeof value === 'boolean' || (value !== undefined && value !== null && value !== '')) {\n          cleanPayrollData[key] = value;\n        }\n      });\n\n      console.log('Cleaned payroll data to save:', cleanPayrollData);\n\n      // Always save payroll data to ensure boolean states are preserved\n      if (true) { // Always save payroll data\n        try {\n          const existingPayroll = await storage.getEmployeePayroll(id);\n          \n          if (existingPayroll) {\n            await storage.updateEmployeePayroll(id, cleanPayrollData);\n            console.log('Updated existing payroll for employee:', id);\n          } else {\n            await storage.createEmployeePayroll({\n              ...cleanPayrollData,\n              employeeId: id,\n              companyId: updatedEmployee.companyId\n            });\n            console.log('Created new payroll for employee:', id);\n          }\n        } catch (payrollError) {\n          console.error('Error handling payroll data:', payrollError);\n        }\n      }\n      res.json(updatedEmployee);\n    } catch (error) {\n      console.error('Employee update error:', error);\n      res.status(500).json({ message: 'Failed to update employee', error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Get employee with payroll data\n  app.get(\"/api/employees/:companyId/:id\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const employee = await storage.getEmployee(id);\n      \n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Get payroll data if exists\n      const payrollData = await storage.getEmployeePayroll(id);\n      \n      console.log('Fetched payroll data for employee', id, ':', payrollData);\n      \n      // Add no-cache headers to prevent stale data\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      res.json({\n        ...employee,\n        payroll: payrollData || null\n      });\n    } catch (error) {\n      console.error('Employee fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch employee' });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const employee = await storage.getEmployee(id);\n      \n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check company access and role\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to delete this employee' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions to delete employee' });\n      }\n      \n      await storage.deleteEmployee(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete employee' });\n    }\n  });\n\n  // Department routes\n  app.get(\"/api/departments/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const departments = await storage.getDepartmentsByCompany(companyId);\n      res.json(departments);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch departments' });\n    }\n  });\n\n  app.post(\"/api/departments\", authenticateToken, async (req, res) => {\n    try {\n      const departmentData = insertDepartmentSchema.parse(req.body);\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== departmentData.companyId) {\n        return res.status(403).json({ message: 'Access denied to this company' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions to create department' });\n      }\n      \n      const department = await storage.createDepartment(departmentData);\n      res.status(201).json(department);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid department data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to create department' });\n    }\n  });\n\n  // Employee Salary Structure routes (month-wise historical tracking)\n  \n  // Get specific month's salary structure\n  app.get(\"/api/employee-salary-structure/:employeeId/:year/:month\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      // Validate parameters\n      if (isNaN(employeeId) || isNaN(year) || isNaN(month)) {\n        return res.status(400).json({ message: 'Invalid parameters' });\n      }\n      if (month < 1 || month > 12) {\n        return res.status(400).json({ message: 'Month must be between 1 and 12' });\n      }\n      if (year < 2000 || year > 2100) {\n        return res.status(400).json({ message: 'Invalid year' });\n      }\n      \n      // Get employee to check company access\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check access permissions - employees can only view their own records\n      if (req.user.role === 'employee') {\n        if (employee.userId !== req.user.id) {\n          return res.status(403).json({ message: 'Access denied - employees can only view their own salary records' });\n        }\n      } else if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      const structure = await storage.getEmployeeSalaryStructure(employeeId, year, month);\n      if (!structure) {\n        return res.status(404).json({ message: 'Salary structure not found for this month' });\n      }\n      \n      res.json(structure);\n    } catch (error) {\n      console.error('Error fetching salary structure:', error);\n      res.status(500).json({ message: 'Failed to fetch salary structure' });\n    }\n  });\n\n  // Upsert salary structure for specific month\n  app.put(\"/api/employee-salary-structure/:employeeId/:year/:month\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      // Get employee to check company access\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check access permissions\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions to update salary structure' });\n      }\n      \n      // Validate parameters\n      if (isNaN(employeeId) || isNaN(year) || isNaN(month)) {\n        return res.status(400).json({ message: 'Invalid parameters' });\n      }\n      if (month < 1 || month > 12) {\n        return res.status(400).json({ message: 'Month must be between 1 and 12' });\n      }\n      if (year < 2000 || year > 2100) {\n        return res.status(400).json({ message: 'Invalid year' });\n      }\n      \n      // Validate request body - Zod schema now handles empty string transformation\n      const structureData = {\n        ...req.body,\n        employeeId,\n        year,\n        month,\n        companyId: employee.companyId\n      };\n      \n      const validatedData = insertEmployeeSalaryStructureSchema.parse(structureData);\n      const updatedStructure = await storage.upsertEmployeeSalaryStructure(validatedData);\n      \n      res.json(updatedStructure);\n    } catch (error) {\n      console.error('Error updating salary structure:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid salary structure data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to update salary structure' });\n    }\n  });\n\n  // Cascade salary structure updates to future months (until next explicit update)\n  app.post(\"/api/employee-salary-structure/:employeeId/:year/:month/cascade\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      console.log('Cascade request received:', { employeeId, year, month });\n      \n      // Validate parameters\n      if (isNaN(employeeId) || isNaN(year) || isNaN(month)) {\n        return res.status(400).json({ message: 'Invalid parameters' });\n      }\n      if (month < 1 || month > 12) {\n        return res.status(400).json({ message: 'Month must be between 1 and 12' });\n      }\n      \n      // Get employee to check company access and verify existence\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check access permissions - only admins can cascade updates\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions to cascade salary structure updates' });\n      }\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      // Get the source structure data from the persisted current month (ensures canonical data)\n      const sourceStructure = await storage.getEmployeeSalaryStructure(employeeId, year, month);\n      if (!sourceStructure) {\n        return res.status(404).json({ message: 'Source salary structure not found for the specified month' });\n      }\n      \n      console.log('Source structure found:', { year, month, sourceId: sourceStructure.id });\n      \n      // Get all existing future salary structures to determine where to stop cascading\n      const existingFutureStructures = await storage.getFutureSalaryStructures(employeeId, year, month);\n      console.log('Existing future structures:', existingFutureStructures.map(s => ({ year: s.year, month: s.month })));\n      \n      // Find the next explicit update (earliest future month with existing data)\n      let stopYear = year + 2; // Default max 2 years\n      let stopMonth = month;\n      \n      if (existingFutureStructures.length > 0) {\n        const earliestFuture = existingFutureStructures[0]; // Already ordered by year, month\n        stopYear = earliestFuture.year;\n        stopMonth = earliestFuture.month;\n        console.log('Found next explicit update, stopping at:', { stopYear, stopMonth });\n      }\n      \n      // Generate future months to cascade (only until next explicit update)\n      const futureMonths = [];\n      let currentYear = year;\n      let currentMonth = month + 1; // Start from next month\n      \n      // If there are no future structures, cascade for up to 24 months (2 years)\n      if (existingFutureStructures.length === 0) {\n        console.log('No existing future structures found, cascading for up to 24 months');\n        for (let i = 0; i < 24; i++) {\n          if (currentMonth > 12) {\n            currentMonth = 1;\n            currentYear++;\n          }\n          futureMonths.push({ year: currentYear, month: currentMonth });\n          currentMonth++;\n        }\n      } else {\n        console.log('Found existing future structures, cascading until first existing one');\n        // Only cascade until the first existing future structure\n        while (currentYear < stopYear || (currentYear === stopYear && currentMonth < stopMonth)) {\n          if (currentMonth > 12) {\n            currentMonth = 1;\n            currentYear++;\n          }\n          \n          futureMonths.push({ year: currentYear, month: currentMonth });\n          currentMonth++;\n          \n          // Safety limit to prevent infinite loops\n          if (futureMonths.length > 100) {\n            console.warn('Cascade safety limit reached (100 months)');\n            break;\n          }\n        }\n      }\n      \n      console.log('Months to cascade:', futureMonths.length, futureMonths);\n      \n      // Update each future month with the source structure data (excluding id and timestamps)\n      const updatedMonths = [];\n      for (const { year: futureYear, month: futureMonth } of futureMonths) {\n        const futureStructureData = {\n          employeeId: sourceStructure.employeeId,\n          companyId: sourceStructure.companyId,\n          year: futureYear,\n          month: futureMonth,\n          epfEnabled: sourceStructure.epfEnabled,\n          employeePfLimit: sourceStructure.employeePfLimit,\n          employerPfLimit: sourceStructure.employerPfLimit,\n          esicEnabled: sourceStructure.esicEnabled,\n          lwfEnabled: sourceStructure.lwfEnabled,\n          otEnabled: sourceStructure.otEnabled,\n          doubleOt: sourceStructure.doubleOt,\n          vpfEnabled: sourceStructure.vpfEnabled,\n          vpfAmount: sourceStructure.vpfAmount,\n          tdsEnabled: sourceStructure.tdsEnabled,\n          tdsAmount: sourceStructure.tdsAmount,\n          ptEnabled: sourceStructure.ptEnabled,\n          ptAmount: sourceStructure.ptAmount,\n          bonusEnabled: sourceStructure.bonusEnabled,\n          bonusMonthlyPayment: sourceStructure.bonusMonthlyPayment,\n          entryType: sourceStructure.entryType,\n          ctcValue: sourceStructure.ctcValue,\n          grossValue: sourceStructure.grossValue,\n          earningHead1: sourceStructure.earningHead1,\n          earningHead2: sourceStructure.earningHead2,\n          earningHead3: sourceStructure.earningHead3,\n          earningHead4: sourceStructure.earningHead4,\n          epfEmployeeAmount: sourceStructure.epfEmployeeAmount,\n          esicEmployeeAmount: sourceStructure.esicEmployeeAmount,\n          lwfEmployeeAmount: sourceStructure.lwfEmployeeAmount\n        };\n        \n        try {\n          const updatedStructure = await storage.upsertEmployeeSalaryStructure(futureStructureData);\n          updatedMonths.push({ year: futureYear, month: futureMonth, success: true });\n          console.log(`Updated future month: ${futureYear}-${futureMonth}`);\n        } catch (error) {\n          console.warn(`Failed to update future month ${futureYear}-${futureMonth}:`, error);\n          updatedMonths.push({ year: futureYear, month: futureMonth, success: false, error: error.message });\n        }\n      }\n      \n      console.log('Cascade completed:', { \n        total: futureMonths.length, \n        successful: updatedMonths.filter(m => m.success).length,\n        failed: updatedMonths.filter(m => !m.success).length\n      });\n      \n      res.json({ \n        message: 'Cascade update completed',\n        sourceMonth: { year, month },\n        updatedMonths: updatedMonths.filter(m => m.success),\n        failedMonths: updatedMonths.filter(m => !m.success),\n        stoppedAt: existingFutureStructures.length > 0 ? { year: stopYear, month: stopMonth } : null\n      });\n    } catch (error) {\n      console.error('Error cascading salary structure updates:', error);\n      res.status(500).json({ message: 'Failed to cascade salary structure updates', error: error.message });\n    }\n  });\n\n  // Get latest salary structure for employee\n  app.get(\"/api/employee-salary-structure/:employeeId/latest\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      \n      // Validate parameters\n      if (isNaN(employeeId)) {\n        return res.status(400).json({ message: 'Invalid employee ID' });\n      }\n      \n      // Get employee to check company access\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check access permissions - employees can only view their own records\n      if (req.user.role === 'employee') {\n        if (employee.userId !== req.user.id) {\n          return res.status(403).json({ message: 'Access denied - employees can only view their own salary records' });\n        }\n      } else if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      const latestStructure = await storage.getLatestEmployeeSalaryStructure(employeeId);\n      if (!latestStructure) {\n        return res.status(404).json({ message: 'No salary structure found for this employee' });\n      }\n      \n      res.json(latestStructure);\n    } catch (error) {\n      console.error('Error fetching latest salary structure:', error);\n      res.status(500).json({ message: 'Failed to fetch latest salary structure' });\n    }\n  });\n\n  // Get salary structure history for employee\n  app.get(\"/api/employee-salary-structure/:employeeId/history\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 12;\n      \n      // Validate parameters\n      if (isNaN(employeeId)) {\n        return res.status(400).json({ message: 'Invalid employee ID' });\n      }\n      if (req.query.limit && (isNaN(limit) || limit < 1 || limit > 24)) {\n        return res.status(400).json({ message: 'Limit must be between 1 and 24' });\n      }\n      \n      // Get employee to check company access\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check access permissions - employees can only view their own records\n      if (req.user.role === 'employee') {\n        if (employee.userId !== req.user.id) {\n          return res.status(403).json({ message: 'Access denied - employees can only view their own salary records' });\n        }\n      } else if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      const history = await storage.getEmployeeSalaryStructureHistory(employeeId, limit);\n      res.json(history);\n    } catch (error) {\n      console.error('Error fetching salary structure history:', error);\n      res.status(500).json({ message: 'Failed to fetch salary structure history' });\n    }\n  });\n\n  // Generate salary history PDF for employee\n  app.get(\"/api/employee-salary-structure/:employeeId/pdf\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 12;\n      \n      // Validate parameters\n      if (isNaN(employeeId)) {\n        return res.status(400).json({ message: 'Invalid employee ID' });\n      }\n      if (req.query.limit && (isNaN(limit) || limit < 1 || limit > 24)) {\n        return res.status(400).json({ message: 'Limit must be between 1 and 24' });\n      }\n      \n      // Get employee to check company access and gather info\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check access permissions - employees can only view their own records\n      if (req.user.role === 'employee') {\n        if (employee.userId !== req.user.id) {\n          return res.status(403).json({ message: 'Access denied - employees can only view their own salary records' });\n        }\n      } else if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      // Get company information for header\n      const company = await storage.getCompany(employee.companyId);\n      if (!company) {\n        return res.status(404).json({ message: 'Company not found' });\n      }\n      \n      // Get complete salary history from date of joining to current month\n      const history = await storage.getCompleteSalaryHistoryFromJoining(employeeId);\n      if (!history || history.length === 0) {\n        return res.status(404).json({ message: 'No salary history found for this employee' });\n      }\n      \n      // Generate PDF\n      const pdfDoc = await PDFDocument.create();\n      const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman);\n      const timesRomanBoldFont = await pdfDoc.embedFont(StandardFonts.TimesRomanBold);\n      const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n      const helveticaBoldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\n      \n      let page = pdfDoc.addPage();\n      const { width, height } = page.getSize();\n      let currentY = height - 50;\n      \n      // PDF Header\n      page.drawText(company.name, {\n        x: 50,\n        y: currentY,\n        size: 20,\n        font: helveticaBoldFont,\n        color: rgb(0, 0, 0.5),\n      });\n      currentY -= 30;\n      \n      page.drawText('Salary History Report', {\n        x: 50,\n        y: currentY,\n        size: 16,\n        font: helveticaBoldFont,\n        color: rgb(0.2, 0.2, 0.2),\n      });\n      currentY -= 40;\n      \n      // Employee Information\n      page.drawText('Employee Information:', {\n        x: 50,\n        y: currentY,\n        size: 14,\n        font: helveticaBoldFont,\n        color: rgb(0, 0, 0),\n      });\n      currentY -= 20;\n      \n      const employeeInfo = [\n        `Name: ${employee.firstName} ${employee.lastName}`,\n        `Employee ID: ${employee.employeeId}`,\n        `Position: ${employee.position || 'N/A'}`,\n        `Email: ${employee.email}`,\n        `Generated on: ${new Date().toLocaleDateString('en-US', { \n          year: 'numeric', \n          month: 'long', \n          day: 'numeric' \n        })}`\n      ];\n      \n      employeeInfo.forEach(info => {\n        page.drawText(info, {\n          x: 70,\n          y: currentY,\n          size: 10,\n          font: helveticaFont,\n          color: rgb(0.3, 0.3, 0.3),\n        });\n        currentY -= 15;\n      });\n      \n      currentY -= 20;\n      \n      // Table Headers\n      const tableStartY = currentY;\n      const colWidths = [80, 80, 80, 80, 80, 80, 80]; // Adjust as needed\n      const headers = ['Period', 'CTC', 'Gross', 'Basic', 'HRA', 'Conveyance', 'Other'];\n      \n      // Draw table header background\n      page.drawRectangle({\n        x: 40,\n        y: currentY - 20,\n        width: width - 80,\n        height: 25,\n        color: rgb(0.9, 0.9, 0.9),\n      });\n      \n      // Draw table headers\n      let currentX = 50;\n      headers.forEach((header, index) => {\n        page.drawText(header, {\n          x: currentX,\n          y: currentY - 15,\n          size: 9,\n          font: helveticaBoldFont,\n          color: rgb(0, 0, 0),\n        });\n        currentX += colWidths[index];\n      });\n      \n      currentY -= 35;\n      \n      // Table Content\n      const monthNames = [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n      ];\n      \n      // Sort history by year and month (newest first)\n      const sortedHistory = history.sort((a, b) => {\n        if (a.year !== b.year) return b.year - a.year;\n        return b.month - a.month;\n      });\n      \n      sortedHistory.forEach((record, index) => {\n        // Check if we need a new page\n        if (currentY < 100) {\n          page = pdfDoc.addPage();\n          currentY = height - 50;\n        }\n        \n        // Alternate row colors\n        if (index % 2 === 0) {\n          page.drawRectangle({\n            x: 40,\n            y: currentY - 15,\n            width: width - 80,\n            height: 20,\n            color: rgb(0.98, 0.98, 0.98),\n          });\n        }\n        \n        const rowData = [\n          `${monthNames[record.month - 1]} ${record.year}`,\n          record.ctcValue ? `Rs.${parseFloat(record.ctcValue).toLocaleString('en-IN')}` : 'N/A',\n          record.grossValue ? `Rs.${parseFloat(record.grossValue).toLocaleString('en-IN')}` : 'N/A',\n          record.earningHead1 ? `Rs.${parseFloat(record.earningHead1).toLocaleString('en-IN')}` : 'N/A',\n          record.earningHead2 ? `Rs.${parseFloat(record.earningHead2).toLocaleString('en-IN')}` : 'N/A',\n          record.earningHead3 ? `Rs.${parseFloat(record.earningHead3).toLocaleString('en-IN')}` : 'N/A',\n          record.earningHead4 ? `Rs.${parseFloat(record.earningHead4).toLocaleString('en-IN')}` : 'N/A',\n        ];\n        \n        currentX = 50;\n        rowData.forEach((data, colIndex) => {\n          page.drawText(data, {\n            x: currentX,\n            y: currentY - 10,\n            size: 8,\n            font: helveticaFont,\n            color: rgb(0.2, 0.2, 0.2),\n          });\n          currentX += colWidths[colIndex];\n        });\n        \n        currentY -= 25;\n      });\n      \n      // Add footer\n      const footerY = 30;\n      page.drawText('This is a computer-generated document and does not require a signature.', {\n        x: 50,\n        y: footerY,\n        size: 8,\n        font: helveticaFont,\n        color: rgb(0.5, 0.5, 0.5),\n      });\n      \n      page.drawText(`Generated by ${company.name} HR System`, {\n        x: width - 200,\n        y: footerY,\n        size: 8,\n        font: helveticaFont,\n        color: rgb(0.5, 0.5, 0.5),\n      });\n      \n      // Generate PDF bytes\n      const pdfBytes = await pdfDoc.save();\n      \n      // Set response headers for PDF download  \n      const fileName = `salary_history_${employee.firstName}_${employee.lastName}_${new Date().toISOString().split('T')[0]}.pdf`;\n      \n      // Clear any existing headers that might interfere\n      res.removeHeader('Content-Type');\n      \n      // Set PDF-specific headers\n      res.set({\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': `attachment; filename=\"${fileName}\"`,\n        'Content-Length': pdfBytes.length.toString(),\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      // Send PDF as buffer (bypass any JSON middleware)\n      res.status(200);\n      res.end(Buffer.from(pdfBytes));\n      \n    } catch (error) {\n      console.error('Error generating salary history PDF:', error);\n      res.status(500).json({ message: 'Failed to generate salary history PDF' });\n    }\n  });\n\n  // Salary Component Management API Routes\n  \n  // Get all salary components\n  app.get(\"/api/salary-components\", authenticateToken, async (req, res) => {\n    try {\n      const components = await storage.getSalaryComponents();\n      res.json(components);\n    } catch (error) {\n      console.error('Error fetching salary components:', error);\n      res.status(500).json({ message: 'Failed to fetch salary components' });\n    }\n  });\n\n  // Company salary component configuration routes\n  app.get(\"/api/company-salary-config/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const entryMode = req.query.entryMode as string;\n      \n      if (isNaN(companyId)) {\n        return res.status(400).json({ message: 'Invalid company ID' });\n      }\n\n      // Validate entryMode if provided\n      if (entryMode && !['gross', 'ctc', 'earning_heads'].includes(entryMode)) {\n        return res.status(400).json({ message: 'Invalid entry mode. Must be: gross, ctc, or earning_heads' });\n      }\n\n      const config = await storage.getCompanySalaryComponentConfig(companyId, entryMode);\n      res.json(config);\n    } catch (error) {\n      console.error('Error fetching company salary config:', error);\n      res.status(500).json({ message: 'Failed to fetch company salary configuration' });\n    }\n  });\n\n  // Create or update company salary component configuration\n  app.post(\"/api/company-salary-config\", authenticateToken, async (req, res) => {\n    try {\n      const { insertCompanySalaryComponentConfigSchema } = await import(\"@shared/schema\");\n      const config = insertCompanySalaryComponentConfigSchema.parse(req.body);\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== config.companyId) {\n        return res.status(403).json({ message: 'Access denied to this company' });\n      }\n\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions to modify salary configuration' });\n      }\n\n      const result = await storage.upsertCompanySalaryComponentConfig(config);\n      res.status(201).json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid configuration data', errors: error.errors });\n      }\n      console.error('Error saving company salary config:', error);\n      res.status(500).json({ message: 'Failed to save company salary configuration' });\n    }\n  });\n\n  // Salary calculation preview endpoints\n  app.post(\"/api/salary-calculation/preview/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const { mode, amount, compliance, complianceValues } = req.body;\n      \n      if (isNaN(companyId)) {\n        return res.status(400).json({ message: 'Invalid company ID' });\n      }\n\n      if (!mode) {\n        return res.status(400).json({ message: 'Mode is required' });\n      }\n\n      // Validate mode\n      if (!['gross', 'ctc', 'earning_heads'].includes(mode)) {\n        return res.status(400).json({ message: 'Invalid mode. Must be: gross, ctc, or earning_heads' });\n      }\n\n      // For gross and ctc modes, amount is required\n      if ((mode === 'gross' || mode === 'ctc') && (!amount || isNaN(parseFloat(amount)))) {\n        return res.status(400).json({ message: 'Mode and amount are required' });\n      }\n\n      const { SalaryStructureEngine } = await import('./SalaryStructureEngine');\n      let result;\n\n      // Prepare compliance settings with defaults\n      const complianceSettings = {\n        epfEnabled: compliance?.epfEnabled ?? true,\n        esicEnabled: compliance?.esicEnabled ?? true,\n        lwfEnabled: compliance?.lwfEnabled ?? true,\n        otEnabled: compliance?.otEnabled ?? false,\n        vpfEnabled: compliance?.vpfEnabled ?? false,\n        tdsEnabled: compliance?.tdsEnabled ?? false,\n        ptEnabled: compliance?.ptEnabled ?? false,\n        bonusEnabled: compliance?.bonusEnabled ?? true,\n        pfLimit: compliance?.pfLimit ?? false,\n        pfLimitHigher: compliance?.pfLimitHigher ?? false,\n        bonusMonthly: compliance?.bonusMonthly ?? false,\n      };\n\n      // Prepare compliance values\n      const complianceVals = {\n        vpfPercentage: complianceValues?.vpfPercentage ? parseFloat(complianceValues.vpfPercentage) : 0,\n        tdsPercentage: complianceValues?.tdsPercentage ? parseFloat(complianceValues.tdsPercentage) : 0,\n        ptAmount: complianceValues?.ptAmount ? parseFloat(complianceValues.ptAmount) : 0,\n      };\n\n      switch (mode) {\n        case 'gross':\n          result = await SalaryStructureEngine.calculateFromGross(companyId, parseFloat(amount), complianceSettings, complianceVals);\n          break;\n        case 'ctc':\n          result = await SalaryStructureEngine.calculateFromCTC(companyId, parseFloat(amount), complianceSettings, complianceVals);\n          break;\n        case 'earning_heads':\n          // For earning heads mode, expect components array instead of single amount\n          if (!req.body.components || !Array.isArray(req.body.components)) {\n            return res.status(400).json({ message: 'Components array is required for earning heads mode' });\n          }\n          result = await SalaryStructureEngine.calculateFromEarningHeads(companyId, req.body.components, complianceSettings, complianceVals);\n          break;\n        default:\n          return res.status(400).json({ message: 'Invalid calculation mode' });\n      }\n\n      res.json(result);\n    } catch (error) {\n      console.error('Error calculating salary preview:', error);\n      res.status(500).json({ message: 'Failed to calculate salary preview' });\n    }\n  });\n\n  // Employee salary component values routes\n  app.get(\"/api/employee-salary-components/:structureId\", authenticateToken, async (req, res) => {\n    try {\n      const structureId = parseInt(req.params.structureId);\n      \n      if (isNaN(structureId)) {\n        return res.status(400).json({ message: 'Invalid structure ID' });\n      }\n\n      // Get structure to check access\n      const structure = await storage.getEmployeeSalaryStructure(structureId, 0, 0); // Dummy year/month for ID lookup\n      if (!structure) {\n        return res.status(404).json({ message: 'Salary structure not found' });\n      }\n\n      // Check access permissions\n      const employee = await storage.getEmployee(structure.employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      if (req.user.role === 'employee' && employee.userId !== req.user.id) {\n        return res.status(403).json({ message: 'Access denied to this salary structure' });\n      } else if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n\n      const values = await storage.getEmployeeSalaryComponentValues(structureId);\n      res.json(values);\n    } catch (error) {\n      console.error('Error fetching employee salary component values:', error);\n      res.status(500).json({ message: 'Failed to fetch employee salary component values' });\n    }\n  });\n\n  // Public jobs endpoint MUST come before parameterized routes\n  app.get(\"/api/jobs/public\", async (req, res) => {\n    try {\n      const jobs = await storage.getAllPublicJobs();\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch jobs' });\n    }\n  });\n\n  // Job routes\n  app.get(\"/api/jobs/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const jobs = await storage.getJobsByCompany(companyId);\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch jobs' });\n    }\n  });\n\n  app.get(\"/api/jobs/:companyId/:id\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const job = await storage.getJob(id);\n      if (!job) {\n        return res.status(404).json({ message: 'Job not found' });\n      }\n      res.json(job);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch job' });\n    }\n  });\n\n  app.post(\"/api/jobs\", authenticateToken, async (req, res) => {\n    try {\n      const jobData = insertJobSchema.parse(req.body);\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== jobData.companyId) {\n        return res.status(403).json({ message: 'Access denied to this company' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions to create job' });\n      }\n      \n      const job = await storage.createJob({ ...jobData, postedBy: req.user.id });\n      res.status(201).json(job);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid job data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to create job' });\n    }\n  });\n\n  app.put(\"/api/jobs/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const job = await storage.getJob(id);\n      \n      if (!job) {\n        return res.status(404).json({ message: 'Job not found' });\n      }\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== job.companyId) {\n        return res.status(403).json({ message: 'Access denied to this job' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions to update job' });\n      }\n      \n      const updatedJob = await storage.updateJob(id, req.body);\n      res.json(updatedJob);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update job' });\n    }\n  });\n\n  // Job Applications routes\n  app.get(\"/api/applications/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const applications = await storage.getApplicationsByCompany(companyId);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch applications' });\n    }\n  });\n\n  app.get(\"/api/applications/job/:jobId\", authenticateToken, async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.jobId);\n      const job = await storage.getJob(jobId);\n      \n      if (!job) {\n        return res.status(404).json({ message: 'Job not found' });\n      }\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== job.companyId) {\n        return res.status(403).json({ message: 'Access denied to this job' });\n      }\n      \n      const applications = await storage.getApplicationsByJob(jobId);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch job applications' });\n    }\n  });\n\n  // Attendance routes\n  app.get(\"/api/attendance/:employeeId\", authenticateToken, async (req, res) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const employee = await storage.getEmployee(employeeId);\n      \n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      const date = req.query.date ? new Date(req.query.date as string) : undefined;\n      const attendance = await storage.getAttendanceByEmployee(employeeId, date);\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch attendance' });\n    }\n  });\n\n  app.post(\"/api/attendance\", authenticateToken, async (req, res) => {\n    try {\n      const attendanceData = req.body;\n      const employee = await storage.getEmployee(attendanceData.employeeId);\n      \n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n      \n      // Check company access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied to this employee' });\n      }\n      \n      const attendance = await storage.createAttendance(attendanceData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create attendance record' });\n    }\n  });\n\n  // Enhanced Attendance Management Routes\n  \n  // Check-in endpoint with face and location verification\n  app.post(\"/api/attendance/checkin\", authenticateToken, async (req, res) => {\n    try {\n      const employee = await storage.getEmployeeByUserId(req.user.id);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee record not found' });\n      }\n\n      const { latitude, longitude, faceImage, deviceInfo } = req.body;\n      const ipAddress = req.ip || req.connection.remoteAddress;\n\n      const attendance = await storage.markCheckIn(employee.id, {\n        latitude,\n        longitude,\n        faceImage,\n        deviceInfo,\n        ipAddress\n      });\n\n      res.status(201).json({\n        success: true,\n        message: 'Check-in successful',\n        attendance,\n        verifications: {\n          faceVerified: attendance.faceVerified,\n          locationVerified: attendance.locationVerified\n        }\n      });\n    } catch (error) {\n      console.error('Check-in error:', error);\n      res.status(500).json({ message: 'Failed to mark check-in', error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Check-out endpoint\n  app.post(\"/api/attendance/checkout/:attendanceId\", authenticateToken, async (req, res) => {\n    try {\n      const attendanceId = parseInt(req.params.attendanceId);\n      const { latitude, longitude } = req.body;\n\n      const attendance = await storage.markCheckOut(attendanceId, {\n        latitude,\n        longitude\n      });\n\n      res.json({\n        success: true,\n        message: 'Check-out successful',\n        attendance,\n        hoursWorked: attendance.hoursWorked\n      });\n    } catch (error) {\n      console.error('Check-out error:', error);\n      res.status(500).json({ message: 'Failed to mark check-out', error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Get today's attendance status for employee\n  app.get(\"/api/attendance/today\", authenticateToken, async (req, res) => {\n    try {\n      const employee = await storage.getEmployeeByUserId(req.user.id);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee record not found' });\n      }\n\n      const today = new Date();\n      const attendance = await storage.getAttendanceByEmployee(employee.id, today);\n      \n      const todayAttendance = attendance.length > 0 ? attendance[0] : null;\n      \n      res.json({\n        hasCheckedIn: !!todayAttendance?.checkIn,\n        hasCheckedOut: !!todayAttendance?.checkOut,\n        attendance: todayAttendance,\n        canCheckIn: !todayAttendance?.checkIn,\n        canCheckOut: todayAttendance?.checkIn && !todayAttendance?.checkOut\n      });\n    } catch (error) {\n      console.error('Today attendance error:', error);\n      res.status(500).json({ message: 'Failed to fetch today\\'s attendance' });\n    }\n  });\n\n  // Monthly attendance summary - for specific employee (admin access)\n  app.get(\"/api/attendance/monthly/:employeeId/:year/:month\", authenticateToken, async (req, res) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      if (isNaN(employeeId) || isNaN(year) || isNaN(month)) {\n        return res.status(400).json({ message: 'Invalid parameters' });\n      }\n      \n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      // Check access\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      let monthlyAttendance = await storage.getMonthlyAttendance(employeeId, year, month);\n      \n      // Calculate if not exists or if requesting current month (to refresh)\n      const currentDate = new Date();\n      const isCurrentMonth = year === currentDate.getFullYear() && month === (currentDate.getMonth() + 1);\n      \n      if (!monthlyAttendance || isCurrentMonth) {\n        monthlyAttendance = await storage.calculateMonthlyAttendance(employeeId, employee.companyId, year, month);\n      }\n\n      res.json(monthlyAttendance);\n    } catch (error) {\n      console.error('Monthly attendance error:', error);\n      res.status(500).json({ message: 'Failed to fetch monthly attendance' });\n    }\n  });\n\n  // Monthly attendance summary - for current employee\n  app.get(\"/api/attendance/monthly/me/:year/:month\", authenticateToken, async (req, res) => {\n    try {\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      if (isNaN(year) || isNaN(month) || month < 1 || month > 12 || year < 2020 || year > 2030) {\n        console.error('Invalid monthly attendance parameters:', { year, month });\n        return res.status(400).json({ message: 'Invalid parameters' });\n      }\n\n      const employee = await storage.getEmployeeByUserId(req.user.id);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee record not found' });\n      }\n\n      let monthlyAttendance = await storage.getMonthlyAttendance(employee.id, year, month);\n      \n      // Calculate if not exists or if requesting current month (to refresh)\n      const currentDate = new Date();\n      const isCurrentMonth = year === currentDate.getFullYear() && month === (currentDate.getMonth() + 1);\n      \n      if (!monthlyAttendance || isCurrentMonth) {\n        monthlyAttendance = await storage.calculateMonthlyAttendance(employee.id, employee.companyId, year, month);\n      }\n\n      res.json(monthlyAttendance);\n    } catch (error) {\n      console.error('Monthly attendance error:', error);\n      res.status(500).json({ message: 'Failed to fetch monthly attendance' });\n    }\n  });\n\n  // Quick attendance entry\n  app.post(\"/api/attendance/quick-entry\", authenticateToken, async (req, res) => {\n    try {\n      const { employeeId, payDays, otHours, month, year } = req.body;\n      \n      if (!employeeId || payDays === undefined || otHours === undefined || !month || !year) {\n        return res.status(400).json({ message: 'Missing required fields' });\n      }\n\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Store the attendance data in monthly attendance table\n      const result = await storage.upsertMonthlyAttendanceQuickEntry({\n        employeeId,\n        year,\n        month,\n        payDays,\n        otHours: parseFloat(otHours)\n      });\n\n      res.json({\n        success: true,\n        message: 'Attendance data updated successfully',\n        data: result\n      });\n    } catch (error) {\n      console.error('Quick entry error:', error);\n      res.status(500).json({ message: 'Failed to update attendance data', error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Get attendance summary for today\n  app.get(\"/api/attendance/summary/today\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = req.user.companyId;\n      if (!companyId) {\n        return res.status(400).json({ message: 'Company not found' });\n      }\n      \n      const employees = await storage.getEmployeesByCompany(companyId);\n      const totalEmployees = employees.length;\n      \n      const summary = {\n        todayPresent: Math.floor(totalEmployees * 0.85) || 1,\n        todayAbsent: Math.floor(totalEmployees * 0.15) || 0,\n        todayLeave: Math.floor(totalEmployees * 0.08) || 0,\n        todayWeeklyOff: Math.floor(totalEmployees * 0.05) || 0,\n        continuouslyAbsent: Math.floor(totalEmployees * 0.02) || 0\n      };\n\n      res.json(summary);\n    } catch (error) {\n      console.error('Summary error:', error);\n      res.status(500).json({ message: 'Failed to fetch attendance summary' });\n    }\n  });\n\n  // Get employee attendance data for table\n  app.get(\"/api/attendance/employee-data/:companyId/:year/:month\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const employees = await storage.getEmployeesByCompany(companyId);\n      const departments = await storage.getDepartmentsByCompany(companyId);\n      \n      const attendanceData = [];\n      \n      for (const emp of employees) {\n        let monthlyRecord = await storage.getMonthlyAttendanceByEmployee(emp.id, year, month);\n        \n        // If no saved record, calculate defaults\n        if (!monthlyRecord) {\n          const basePresent = 20 + (emp.id % 5);\n          const weeklyOff = 4;\n          const leave = emp.id % 3;\n          const holidays = 2;\n          const payDays = basePresent + weeklyOff + leave + holidays;\n          const otHours = (emp.id + 1) * 1.5;\n          \n          monthlyRecord = {\n            presentDays: basePresent,\n            payableDays: payDays,\n            totalHoursWorked: otHours.toString()\n          };\n        }\n        \n        const department = departments.find(d => d.id === emp.departmentId);\n        \n        attendanceData.push({\n          id: emp.id,\n          payCode: emp.employeeId,\n          employeeName: `${emp.firstName} ${emp.lastName}`,\n          department: department?.name || 'N/A',\n          present: monthlyRecord.presentDays || 20,\n          weeklyOff: 4,\n          leave: Math.max(0, (monthlyRecord.payableDays || 26) - (monthlyRecord.presentDays || 20) - 4 - 2),\n          holidays: 2,\n          payDays: monthlyRecord.payableDays || 26,\n          otHours: parseFloat(monthlyRecord.totalHoursWorked || '0')\n        });\n      }\n\n      res.json(attendanceData);\n    } catch (error) {\n      console.error('Employee attendance data error:', error);\n      res.status(500).json({ message: 'Failed to fetch employee attendance data' });\n    }\n  });\n\n  // In-memory storage for monthly attendance data (in a real app, this would be in the database)\n  const monthlyAttendanceStore = new Map<string, any[]>();\n\n  // Delete attendance record\n  app.delete(\"/api/attendance/delete/:employeeId/:year/:month\", authenticateToken, async (req, res) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n\n      // Get employee to check company access\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Get the attendance data for this company/month\n      const key = `${req.user.companyId}-${year}-${month}`;\n      let attendanceData = monthlyAttendanceStore.get(key);\n      \n      if (!attendanceData) {\n        // If no stored data, get fresh data from the main API and store it\n        const employees = await storage.getEmployeesByCompany(req.user.companyId);\n        const departments = await storage.getDepartmentsByCompany(req.user.companyId);\n        \n        attendanceData = [];\n        for (const emp of employees) {\n          // Get monthly attendance record for this employee\n          let monthlyRecord;\n          try {\n            monthlyRecord = await storage.getMonthlyAttendance(emp.id, year, month);\n          } catch (error) {\n            // If no record exists, generate default data\n            const basePresent = 20 + (emp.id % 5);\n            const weeklyOff = 4;\n            const leave = emp.id % 3;\n            const holidays = 2;\n            const payDays = basePresent + weeklyOff + leave + holidays;\n            const otHours = (emp.id + 1) * 1.5;\n            \n            monthlyRecord = {\n              presentDays: basePresent,\n              payableDays: payDays,\n              totalHoursWorked: otHours.toString()\n            };\n          }\n          \n          const department = departments.find(d => d.id === emp.departmentId);\n          \n          const safePresentDays = monthlyRecord?.presentDays || 20;\n          const safePayableDays = monthlyRecord?.payableDays || 26;\n          const safeTotalHours = monthlyRecord?.totalHoursWorked || '0';\n          \n          attendanceData.push({\n            id: emp.id,\n            payCode: emp.employeeId,\n            employeeName: `${emp.firstName} ${emp.lastName}`,\n            department: department?.name || 'N/A',\n            present: safePresentDays,\n            weeklyOff: 4,\n            leave: Math.max(0, safePayableDays - safePresentDays - 4 - 2),\n            holidays: 2,\n            payDays: safePayableDays,\n            otHours: parseFloat(safeTotalHours)\n          });\n        }\n        monthlyAttendanceStore.set(key, attendanceData);\n      }\n\n      // Remove the employee's attendance record\n      const originalLength = attendanceData.length;\n      attendanceData = attendanceData.filter((record: any) => record.id !== employeeId);\n      \n      if (attendanceData.length === originalLength) {\n        return res.status(404).json({ message: 'Attendance record not found' });\n      }\n\n      // Update the store\n      monthlyAttendanceStore.set(key, attendanceData);\n\n      res.json({\n        success: true,\n        message: 'Attendance record deleted successfully'\n      });\n    } catch (error) {\n      console.error('Delete attendance error:', error);\n      res.status(500).json({ message: 'Failed to delete attendance record' });\n    }\n  });\n\n  // In-memory storage for daily records (in a real app, this would be in the database)\n  const dailyRecordsStore = new Map<string, any[]>();\n\n  const generateInitialDailyRecords = (employeeId: number, year: number, month: number) => {\n    const key = `${employeeId}-${year}-${month}`;\n    if (dailyRecordsStore.has(key)) {\n      return dailyRecordsStore.get(key)!;\n    }\n\n    const daysInMonth = new Date(year, month, 0).getDate();\n    const dailyRecords = [];\n    \n    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const statuses = ['Present', 'Present', 'Present', 'Present', 'Late', 'Present', 'Absent'];\n    const sources = ['Biometric', 'Biometric', 'Manual', 'Biometric', 'Self', 'Biometric', 'Manual'];\n\n    for (let day = 1; day <= daysInMonth; day++) {\n      const date = new Date(year, month - 1, day);\n      const dayOfWeek = date.getDay();\n      const dayName = dayNames[dayOfWeek];\n      \n      // Skip Sundays for most records\n      if (dayOfWeek === 0 && Math.random() > 0.2) continue;\n      \n      const status = statuses[day % statuses.length];\n      const isPresent = status !== 'Absent';\n      \n      const baseInHour = 9 + (day % 3) * 0.5; // 9:00-10:30 range\n      const baseOutHour = 18 + (day % 2) * 0.5; // 18:00-18:30 range\n      \n      const inTime = isPresent ? `${Math.floor(baseInHour).toString().padStart(2, '0')}:${((baseInHour % 1) * 60).toString().padStart(2, '0')}` : '';\n      const outTime = isPresent ? `${Math.floor(baseOutHour).toString().padStart(2, '0')}:${((baseOutHour % 1) * 60).toString().padStart(2, '0')}` : '';\n      \n      const workingHours = isPresent ? baseOutHour - baseInHour : 0;\n      const otHours = Math.max(0, workingHours - 8);\n\n      dailyRecords.push({\n        id: day + employeeId * 100,\n        date: date.toISOString().split('T')[0],\n        day: dayName,\n        inTime,\n        outTime,\n        workingHours: Math.round(workingHours * 10) / 10,\n        otHours: Math.round(otHours * 10) / 10,\n        status,\n        source: sources[day % sources.length]\n      });\n    }\n\n    const sortedRecords = dailyRecords.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n    dailyRecordsStore.set(key, sortedRecords);\n    return sortedRecords;\n  };\n\n  // Get daily attendance log for employee\n  app.get(\"/api/attendance/daily-log/:employeeId/:year/:month\", authenticateToken, async (req, res) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n\n      // Get employee to check company access\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const dailyRecords = generateInitialDailyRecords(employeeId, year, month);\n      res.json(dailyRecords);\n    } catch (error) {\n      console.error('Daily log error:', error);\n      res.status(500).json({ message: 'Failed to fetch daily attendance log' });\n    }\n  });\n\n  // Add daily attendance record\n  app.post(\"/api/attendance/daily-record\", authenticateToken, async (req, res) => {\n    try {\n      const { employeeId, date, inTime, outTime, workingHours, otHours, status, source } = req.body;\n\n      // Get employee to check company access\n      const employee = await storage.getEmployee(employeeId);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      if (req.user.role !== 'system_admin' && req.user.companyId !== employee.companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Parse date to get year and month\n      const recordDate = new Date(date);\n      const year = recordDate.getFullYear();\n      const month = recordDate.getMonth() + 1;\n      const key = `${employeeId}-${year}-${month}`;\n\n      // Get or create records for this month\n      let records = dailyRecordsStore.get(key) || generateInitialDailyRecords(employeeId, year, month);\n\n      // Create new record\n      const newRecord = {\n        id: Date.now(), // Use timestamp as unique ID\n        date,\n        day: recordDate.toLocaleDateString('en-US', { weekday: 'long' }),\n        inTime,\n        outTime,\n        workingHours,\n        otHours,\n        status,\n        source\n      };\n\n      // Add the new record\n      records.push(newRecord);\n      records.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n      dailyRecordsStore.set(key, records);\n\n      res.json({\n        success: true,\n        message: 'Daily attendance record added successfully',\n        data: newRecord\n      });\n    } catch (error) {\n      console.error('Add daily record error:', error);\n      res.status(500).json({ message: 'Failed to add daily attendance record' });\n    }\n  });\n\n  // Update daily attendance record\n  app.put(\"/api/attendance/daily-record/:recordId\", authenticateToken, async (req, res) => {\n    try {\n      const recordId = parseInt(req.params.recordId);\n      const { date, inTime, outTime, workingHours, otHours, status, source } = req.body;\n\n      // Find the record across all stored data\n      let foundRecord = null;\n      let foundKey = null;\n      \n      for (const [key, records] of dailyRecordsStore.entries()) {\n        const record = records.find(r => r.id === recordId);\n        if (record) {\n          foundRecord = record;\n          foundKey = key;\n          break;\n        }\n      }\n\n      if (!foundRecord || !foundKey) {\n        return res.status(404).json({ message: 'Record not found' });\n      }\n\n      // Update the record\n      const records = dailyRecordsStore.get(foundKey)!;\n      const recordIndex = records.findIndex(r => r.id === recordId);\n      \n      if (recordIndex !== -1) {\n        const recordDate = new Date(date);\n        records[recordIndex] = {\n          ...records[recordIndex],\n          date,\n          day: recordDate.toLocaleDateString('en-US', { weekday: 'long' }),\n          inTime,\n          outTime,\n          workingHours,\n          otHours,\n          status,\n          source\n        };\n        \n        // Re-sort the records\n        records.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n        dailyRecordsStore.set(foundKey, records);\n      }\n\n      res.json({\n        success: true,\n        message: 'Daily attendance record updated successfully',\n        data: records[recordIndex]\n      });\n    } catch (error) {\n      console.error('Update daily record error:', error);\n      res.status(500).json({ message: 'Failed to update daily attendance record' });\n    }\n  });\n\n  // Delete daily attendance record\n  app.delete(\"/api/attendance/daily-record/:recordId\", authenticateToken, async (req, res) => {\n    try {\n      const recordId = parseInt(req.params.recordId);\n\n      // Find and delete the record across all stored data\n      let deletedRecord = null;\n      \n      for (const [key, records] of dailyRecordsStore.entries()) {\n        const recordIndex = records.findIndex(r => r.id === recordId);\n        if (recordIndex !== -1) {\n          deletedRecord = records[recordIndex];\n          records.splice(recordIndex, 1); // Remove the record\n          dailyRecordsStore.set(key, records); // Update the store\n          break;\n        }\n      }\n\n      if (!deletedRecord) {\n        return res.status(404).json({ message: 'Record not found' });\n      }\n\n      res.json({\n        success: true,\n        message: 'Daily attendance record deleted successfully',\n        data: { recordId, deletedRecord }\n      });\n    } catch (error) {\n      console.error('Delete daily record error:', error);\n      res.status(500).json({ message: 'Failed to delete daily attendance record' });\n    }\n  });\n\n  // User Management Routes (Admin and System Admin only)\n  app.get(\"/api/users\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      let users;\n      if (req.user.role === 'system_admin') {\n        users = await storage.getAllUsers();\n      } else {\n        users = await storage.getUsersByCompany(req.user.companyId);\n      }\n      \n      // Remove password from response\n      const safeUsers = users.map(user => ({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        role: user.role,\n        companyId: user.companyId,\n        isActive: user.isActive,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      }));\n      \n      res.json(safeUsers);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  app.post(\"/api/users\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      // System admin can create users for any company, admin only for their company\n      if (req.user.role === 'admin' && req.body.companyId !== req.user.companyId) {\n        return res.status(403).json({ message: 'Cannot create users for other companies' });\n      }\n      \n      const userData = req.body;\n      const user = await storage.createUser(userData);\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: req.user.companyId,\n        action: 'user_created',\n        entityType: 'user',\n        entityId: user.id,\n        details: `Created user: ${user.email}`,\n      });\n      \n      // Remove password from response\n      const { password, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create user' });\n    }\n  });\n\n  app.put(\"/api/users/:id\", authenticateToken, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const existingUser = await storage.getUser(userId);\n      \n      if (!existingUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      // Permission checks\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      if (req.user.role === 'admin' && existingUser.companyId !== req.user.companyId) {\n        return res.status(403).json({ message: 'Cannot edit users from other companies' });\n      }\n      \n      const updatedUser = await storage.updateUser(userId, req.body);\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: req.user.companyId,\n        action: 'user_updated',\n        entityType: 'user',\n        entityId: userId,\n        details: `Updated user: ${updatedUser.email}`,\n      });\n      \n      const { password, ...safeUser } = updatedUser;\n      res.json(safeUser);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", authenticateToken, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const existingUser = await storage.getUser(userId);\n      \n      if (!existingUser) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      // Permission checks\n      if (req.user.role !== 'system_admin' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      if (req.user.role === 'admin' && existingUser.companyId !== req.user.companyId) {\n        return res.status(403).json({ message: 'Cannot delete users from other companies' });\n      }\n      \n      await storage.deleteUser(userId);\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: req.user.companyId,\n        action: 'user_deleted',\n        entityType: 'user',\n        entityId: userId,\n        details: `Deleted user: ${existingUser.email}`,\n      });\n      \n      res.json({ message: 'User deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete user' });\n    }\n  });\n\n  // Company Management Routes (System Admin only)\n  app.get(\"/api/admin/companies\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'System admin access required' });\n      }\n      \n      const companies = await storage.getAllCompanies();\n      res.json(companies);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch companies' });\n    }\n  });\n\n  app.post(\"/api/admin/companies\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'System admin access required' });\n      }\n      \n      const companyData = req.body;\n      const company = await storage.createCompany(companyData);\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: null,\n        action: 'company_created',\n        entityType: 'company',\n        entityId: company.id,\n        details: `Created company: ${company.name}`,\n      });\n      \n      res.status(201).json(company);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create company' });\n    }\n  });\n\n  app.put(\"/api/admin/companies/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'System admin access required' });\n      }\n      \n      const companyId = parseInt(req.params.id);\n      const updatedCompany = await storage.updateCompany(companyId, req.body);\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: null,\n        action: 'company_updated',\n        entityType: 'company',\n        entityId: companyId,\n        details: `Updated company: ${updatedCompany.name}`,\n      });\n      \n      res.json(updatedCompany);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update company' });\n    }\n  });\n\n  // Company profile update for admins\n  app.put(\"/api/companies/:id\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.id);\n      \n      // Check if user is admin of this company\n      if (req.user.role !== 'admin' || req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      // When profile is completed, set status to pending for approval\n      const profileData = { ...req.body, status: 'pending' };\n      const updatedCompany = await storage.updateCompanyProfile(companyId, profileData);\n      \n      res.json(updatedCompany);\n    } catch (error) {\n      console.error('Company profile update error:', error);\n      res.status(500).json({ message: 'Failed to update company profile' });\n    }\n  });\n\n  // Company approval by system admin\n  app.put(\"/api/admin/companies/:id/approve\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'System admin access required' });\n      }\n      \n      const companyId = parseInt(req.params.id);\n      const { action } = req.body; // 'approve' or 'reject'\n      \n      const status = action === 'approve' ? 'approved' : 'rejected';\n      const updatedCompany = await storage.updateCompany(companyId, { status });\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: null,\n        action: `company_${action}d`,\n        entityType: 'company',\n        entityId: companyId,\n        details: `${action === 'approve' ? 'Approved' : 'Rejected'} company: ${updatedCompany.name}`,\n      });\n      \n      res.json(updatedCompany);\n    } catch (error) {\n      console.error('Company approval error:', error);\n      res.status(500).json({ message: 'Failed to process company approval' });\n    }\n  });\n\n  // Delete company by system admin\n  app.delete(\"/api/admin/companies/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'System admin access required' });\n      }\n      \n      const companyId = parseInt(req.params.id);\n      const company = await storage.getCompany(companyId);\n      \n      if (!company) {\n        return res.status(404).json({ message: 'Company not found' });\n      }\n      \n      await storage.deleteCompany(companyId);\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: null,\n        action: 'company_deleted',\n        entityType: 'company',\n        entityId: companyId,\n        details: `Deleted company: ${company.name}`,\n      });\n      \n      res.json({ message: 'Company deleted successfully' });\n    } catch (error) {\n      console.error('Company deletion error:', error);\n      res.status(500).json({ message: 'Failed to delete company' });\n    }\n  });\n\n  // Permission Management Routes\n  app.get(\"/api/permissions\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch permissions' });\n    }\n  });\n\n  app.get(\"/api/permission-requests\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        const userRequests = await storage.getPermissionRequestsByUser(req.user.id);\n        return res.json(userRequests);\n      }\n      \n      let requests;\n      if (req.user.role === 'system_admin') {\n        requests = await storage.getPermissionRequests();\n      } else {\n        requests = await storage.getPermissionRequests(req.user.companyId);\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch permission requests' });\n    }\n  });\n\n  app.post(\"/api/permission-requests\", authenticateToken, async (req, res) => {\n    try {\n      const { permissionType, reason } = req.body;\n      \n      if (!permissionType || !reason) {\n        return res.status(400).json({ message: 'Permission type and reason are required' });\n      }\n      \n      const requestData = {\n        userId: req.user.id,\n        requestedBy: req.user.id,\n        permissionType: permissionType as any,\n        reason,\n        companyId: req.user.companyId,\n        status: 'pending' as any\n      };\n      \n      const permissionRequest = await storage.createPermissionRequest(requestData);\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: req.user.companyId,\n        action: 'permission_requested',\n        entityType: 'permission_request',\n        entityId: permissionRequest.id,\n        details: `Requested permission: ${permissionRequest.permissionType}`,\n      });\n      \n      res.status(201).json(permissionRequest);\n    } catch (error) {\n      console.error('Permission request creation error:', error);\n      res.status(500).json({ message: 'Failed to create permission request' });\n    }\n  });\n\n  app.put(\"/api/permission-requests/:id\", authenticateToken, async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const updatedRequest = await storage.updatePermissionRequest(requestId, {\n        ...req.body,\n        reviewedBy: req.user.id,\n        reviewedAt: new Date(),\n      });\n      \n      // Log the activity\n      await storage.createUserActivity({\n        userId: req.user.id,\n        companyId: req.user.companyId,\n        action: 'permission_reviewed',\n        entityType: 'permission_request',\n        entityId: requestId,\n        details: `${req.body.status === 'approved' ? 'Approved' : 'Rejected'} permission request`,\n      });\n      \n      res.json(updatedRequest);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update permission request' });\n    }\n  });\n\n  // User Activities/Audit Trail\n  app.get(\"/api/activities\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        const activities = await storage.getUserActivities(undefined, req.user.id);\n        return res.json(activities);\n      }\n      \n      let activities;\n      if (req.user.role === 'system_admin') {\n        activities = await storage.getUserActivities();\n      } else {\n        activities = await storage.getUserActivities(req.user.companyId);\n      }\n      \n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch activities' });\n    }\n  });\n\n  // Public routes for signup\n\n  // Employee profile routes\n  app.get(\"/api/employee/profile\", authenticateToken, async (req, res) => {\n    try {\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: 'Unauthorized' });\n      }\n\n      // Check if user has an employee profile first\n      const profile = await storage.getEmployeeProfileByUserId(user.id);\n      if (profile) {\n        res.json(profile);\n        return;\n      }\n\n      // Fallback to old employee record if exists\n      const employee = await storage.getEmployeeByUserId(user.id);\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch employee profile' });\n    }\n  });\n\n  app.put(\"/api/employee/profile\", authenticateToken, async (req, res) => {\n    try {\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: 'Unauthorized' });\n      }\n\n      const profileData = req.body;\n      const updatedProfile = await storage.updateEmployeeProfile(user.id, profileData);\n      \n      res.json(updatedProfile);\n    } catch (error) {\n      console.error('Error updating employee profile:', error);\n      res.status(500).json({ message: 'Failed to update employee profile' });\n    }\n  });\n\n  // KYC details routes\n  app.get('/api/employee/kyc', authenticateToken, async (req, res) => {\n    try {\n      const profile = await storage.getEmployeeProfileByUserId(req.user!.id);\n      if (!profile) {\n        return res.status(404).json({ error: 'Employee profile not found' });\n      }\n      \n      const kycDetails = await storage.getKycDetailsByProfile(profile.id);\n      res.json(kycDetails || {});\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get KYC details' });\n    }\n  });\n\n  app.put('/api/employee/kyc', authenticateToken, async (req, res) => {\n    try {\n      const profile = await storage.getEmployeeProfileByUserId(req.user!.id);\n      if (!profile) {\n        return res.status(404).json({ error: 'Employee profile not found' });\n      }\n      \n      const kycDetails = await storage.updateKycDetails(profile.id, req.body);\n      res.json(kycDetails);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update KYC details' });\n    }\n  });\n\n  // Admin endpoint: Lookup employee by Aadhaar for auto-filling form\n  app.post(\"/api/admin/lookup-employee-by-aadhaar\", authenticateToken, async (req, res) => {\n    try {\n      const user = req.user;\n      const { aadhaarNo } = req.body;\n      \n      if (user.role !== 'admin' && user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      if (!aadhaarNo) {\n        return res.status(400).json({ message: 'Aadhaar number is required' });\n      }\n\n      // Clean Aadhaar number\n      const cleanAadhaar = aadhaarNo.replace(/\\s/g, '');\n      \n      // Get employee profile and KYC details by Aadhaar\n      const result = await db.select({\n        kycDetails: kycDetails,\n        employeeProfile: employeeProfiles\n      })\n        .from(kycDetails)\n        .innerJoin(employeeProfiles, eq(kycDetails.employeeProfileId, employeeProfiles.id))\n        .where(eq(kycDetails.aadharNo, cleanAadhaar))\n        .limit(1);\n\n      if (result.length === 0) {\n        return res.json({\n          found: false,\n          message: 'No employee profile found for this Aadhaar number'\n        });\n      }\n\n      const employeeData = result[0];\n      \n      return res.json({\n        found: true,\n        employeeProfile: employeeData.employeeProfile,\n        kycDetails: employeeData.kycDetails,\n        message: 'Employee profile found and loaded'\n      });\n      \n    } catch (error) {\n      console.error('Error looking up employee by Aadhaar:', error);\n      res.status(500).json({ message: 'Failed to lookup employee data' });\n    }\n  });\n\n  // Check employee status by Aadhaar after verification\n  app.get(\"/api/employee/aadhaar-status\", authenticateToken, async (req, res) => {\n    try {\n      const user = req.user;\n      \n      if (user.role !== 'employee') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Get employee profile and KYC details\n      const profile = await storage.getEmployeeProfileByUserId(user.id);\n      if (!profile) {\n        return res.status(404).json({ message: 'Employee profile not found' });\n      }\n\n      const kycDetails = await storage.getKycDetailsByProfile(profile.id);\n      if (!kycDetails || !kycDetails.aadharNo) {\n        return res.json({\n          aadhaarVerified: false,\n          isEmployeeInCompany: false,\n          message: 'Aadhaar verification required'\n        });\n      }\n\n      // Check if employee exists in any company database by Aadhaar\n      const employeeStatus = await storage.getEmployeeStatusByAadhaar(kycDetails.aadharNo);\n      \n      res.json({\n        aadhaarVerified: true,\n        isEmployeeInCompany: employeeStatus.isEmployeeInCompany,\n        employeeData: employeeStatus.employeeData,\n        companyData: employeeStatus.companyData,\n        currentUser: user\n      });\n    } catch (error) {\n      console.error('Aadhaar status check error:', error);\n      res.status(500).json({ message: 'Failed to check employee status' });\n    }\n  });\n\n  // Recruitment Management Routes\n  \n  // Get job applications for company\n  app.get('/api/job-applications/:companyId', authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const applications = await storage.getJobApplicationsByCompany(companyId);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch job applications' });\n    }\n  });\n\n  // Update job application status\n  app.put('/api/job-applications/:id/status', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      const application = await storage.updateJobApplicationStatus(id, status, req.user!.id);\n      res.json(application);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update application status' });\n    }\n  });\n\n  // Get interviews for company\n  app.get('/api/interviews/:companyId', authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const interviews = await storage.getInterviewsByCompany(companyId);\n      res.json(interviews);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch interviews' });\n    }\n  });\n\n  // Schedule interview\n  app.post('/api/interviews', authenticateToken, async (req, res) => {\n    try {\n      const interviewData = req.body;\n      const interview = await storage.createInterview(interviewData);\n      res.status(201).json(interview);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to schedule interview' });\n    }\n  });\n\n  // Update interview status\n  app.put('/api/interviews/:id/status', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status, notes } = req.body;\n      \n      const interview = await storage.updateInterviewStatus(id, status, notes);\n      res.json(interview);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update interview status' });\n    }\n  });\n\n  // Create job offer\n  app.post('/api/job-offers', authenticateToken, async (req, res) => {\n    try {\n      const offerData = req.body;\n      const offer = await storage.createJobOffer(offerData);\n      res.status(201).json(offer);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create job offer' });\n    }\n  });\n\n  // Get job offers for company\n  app.get('/api/job-offers/:companyId', authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const offers = await storage.getJobOffersByCompany(companyId);\n      res.json(offers);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch job offers' });\n    }\n  });\n\n  // Update job offer status\n  app.put('/api/job-offers/:id/status', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      const offer = await storage.updateJobOfferStatus(id, status);\n      res.json(offer);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update offer status' });\n    }\n  });\n\n  app.get(\"/api/job-applications/my\", authenticateToken, async (req, res) => {\n    try {\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: 'Unauthorized' });\n      }\n\n      const applications = await storage.getJobApplicationsByEmail(user.email);\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch applications' });\n    }\n  });\n\n  // Zod schemas for leave and advance requests\n  const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n    id: true,\n    employeeId: true,\n    companyId: true,\n    createdAt: true,\n    updatedAt: true,\n    appliedAt: true,\n    level1ApproverId: true,\n    level1ApprovedAt: true,\n    level1Comments: true,\n    level2ApproverId: true,\n    level2ApprovedAt: true,\n    level2Comments: true,\n    finalApproverId: true,\n    finalApprovedAt: true,\n    finalComments: true,\n    rejectedById: true,\n    rejectedAt: true,\n    rejectionReason: true\n  });\n\n  const insertAdvanceRequestSchema = createInsertSchema(advanceRequests).omit({\n    id: true,\n    employeeId: true,\n    companyId: true,\n    createdAt: true,\n    updatedAt: true,\n    appliedAt: true,\n    level1ApproverId: true,\n    level1ApprovedAt: true,\n    level1Comments: true,\n    level2ApproverId: true,\n    level2ApprovedAt: true,\n    level2Comments: true,\n    finalApproverId: true,\n    finalApprovedAt: true,\n    finalComments: true,\n    rejectedById: true,\n    rejectedAt: true,\n    rejectionReason: true,\n    paidAmount: true,\n    paidAt: true,\n    paymentMethod: true,\n    paymentReference: true\n  });\n\n  // Leave Request routes\n  app.get('/api/leave-requests/:companyId', authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const user = req.user as { id: number; companyId: number; role: string };\n      \n      if (user.role !== 'system_admin' && user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      let requests;\n      if (user.role === 'employee') {\n        // Employees can only see their own requests\n        const employee = await storage.getEmployeeByUserId(user.id);\n        if (!employee) {\n          return res.status(404).json({ message: 'Employee not found' });\n        }\n        requests = await storage.getLeaveRequestsByEmployee(employee.id);\n      } else {\n        // Admins and system admins can see all company requests\n        requests = await storage.getLeaveRequestsByCompany(companyId);\n      }\n\n      res.json(requests);\n    } catch (error) {\n      console.error('Error fetching leave requests:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/leave-requests', authenticateToken, async (req, res) => {\n    try {\n      const user = req.user as { id: number; companyId: number; role: string };\n      const requestData = insertLeaveRequestSchema.parse(req.body);\n      \n      // Get employee record for the user\n      const employee = await storage.getEmployeeByUserId(user.id);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      // Create leave request\n      const leaveRequest = await storage.createLeaveRequest({\n        ...requestData,\n        employeeId: employee.id,\n        companyId: user.companyId\n      });\n\n      res.status(201).json(leaveRequest);\n    } catch (error) {\n      console.error('Error creating leave request:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid request data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/leave-requests/:id/approve', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { level, comments } = req.body;\n      const user = req.user as { id: number; companyId: number; role: string };\n\n      if (user.role === 'employee') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedRequest = await storage.approveLeaveRequest(id, level, user.id, comments);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error('Error approving leave request:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/leave-requests/:id/reject', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { reason } = req.body;\n      const user = req.user as { id: number; companyId: number; role: string };\n\n      if (user.role === 'employee') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedRequest = await storage.rejectLeaveRequest(id, user.id, reason);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error('Error rejecting leave request:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Advance Request routes\n  app.get('/api/advance-requests/:companyId', authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const user = req.user as { id: number; companyId: number; role: string };\n      \n      if (user.role !== 'system_admin' && user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      let requests;\n      if (user.role === 'employee') {\n        // Employees can only see their own requests\n        const employee = await storage.getEmployeeByUserId(user.id);\n        if (!employee) {\n          return res.status(404).json({ message: 'Employee not found' });\n        }\n        requests = await storage.getAdvanceRequestsByEmployee(employee.id);\n      } else {\n        // Admins and system admins can see all company requests\n        requests = await storage.getAdvanceRequestsByCompany(companyId);\n      }\n\n      res.json(requests);\n    } catch (error) {\n      console.error('Error fetching advance requests:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/advance-requests', authenticateToken, async (req, res) => {\n    try {\n      const user = req.user as { id: number; companyId: number; role: string };\n      const requestData = insertAdvanceRequestSchema.parse(req.body);\n      \n      // Get employee record for the user\n      const employee = await storage.getEmployeeByUserId(user.id);\n      if (!employee) {\n        return res.status(404).json({ message: 'Employee not found' });\n      }\n\n      // Create advance request\n      const advanceRequest = await storage.createAdvanceRequest({\n        ...requestData,\n        employeeId: employee.id,\n        companyId: user.companyId\n      });\n\n      res.status(201).json(advanceRequest);\n    } catch (error) {\n      console.error('Error creating advance request:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid request data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/advance-requests/:id/approve', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { level, comments } = req.body;\n      const user = req.user as { id: number; companyId: number; role: string };\n\n      if (user.role === 'employee') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedRequest = await storage.approveAdvanceRequest(id, level, user.id, comments);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error('Error approving advance request:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/advance-requests/:id/reject', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { reason } = req.body;\n      const user = req.user as { id: number; companyId: number; role: string };\n\n      if (user.role === 'employee') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedRequest = await storage.rejectAdvanceRequest(id, user.id, reason);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error('Error rejecting advance request:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/advance-requests/:id/mark-paid', authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { paidAmount, paymentMethod, paymentReference } = req.body;\n      const user = req.user as { id: number; companyId: number; role: string };\n\n      if (user.role === 'employee') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedRequest = await storage.markAdvancePaid(id, paidAmount, paymentMethod, paymentReference);\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error('Error marking advance as paid:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  // Signup routes\n  app.post(\"/api/companies/signup\", async (req, res) => {\n    try {\n      const companyData = req.body;\n      const company = await storage.createCompany({\n        ...companyData,\n        status: 'active',\n      });\n      res.status(201).json(company);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create company' });\n    }\n  });\n\n  // Admin signup endpoint - simplified (3 fields only)\n  app.post(\"/api/users/admin-signup\", async (req, res) => {\n    try {\n      const { name, email, password } = req.body;\n      \n      if (!name || !email || !password) {\n        return res.status(400).json({ message: 'Name, email, and password are required' });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: 'Email already registered' });\n      }\n\n      // Create a default company for the admin (pending approval)\n      const company = await storage.createCompany({\n        name: `${name}'s Company`,\n        email: email,\n        phone: '',\n        address: '',\n        status: 'pending',\n      });\n\n      // Create admin user with simplified data\n      const username = name.toLowerCase().replace(/\\s+/g, '').substring(0, 20);\n      const user = await storage.createUser({\n        username,\n        email,\n        password,\n        role: 'admin',\n        companyId: company.id,\n      });\n\n      // Remove password from response\n      const { password: _, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    } catch (error) {\n      console.error('Admin signup error:', error);\n      res.status(500).json({ message: 'Failed to create admin account' });\n    }\n  });\n\n  // Employee signup endpoint - simplified (3 fields only)\n  app.post(\"/api/users/employee-signup\", async (req, res) => {\n    try {\n      const { name, email, password } = req.body;\n      \n      if (!name || !email || !password) {\n        return res.status(400).json({ message: 'Name, email, and password are required' });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ message: 'Email already registered' });\n      }\n      \n      // Create user without company association initially\n      const username = name.toLowerCase().replace(/\\s+/g, '').substring(0, 20);\n      const user = await storage.createUser({\n        username,\n        email,\n        password,\n        role: 'employee',\n        companyId: null, // No company association initially\n      });\n      \n      // Create employee profile with minimal data - split name into first/last\n      const nameParts = name.trim().split(' ');\n      const firstName = nameParts[0] || name;\n      const lastName = nameParts.slice(1).join(' ') || '';\n      \n      await storage.createEmployeeProfile({\n        userId: user.id,\n        firstName,\n        lastName,\n        skills: '',\n        experience: '',  \n        phone: '',\n        address: '',\n      });\n      \n      // Remove password from response\n      const { password: _, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    } catch (error) {\n      console.error('Employee signup error:', error);\n      \n      // Handle specific database constraint errors\n      if (error.code === '23505') {\n        if (error.constraint === 'users_email_unique') {\n          return res.status(409).json({ message: 'Email already registered' });\n        }\n      }\n      \n      res.status(500).json({ message: 'Failed to create employee account' });\n    }\n  });\n\n  // Payroll Routes\n  app.get(\"/api/payroll/monthly/:companyId\", authenticateToken, checkCompanyAccess, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const payrolls = await storage.getMonthlyPayrolls(companyId);\n      \n      // Add record count and total amount for each payroll\n      const enrichedPayrolls = await Promise.all(payrolls.map(async (payroll) => {\n        try {\n          const records = await storage.getPayrollRecords(payroll.id);\n          const totalAmount = records.reduce((sum, record) => {\n            const netSalary = parseFloat(record.netSalary || '0');\n            return sum + (isNaN(netSalary) ? 0 : netSalary);\n          }, 0);\n          return {\n            ...payroll,\n            recordCount: records.length,\n            totalAmount\n          };\n        } catch (error) {\n          console.error(`Error processing payroll ${payroll.id}:`, error);\n          return {\n            ...payroll,\n            recordCount: 0,\n            totalAmount: 0\n          };\n        }\n      }));\n      \n      res.json(enrichedPayrolls);\n    } catch (error: any) {\n      console.error('Error fetching monthly payrolls:', error);\n      res.status(500).json({ message: error.message || 'Failed to fetch payrolls' });\n    }\n  });\n\n  app.get(\"/api/payroll/records/:payrollId\", authenticateToken, async (req, res) => {\n    try {\n      const payrollId = parseInt(req.params.payrollId);\n      \n      // First verify the payroll exists and user has access\n      const payroll = await storage.getMonthlyPayroll(payrollId);\n      if (!payroll) {\n        return res.status(404).json({ message: 'Payroll not found' });\n      }\n      \n      // Check company access for non-system admins\n      if (req.user.role !== 'system_admin' && req.user.companyId !== payroll.companyId) {\n        return res.status(403).json({ message: 'Access denied to this payroll' });\n      }\n      \n      const records = await storage.getPayrollRecords(payrollId);\n      \n      // Enrich records with employee details\n      const enrichedRecords = await Promise.all(records.map(async (record) => {\n        const employee = await storage.getEmployee(record.employeeId);\n        const departments = await storage.getDepartmentsByCompany(payroll.companyId);\n        const department = departments.find(d => d.id === employee?.departmentId);\n        \n        return {\n          ...record,\n          employeeName: employee ? `${employee.firstName} ${employee.lastName}` : 'Unknown',\n          employeeCode: employee?.employeeId || 'N/A',\n          department: department?.name || 'N/A'\n        };\n      }));\n      \n      res.json(enrichedRecords);\n    } catch (error: any) {\n      console.error('Error fetching payroll records:', error);\n      res.status(500).json({ message: error.message || 'Failed to fetch payroll records' });\n    }\n  });\n\n  app.post(\"/api/payroll/generate\", authenticateToken, async (req, res) => {\n    try {\n      const { month, year } = req.body;\n      const companyId = req.user.companyId;\n      const generatedBy = req.user.id;\n      \n      if (!month || !year || !companyId) {\n        return res.status(400).json({ message: 'Month, year, and company ID are required' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Employees cannot generate payroll' });\n      }\n      \n      // Use new automated PayrollService instead of legacy method\n      const { PayrollService } = await import('./PayrollService');\n      const payroll = await PayrollService.generate(companyId, year, month, generatedBy);\n      res.json(payroll);\n    } catch (error: any) {\n      console.error('Error generating payroll:', error);\n      res.status(500).json({ message: error.message || 'Failed to generate payroll' });\n    }\n  });\n\n  app.put(\"/api/payroll/finalize/:payrollId\", authenticateToken, async (req, res) => {\n    try {\n      const payrollId = parseInt(req.params.payrollId);\n      const finalizedBy = req.user.id;\n      \n      // Verify payroll exists and user has access\n      const payroll = await storage.getMonthlyPayroll(payrollId);\n      if (!payroll) {\n        return res.status(404).json({ message: 'Payroll not found' });\n      }\n      \n      if (req.user.role !== 'system_admin' && req.user.companyId !== payroll.companyId) {\n        return res.status(403).json({ message: 'Access denied to this payroll' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Employees cannot finalize payroll' });\n      }\n      \n      if (payroll.status === 'finalized') {\n        return res.status(400).json({ message: 'Payroll is already finalized' });\n      }\n      \n      const finalizedPayroll = await storage.finalizePayroll(payrollId, finalizedBy);\n      res.json(finalizedPayroll);\n    } catch (error: any) {\n      console.error('Error finalizing payroll:', error);\n      res.status(500).json({ message: error.message || 'Failed to finalize payroll' });\n    }\n  });\n\n  // Delete monthly payroll (only for draft status)\n  app.delete(\"/api/payroll/monthly/:payrollId\", authenticateToken, async (req, res) => {\n    try {\n      const payrollId = parseInt(req.params.payrollId);\n      \n      // Verify payroll exists and user has access\n      const payroll = await storage.getMonthlyPayroll(payrollId);\n      if (!payroll) {\n        return res.status(404).json({ message: 'Payroll not found' });\n      }\n      \n      if (req.user.role !== 'system_admin' && req.user.companyId !== payroll.companyId) {\n        return res.status(403).json({ message: 'Access denied to this payroll' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Employees cannot delete payroll' });\n      }\n      \n      if (payroll.status === 'finalized') {\n        return res.status(400).json({ message: 'Cannot delete finalized payroll' });\n      }\n      \n      const deleted = await storage.deleteMonthlyPayroll(payrollId);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Payroll not found or could not be deleted' });\n      }\n      \n      res.status(204).end();\n    } catch (error: any) {\n      console.error('Error deleting payroll:', error);\n      res.status(500).json({ message: error.message || 'Failed to delete payroll' });\n    }\n  });\n\n  app.put(\"/api/payroll/payment/:recordId\", authenticateToken, async (req, res) => {\n    try {\n      const recordId = parseInt(req.params.recordId);\n      const { status, amount, method, reference } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ message: 'Payment status is required' });\n      }\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Employees cannot update payment status' });\n      }\n      \n      const updatedRecord = await storage.updatePaymentStatus(recordId, status, amount, method, reference);\n      res.json(updatedRecord);\n    } catch (error: any) {\n      console.error('Error updating payment status:', error);\n      res.status(500).json({ message: error.message || 'Failed to update payment status' });\n    }\n  });\n\n  // Enhanced Permission Management API Routes\n  \n  // Get all permissions with filtering\n  app.get(\"/api/permissions/enhanced\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const { category, module } = req.query;\n      let permissions;\n      \n      if (category) {\n        permissions = await storage.getPermissionsByCategory(category as string);\n      } else if (module) {\n        permissions = await storage.getPermissionsByModule(module as string);\n      } else {\n        permissions = await storage.getAllPermissions();\n      }\n      \n      res.json(permissions);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch permissions' });\n    }\n  });\n\n  // Create new permission\n  app.post(\"/api/permissions/enhanced\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'Only system admins can create permissions' });\n      }\n      \n      const permission = await storage.createPermission(req.body);\n      res.status(201).json(permission);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create permission' });\n    }\n  });\n\n  // Update permission\n  app.put(\"/api/permissions/enhanced/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'Only system admins can update permissions' });\n      }\n      \n      const id = parseInt(req.params.id);\n      const permission = await storage.updatePermission(id, req.body);\n      res.json(permission);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update permission' });\n    }\n  });\n\n  // Delete permission\n  app.delete(\"/api/permissions/enhanced/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'Only system admins can delete permissions' });\n      }\n      \n      const id = parseInt(req.params.id);\n      await storage.deletePermission(id);\n      res.json({ message: 'Permission deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete permission' });\n    }\n  });\n\n  // User Permission Routes\n  \n  // Get user permissions\n  app.get(\"/api/user-permissions/:userId\", authenticateToken, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const companyId = req.user.companyId;\n      \n      if (req.user.role === 'employee' && req.user.id !== userId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const permissions = await storage.getUserPermissions(userId, companyId);\n      res.json(permissions);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch user permissions' });\n    }\n  });\n\n  // Check user permission\n  app.get(\"/api/user-permissions/:userId/check/:permissionName\", authenticateToken, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const permissionName = req.params.permissionName;\n      const companyId = req.user.companyId;\n      \n      if (req.user.role === 'employee' && req.user.id !== userId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const hasPermission = await storage.hasUserPermission(userId, permissionName, companyId);\n      res.json({ hasPermission });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to check user permission' });\n    }\n  });\n\n  // Grant user permission\n  app.post(\"/api/user-permissions\", authenticateToken, async (req, res) => {\n    try {\n      console.log('Grant permission request received:', req.body);\n      console.log('User making request:', req.user);\n      \n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const grantData = {\n        ...req.body,\n        grantedBy: req.user.id,\n        companyId: req.user.companyId,\n        isActive: true,\n        grantedAt: new Date()\n      };\n      \n      console.log('About to grant permission with data:', grantData);\n      const userPermission = await storage.grantUserPermission(grantData);\n      console.log('Permission granted successfully:', userPermission);\n      \n      res.status(201).json(userPermission);\n    } catch (error) {\n      console.error('Failed to grant permission - ERROR:', error);\n      res.status(500).json({ message: 'Failed to grant permission', error: error.message });\n    }\n  });\n\n  // Revoke user permission\n  app.delete(\"/api/user-permissions/:userId/:permissionId\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const userId = parseInt(req.params.userId);\n      const permissionId = parseInt(req.params.permissionId);\n      const companyId = req.user.companyId;\n      \n      await storage.revokeUserPermission(userId, permissionId, companyId);\n      res.json({ message: 'Permission revoked successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to revoke permission' });\n    }\n  });\n\n  // Enhanced Permission Request Routes\n  \n  // Get permission requests with enhanced filtering\n  app.get(\"/api/permission-requests/enhanced\", authenticateToken, async (req, res) => {\n    try {\n      // Use basic permission requests for now\n      const requests = await storage.getPermissionRequests(req.user.companyId);\n      res.json(requests);\n    } catch (error) {\n      console.error('Permission requests error:', error);\n      res.status(500).json({ message: 'Failed to fetch permission requests' });\n    }\n  });\n\n  // Create enhanced permission request\n  app.post(\"/api/permission-requests/enhanced\", authenticateToken, async (req, res) => {\n    try {\n      const request = await storage.createPermissionRequestEnhanced({\n        ...req.body,\n        userId: req.user.id,\n        companyId: req.user.companyId\n      });\n      \n      res.status(201).json(request);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create permission request' });\n    }\n  });\n\n  // Approve permission request by level\n  app.put(\"/api/permission-requests/enhanced/:id/approve\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const id = parseInt(req.params.id);\n      const { level, comments } = req.body;\n      \n      const request = await storage.approvePermissionRequestLevel(id, req.user.id, level, comments);\n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to approve permission request' });\n    }\n  });\n\n  // Reject permission request by level\n  app.put(\"/api/permission-requests/enhanced/:id/reject\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const id = parseInt(req.params.id);\n      const { level, comments } = req.body;\n      \n      const request = await storage.rejectPermissionRequestLevel(id, req.user.id, level, comments);\n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to reject permission request' });\n    }\n  });\n\n  // Role Permission Routes\n  \n  // Get role permissions\n  app.get(\"/api/role-permissions/:role\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const role = req.params.role;\n      const companyId = req.user.role === 'system_admin' ? undefined : req.user.companyId;\n      \n      const permissions = await storage.getRolePermissionsEnhanced(role, companyId);\n      res.json(permissions);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch role permissions' });\n    }\n  });\n\n  // Assign role permission\n  app.post(\"/api/role-permissions\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const rolePermission = await storage.assignRolePermission({\n        ...req.body,\n        companyId: req.user.role === 'system_admin' ? req.body.companyId : req.user.companyId\n      });\n      \n      res.status(201).json(rolePermission);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to assign role permission' });\n    }\n  });\n\n  // Remove role permission\n  app.delete(\"/api/role-permissions/:role/:permissionId\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const role = req.params.role;\n      const permissionId = parseInt(req.params.permissionId);\n      const companyId = req.user.role === 'system_admin' ? undefined : req.user.companyId;\n      \n      await storage.removeRolePermission(role, permissionId, companyId);\n      res.json({ message: 'Role permission removed successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to remove role permission' });\n    }\n  });\n\n  // Permission Template Routes\n  \n  // Get permission templates\n  app.get(\"/api/permission-templates\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const { role } = req.query;\n      const templates = await storage.getPermissionTemplates(role as string);\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch permission templates' });\n    }\n  });\n\n  // Create permission template\n  app.post(\"/api/permission-templates\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'Only system admins can create templates' });\n      }\n      \n      const template = await storage.createPermissionTemplate(req.body);\n      res.status(201).json(template);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create permission template' });\n    }\n  });\n\n  // Update permission template\n  app.put(\"/api/permission-templates/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'Only system admins can update templates' });\n      }\n      \n      const id = parseInt(req.params.id);\n      const template = await storage.updatePermissionTemplate(id, req.body);\n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update permission template' });\n    }\n  });\n\n  // Delete permission template\n  app.delete(\"/api/permission-templates/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'system_admin') {\n        return res.status(403).json({ message: 'Only system admins can delete templates' });\n      }\n      \n      const id = parseInt(req.params.id);\n      await storage.deletePermissionTemplate(id);\n      res.json({ message: 'Permission template deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete permission template' });\n    }\n  });\n\n  // Apply permission template\n  app.post(\"/api/permission-templates/:id/apply\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      \n      const templateId = parseInt(req.params.id);\n      const { userId } = req.body;\n      \n      const permissions = await storage.applyPermissionTemplate(\n        templateId, \n        userId, \n        req.user.companyId, \n        req.user.id\n      );\n      \n      res.json(permissions);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to apply permission template' });\n    }\n  });\n\n  // Company Settings API Routes\n  // Biometric Machines\n  app.get(\"/api/biometric-machines/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const machines = await storage.getBiometricMachinesByCompany(companyId);\n      res.json(machines);\n    } catch (error) {\n      console.error('Error fetching biometric machines:', error);\n      res.status(500).json({ message: 'Failed to fetch biometric machines' });\n    }\n  });\n\n  app.post(\"/api/biometric-machines\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const machineData = { ...req.body, companyId: req.user.companyId };\n      const machine = await storage.createBiometricMachine(machineData);\n      res.json(machine);\n    } catch (error) {\n      console.error('Error creating biometric machine:', error);\n      res.status(500).json({ message: 'Failed to create biometric machine' });\n    }\n  });\n\n  app.put(\"/api/biometric-machines/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const machine = await storage.updateBiometricMachine(id, req.body);\n      res.json(machine);\n    } catch (error) {\n      console.error('Error updating biometric machine:', error);\n      res.status(500).json({ message: 'Failed to update biometric machine' });\n    }\n  });\n\n  app.delete(\"/api/biometric-machines/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteBiometricMachine(id);\n      res.json({ message: 'Biometric machine deleted' });\n    } catch (error) {\n      console.error('Error deleting biometric machine:', error);\n      res.status(500).json({ message: 'Failed to delete biometric machine' });\n    }\n  });\n\n  // Holidays\n  app.get(\"/api/holidays/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const holidays = await storage.getHolidaysByCompany(companyId);\n      res.json(holidays);\n    } catch (error) {\n      console.error('Error fetching holidays:', error);\n      res.status(500).json({ message: 'Failed to fetch holidays' });\n    }\n  });\n\n  app.post(\"/api/holidays\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const holidayData = { ...req.body, companyId: req.user.companyId };\n      const holiday = await storage.createHoliday(holidayData);\n      res.json(holiday);\n    } catch (error) {\n      console.error('Error creating holiday:', error);\n      res.status(500).json({ message: 'Failed to create holiday' });\n    }\n  });\n\n  app.put(\"/api/holidays/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const holiday = await storage.updateHoliday(id, req.body);\n      res.json(holiday);\n    } catch (error) {\n      console.error('Error updating holiday:', error);\n      res.status(500).json({ message: 'Failed to update holiday' });\n    }\n  });\n\n  app.delete(\"/api/holidays/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteHoliday(id);\n      res.json({ message: 'Holiday deleted' });\n    } catch (error) {\n      console.error('Error deleting holiday:', error);\n      res.status(500).json({ message: 'Failed to delete holiday' });\n    }\n  });\n\n  // Leave Policies\n  app.get(\"/api/leave-policies/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const policies = await storage.getLeavePoliciesByCompany(companyId);\n      res.json(policies);\n    } catch (error) {\n      console.error('Error fetching leave policies:', error);\n      res.status(500).json({ message: 'Failed to fetch leave policies' });\n    }\n  });\n\n  app.post(\"/api/leave-policies\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const policyData = { ...req.body, companyId: req.user.companyId };\n      const policy = await storage.createLeavePolicy(policyData);\n      res.json(policy);\n    } catch (error) {\n      console.error('Error creating leave policy:', error);\n      res.status(500).json({ message: 'Failed to create leave policy' });\n    }\n  });\n\n  app.put(\"/api/leave-policies/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const policy = await storage.updateLeavePolicy(id, req.body);\n      res.json(policy);\n    } catch (error) {\n      console.error('Error updating leave policy:', error);\n      res.status(500).json({ message: 'Failed to update leave policy' });\n    }\n  });\n\n  app.delete(\"/api/leave-policies/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteLeavePolicy(id);\n      res.json({ message: 'Leave policy deleted' });\n    } catch (error) {\n      console.error('Error deleting leave policy:', error);\n      res.status(500).json({ message: 'Failed to delete leave policy' });\n    }\n  });\n\n  // Designations\n  app.get(\"/api/designations/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const designations = await storage.getDesignationsByCompany(companyId);\n      res.json(designations);\n    } catch (error) {\n      console.error('Error fetching designations:', error);\n      res.status(500).json({ message: 'Failed to fetch designations' });\n    }\n  });\n\n  app.post(\"/api/designations\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const designationData = { ...req.body, companyId: req.user.companyId };\n      const designation = await storage.createDesignation(designationData);\n      res.json(designation);\n    } catch (error) {\n      console.error('Error creating designation:', error);\n      res.status(500).json({ message: 'Failed to create designation' });\n    }\n  });\n\n  app.put(\"/api/designations/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const designation = await storage.updateDesignation(id, req.body);\n      res.json(designation);\n    } catch (error) {\n      console.error('Error updating designation:', error);\n      res.status(500).json({ message: 'Failed to update designation' });\n    }\n  });\n\n  app.delete(\"/api/designations/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteDesignation(id);\n      res.json({ message: 'Designation deleted' });\n    } catch (error) {\n      console.error('Error deleting designation:', error);\n      res.status(500).json({ message: 'Failed to delete designation' });\n    }\n  });\n\n  // Branches\n  app.get(\"/api/branches/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const branches = await storage.getBranchesByCompany(companyId);\n      res.json(branches);\n    } catch (error) {\n      console.error('Error fetching branches:', error);\n      res.status(500).json({ message: 'Failed to fetch branches' });\n    }\n  });\n\n  app.post(\"/api/branches\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const branchData = { ...req.body, companyId: req.user.companyId };\n      const branch = await storage.createBranch(branchData);\n      res.json(branch);\n    } catch (error) {\n      console.error('Error creating branch:', error);\n      res.status(500).json({ message: 'Failed to create branch' });\n    }\n  });\n\n  app.put(\"/api/branches/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const branch = await storage.updateBranch(id, req.body);\n      res.json(branch);\n    } catch (error) {\n      console.error('Error updating branch:', error);\n      res.status(500).json({ message: 'Failed to update branch' });\n    }\n  });\n\n  app.delete(\"/api/branches/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteBranch(id);\n      res.json({ message: 'Branch deleted' });\n    } catch (error) {\n      console.error('Error deleting branch:', error);\n      res.status(500).json({ message: 'Failed to delete branch' });\n    }\n  });\n\n  // Locations\n  app.get(\"/api/locations/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const locations = await storage.getLocationsByCompany(companyId);\n      res.json(locations);\n    } catch (error) {\n      console.error('Error fetching locations:', error);\n      res.status(500).json({ message: 'Failed to fetch locations' });\n    }\n  });\n\n  app.post(\"/api/locations\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const locationData = { ...req.body, companyId: req.user.companyId };\n      const location = await storage.createLocation(locationData);\n      res.json(location);\n    } catch (error) {\n      console.error('Error creating location:', error);\n      res.status(500).json({ message: 'Failed to create location' });\n    }\n  });\n\n  app.put(\"/api/locations/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const location = await storage.updateLocation(id, req.body);\n      res.json(location);\n    } catch (error) {\n      console.error('Error updating location:', error);\n      res.status(500).json({ message: 'Failed to update location' });\n    }\n  });\n\n  app.delete(\"/api/locations/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteLocation(id);\n      res.json({ message: 'Location deleted' });\n    } catch (error) {\n      console.error('Error deleting location:', error);\n      res.status(500).json({ message: 'Failed to delete location' });\n    }\n  });\n\n  // Cost Centers\n  app.get(\"/api/cost-centers/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const costCenters = await storage.getCostCentersByCompany(companyId);\n      res.json(costCenters);\n    } catch (error) {\n      console.error('Error fetching cost centers:', error);\n      res.status(500).json({ message: 'Failed to fetch cost centers' });\n    }\n  });\n\n  app.post(\"/api/cost-centers\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const costCenterData = { ...req.body, companyId: req.user.companyId };\n      const costCenter = await storage.createCostCenter(costCenterData);\n      res.json(costCenter);\n    } catch (error) {\n      console.error('Error creating cost center:', error);\n      res.status(500).json({ message: 'Failed to create cost center' });\n    }\n  });\n\n  app.put(\"/api/cost-centers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const costCenter = await storage.updateCostCenter(id, req.body);\n      res.json(costCenter);\n    } catch (error) {\n      console.error('Error updating cost center:', error);\n      res.status(500).json({ message: 'Failed to update cost center' });\n    }\n  });\n\n  app.delete(\"/api/cost-centers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteCostCenter(id);\n      res.json({ message: 'Cost center deleted' });\n    } catch (error) {\n      console.error('Error deleting cost center:', error);\n      res.status(500).json({ message: 'Failed to delete cost center' });\n    }\n  });\n\n  // Client Compliances API Routes\n  \n  // Get clients by company\n  app.get(\"/api/clients/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const clients = await storage.getClientsByCompany(companyId);\n      res.json(clients);\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n      res.status(500).json({ message: 'Failed to fetch clients' });\n    }\n  });\n\n  // Create client\n  app.post(\"/api/clients\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const clientData = { ...req.body, companyId: req.user.companyId };\n      const client = await storage.createClient(clientData);\n      res.json(client);\n    } catch (error) {\n      console.error('Error creating client:', error);\n      res.status(500).json({ message: 'Failed to create client' });\n    }\n  });\n\n  // Update client\n  app.put(\"/api/clients/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const client = await storage.updateClient(id, req.body);\n      res.json(client);\n    } catch (error) {\n      console.error('Error updating client:', error);\n      res.status(500).json({ message: 'Failed to update client' });\n    }\n  });\n\n  // Delete client\n  app.delete(\"/api/clients/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteClient(id);\n      res.json({ message: 'Client deleted' });\n    } catch (error) {\n      console.error('Error deleting client:', error);\n      res.status(500).json({ message: 'Failed to delete client' });\n    }\n  });\n\n  // Compliance Setups API Routes\n  \n  // Get compliance setups by company\n  app.get(\"/api/compliance-setups/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const setups = await storage.getComplianceSetupsByCompany(companyId);\n      res.json(setups);\n    } catch (error) {\n      console.error('Error fetching compliance setups:', error);\n      res.status(500).json({ message: 'Failed to fetch compliance setups' });\n    }\n  });\n\n  // Create compliance setup\n  app.post(\"/api/compliance-setups\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const setupData = { ...req.body, companyId: req.user.companyId };\n      const setup = await storage.createComplianceSetup(setupData);\n      \n      // Auto-generate compliance data for all projects this employee is assigned to\n      const assignments = await storage.getEmployeeAssignmentsByEmployee(setup.employeeId);\n      for (const assignment of assignments) {\n        if (assignment.deassignDate === null) { // Only active assignments\n          await storage.autoGenerateComplianceData(\n            req.user.companyId,\n            setup.employeeId,\n            assignment.projectId\n          );\n        }\n      }\n      \n      res.json(setup);\n    } catch (error) {\n      console.error('Error creating compliance setup:', error);\n      res.status(500).json({ message: 'Failed to create compliance setup' });\n    }\n  });\n\n  // Update compliance setup\n  app.put(\"/api/compliance-setups/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const setup = await storage.updateComplianceSetup(id, req.body);\n      res.json(setup);\n    } catch (error) {\n      console.error('Error updating compliance setup:', error);\n      res.status(500).json({ message: 'Failed to update compliance setup' });\n    }\n  });\n\n  // Delete compliance setup\n  app.delete(\"/api/compliance-setups/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteComplianceSetup(id);\n      res.json({ message: 'Compliance setup deleted' });\n    } catch (error) {\n      console.error('Error deleting compliance setup:', error);\n      res.status(500).json({ message: 'Failed to delete compliance setup' });\n    }\n  });\n\n  // Compliances Data API Routes\n  \n  // Get compliances data by company\n  app.get(\"/api/compliances-data/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      const data = await storage.getCompliancesDataByCompany(companyId);\n      res.json(data);\n    } catch (error) {\n      console.error('Error fetching compliances data:', error);\n      res.status(500).json({ message: 'Failed to fetch compliances data' });\n    }\n  });\n\n  // Get compliances data by project and month\n  app.get(\"/api/compliances-data/:companyId/:projectId/:month\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const projectId = parseInt(req.params.projectId);\n      const month = req.params.month;\n      \n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const data = await storage.getCompliancesDataByProjectAndMonth(companyId, projectId, month);\n      res.json(data);\n    } catch (error) {\n      console.error('Error fetching compliances data by project and month:', error);\n      res.status(500).json({ message: 'Failed to fetch compliances data' });\n    }\n  });\n\n  // Create compliances data\n  app.post(\"/api/compliances-data\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const complianceData = { ...req.body, companyId: req.user.companyId };\n      const data = await storage.createCompliancesData(complianceData);\n      res.json(data);\n    } catch (error) {\n      console.error('Error creating compliances data:', error);\n      res.status(500).json({ message: 'Failed to create compliances data' });\n    }\n  });\n\n  // Update compliances data\n  app.put(\"/api/compliances-data/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      const data = await storage.updateCompliancesData(id, req.body);\n      res.json(data);\n    } catch (error) {\n      console.error('Error updating compliances data:', error);\n      res.status(500).json({ message: 'Failed to update compliances data' });\n    }\n  });\n\n  // Delete compliances data\n  app.delete(\"/api/compliances-data/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const id = parseInt(req.params.id);\n      await storage.deleteCompliancesData(id);\n      res.json({ message: 'Compliances data deleted' });\n    } catch (error) {\n      console.error('Error deleting compliances data:', error);\n      res.status(500).json({ message: 'Failed to delete compliances data' });\n    }\n  });\n\n  // Auto-generate compliance data for all assignments in a project\n  app.post(\"/api/compliances-data/generate/:projectId\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n      const projectId = parseInt(req.params.projectId);\n      await storage.generateComplianceDataForProject(req.user.companyId, projectId);\n      res.json({ message: 'Compliance data generated successfully for all assigned employees' });\n    } catch (error) {\n      console.error('Error generating compliance data:', error);\n      res.status(500).json({ message: 'Failed to generate compliance data' });\n    }\n  });\n\n  // Employee Assignment Routes\n  app.get(\"/api/employee-assignments/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const assignments = await storage.getEmployeeAssignmentsByCompany(companyId);\n      res.json(assignments);\n    } catch (error: any) {\n      console.error(\"Error fetching employee assignments:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/employee-assignments\", authenticateToken, async (req, res) => {\n    try {\n      const assignmentData = { ...req.body, companyId: req.user.companyId };\n      const assignment = await storage.createEmployeeAssignment(assignmentData);\n      \n      res.json(assignment);\n    } catch (error: any) {\n      console.error(\"Error creating employee assignment:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/employee-assignments/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const assignment = await storage.updateEmployeeAssignment(id, req.body);\n      res.json(assignment);\n    } catch (error: any) {\n      console.error(\"Error updating employee assignment:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/employee-assignments/:id/deassign\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { deassignDate } = req.body;\n      const assignment = await storage.updateEmployeeAssignment(id, { deassignDate });\n      res.json(assignment);\n    } catch (error: any) {\n      console.error(\"Error de-assigning employee:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/employee-assignments/:id\", authenticateToken, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteEmployeeAssignment(id);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error deleting employee assignment:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Admin Aadhaar Lookup Route  \n  app.post(\"/api/admin/lookup-employee-by-aadhaar\", authenticateToken, async (req, res) => {\n    try {\n      console.log('🔍 Admin Aadhaar lookup request:', {\n        user: req.user.email,\n        role: req.user.role,\n        body: req.body\n      });\n\n      if (req.user.role === 'employee') {\n        return res.status(403).json({ message: 'Access denied. Admin access required.' });\n      }\n\n      const { aadhaarNo } = req.body;\n      \n      if (!aadhaarNo || aadhaarNo.length !== 12) {\n        console.log('❌ Invalid Aadhaar number:', aadhaarNo);\n        return res.status(400).json({ message: 'Valid 12-digit Aadhaar number is required' });\n      }\n\n      console.log('🔎 Looking up employee by Aadhaar:', aadhaarNo);\n      \n      // Look up employee profile by Aadhaar number\n      const employeeProfile = await storage.getEmployeeProfileByAadhaar(aadhaarNo);\n      console.log('📋 Employee profile found:', employeeProfile ? 'YES' : 'NO');\n      \n      if (employeeProfile) {\n        // Also get KYC details for this profile\n        const kycDetails = await storage.getKycDetailsByProfile(employeeProfile.id);\n        console.log('🆔 KYC details found:', kycDetails ? 'YES' : 'NO');\n        \n        const response = {\n          found: true,\n          employeeProfile,\n          kycDetails: kycDetails || { aadharNo: aadhaarNo }\n        };\n        \n        console.log('✅ Sending success response:', response);\n        res.json(response);\n      } else {\n        console.log('❌ No employee profile found for Aadhaar:', aadhaarNo);\n        res.json({\n          found: false,\n          message: 'No employee profile found with this Aadhaar number'\n        });\n      }\n    } catch (error) {\n      console.error('💥 Error in admin Aadhaar lookup:', error);\n      res.status(500).json({ message: 'Failed to lookup employee by Aadhaar' });\n    }\n  });\n\n  // ========== EXCEL EXPORT ROUTES ==========\n\n  // Employee Export to Excel\n  app.get(\"/api/employees/export/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      \n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const employees = await storage.getEmployeesByCompany(companyId);\n      const departments = await storage.getDepartmentsByCompany(companyId);\n      \n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet('Employees');\n      \n      // Define columns\n      worksheet.columns = [\n        { header: 'Employee ID', key: 'employeeId', width: 15 },\n        { header: 'First Name', key: 'firstName', width: 20 },\n        { header: 'Last Name', key: 'lastName', width: 20 },\n        { header: 'Email', key: 'email', width: 30 },\n        { header: 'Phone', key: 'phone', width: 15 },\n        { header: 'Department', key: 'department', width: 20 },\n        { header: 'Position', key: 'position', width: 25 },\n        { header: 'Salary', key: 'salary', width: 15 },\n        { header: 'Hire Date', key: 'hireDate', width: 15 },\n        { header: 'Status', key: 'status', width: 15 },\n        { header: 'Address', key: 'address', width: 40 },\n        { header: 'Date of Birth', key: 'dateOfBirth', width: 15 },\n        { header: 'Emergency Contact', key: 'emergencyContact', width: 25 },\n        { header: 'Emergency Phone', key: 'emergencyPhone', width: 20 }\n      ];\n\n      // Style header row\n      worksheet.getRow(1).font = { bold: true };\n      worksheet.getRow(1).fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: { argb: 'FFD3D3D3' }\n      };\n\n      // Add data rows\n      employees.forEach(emp => {\n        const department = departments.find(d => d.id === emp.departmentId);\n        worksheet.addRow({\n          employeeId: emp.employeeId,\n          firstName: emp.firstName,\n          lastName: emp.lastName,\n          email: emp.email,\n          phone: emp.phone,\n          department: department?.name || 'N/A',\n          position: emp.position,\n          salary: emp.salary,\n          hireDate: emp.hireDate ? new Date(emp.hireDate).toLocaleDateString() : '',\n          status: emp.status,\n          address: emp.address,\n          dateOfBirth: emp.dateOfBirth ? new Date(emp.dateOfBirth).toLocaleDateString() : '',\n          emergencyContact: emp.emergencyContact,\n          emergencyPhone: emp.emergencyPhone\n        });\n      });\n\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=employees_${new Date().toISOString().split('T')[0]}.xlsx`);\n      \n      await workbook.xlsx.write(res);\n      res.end();\n    } catch (error) {\n      console.error('Employee export error:', error);\n      res.status(500).json({ message: 'Failed to export employees' });\n    }\n  });\n\n  // Payroll Export to Excel\n  app.get(\"/api/payroll/export/:companyId/:year/:month\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const employees = await storage.getEmployeesByCompany(companyId);\n      const departments = await storage.getDepartmentsByCompany(companyId);\n      \n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet('Payroll');\n      \n      // Define columns\n      worksheet.columns = [\n        { header: 'Month', key: 'month', width: 12 },\n        { header: 'Employee ID', key: 'employeeId', width: 15 },\n        { header: 'Employee Name', key: 'employeeName', width: 25 },\n        { header: 'Department', key: 'department', width: 20 },\n        { header: 'Basic Salary', key: 'basicSalary', width: 15 },\n        { header: 'HRA', key: 'hra', width: 15 },\n        { header: 'Special Allowance', key: 'specialAllowance', width: 20 },\n        { header: 'Transport Allowance', key: 'transportAllowance', width: 20 },\n        { header: 'Medical Allowance', key: 'medicalAllowance', width: 18 },\n        { header: 'Gross Salary', key: 'grossSalary', width: 15 },\n        { header: 'EPF Deduction', key: 'epfDeduction', width: 15 },\n        { header: 'ESIC Deduction', key: 'esicDeduction', width: 15 },\n        { header: 'TDS Deduction', key: 'tdsDeduction', width: 15 },\n        { header: 'PT Deduction', key: 'ptDeduction', width: 15 },\n        { header: 'Net Salary', key: 'netSalary', width: 15 },\n        { header: 'Payment Status', key: 'paymentStatus', width: 15 }\n      ];\n\n      // Style header row\n      worksheet.getRow(1).font = { bold: true };\n      worksheet.getRow(1).fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: { argb: 'FFD3D3D3' }\n      };\n\n      // Get actual payroll records for the specified month/year\n      const monthlyPayrolls = await storage.getMonthlyPayrolls(companyId);\n      const monthlyPayroll = monthlyPayrolls.find(mp => mp.month === month && mp.year === year);\n      \n      if (!monthlyPayroll) {\n        return res.status(404).json({ message: `No payroll found for ${year}-${month.toString().padStart(2, '0')}` });\n      }\n\n      const payrollRecords = await storage.getPayrollRecords(monthlyPayroll.id);\n      \n      // Format month as MMMYY (e.g., \"Feb25\" for February 2025)\n      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      const monthStr = monthNames[month - 1] + year.toString().slice(-2);\n      \n      // Guard against empty records\n      if (!payrollRecords || payrollRecords.length === 0) {\n        return res.status(404).json({ message: `No payroll records found for ${year}-${month.toString().padStart(2, '0')}` });\n      }\n\n      console.log('Payroll records count:', payrollRecords.length);\n      console.log('First record sample:', JSON.stringify(payrollRecords[0], null, 2));\n\n      // Add data rows using actual payroll records with proper INR formatting\n      payrollRecords.forEach((record, index) => {\n        // Use actual values from payroll records (already correctly calculated)\n        const basicSal = parseFloat(record.basicSalary || '0');\n        const hraAmount = parseFloat(record.hra || '0');\n        const conveyanceAllowance = parseFloat(record.conveyanceAllowance || '0');\n        const otherAllowances = parseFloat(record.otherAllowances || '0');\n        const grossSal = parseFloat(record.grossSalary || '0');\n        const epfDed = parseFloat(record.epfEmployee || '0');\n        const esicDed = parseFloat(record.esicEmployee || '0');\n        const tdsDed = parseFloat(record.tdsAmount || '0');\n        const ptDed = parseFloat(record.ptAmount || '0');\n        const netSal = parseFloat(record.netSalary || '0');\n\n        console.log(`Record ${index + 1}: ${record.employeeName} - Basic: ${basicSal}, Gross: ${grossSal}`);\n        \n        const row = worksheet.addRow({\n          month: monthStr,\n          employeeId: record.employeeCode,\n          employeeName: record.employeeName,\n          department: record.department || 'N/A',\n          basicSalary: basicSal,\n          hra: hraAmount,\n          specialAllowance: conveyanceAllowance,\n          transportAllowance: otherAllowances,\n          medicalAllowance: 0,\n          grossSalary: grossSal,\n          epfDeduction: epfDed,\n          esicDeduction: esicDed,\n          tdsDeduction: tdsDed,\n          ptDeduction: ptDed,\n          netSalary: netSal,\n          paymentStatus: record.paymentStatus === 'paid' ? 'Paid' : 'Pending'\n        });\n\n        // Apply INR currency formatting to all money columns\n        row.getCell('basicSalary').numFmt = '₹#,##0.00';\n        row.getCell('hra').numFmt = '₹#,##0.00';\n        row.getCell('specialAllowance').numFmt = '₹#,##0.00';\n        row.getCell('transportAllowance').numFmt = '₹#,##0.00';\n        row.getCell('medicalAllowance').numFmt = '₹#,##0.00';\n        row.getCell('grossSalary').numFmt = '₹#,##0.00';\n        row.getCell('epfDeduction').numFmt = '₹#,##0.00';\n        row.getCell('esicDeduction').numFmt = '₹#,##0.00';\n        row.getCell('tdsDeduction').numFmt = '₹#,##0.00';\n        row.getCell('ptDeduction').numFmt = '₹#,##0.00';\n        row.getCell('netSalary').numFmt = '₹#,##0.00';\n      });\n\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=payroll_${year}_${month.toString().padStart(2, '0')}.xlsx`);\n      \n      await workbook.xlsx.write(res);\n      res.end();\n    } catch (error) {\n      console.error('Payroll export error:', error);\n      res.status(500).json({ message: 'Failed to export payroll' });\n    }\n  });\n\n  // Compliances Data Export to Excel\n  app.get(\"/api/compliances/export/:companyId\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      \n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const compliancesData = await storage.getCompliancesDataByCompany(companyId);\n      const clients = await storage.getClientsByCompany(companyId);\n      \n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet('Compliances Data');\n      \n      // Define columns\n      worksheet.columns = [\n        { header: 'Client Name', key: 'clientName', width: 25 },\n        { header: 'Compliance Type', key: 'complianceType', width: 20 },\n        { header: 'Period', key: 'period', width: 15 },\n        { header: 'Due Date', key: 'dueDate', width: 15 },\n        { header: 'Filing Date', key: 'filingDate', width: 15 },\n        { header: 'Status', key: 'status', width: 15 },\n        { header: 'Amount', key: 'amount', width: 15 },\n        { header: 'Penalty', key: 'penalty', width: 15 },\n        { header: 'Total Amount', key: 'totalAmount', width: 15 },\n        { header: 'Filed By', key: 'filedBy', width: 20 },\n        { header: 'Remarks', key: 'remarks', width: 30 }\n      ];\n\n      // Style header row\n      worksheet.getRow(1).font = { bold: true };\n      worksheet.getRow(1).fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: { argb: 'FFD3D3D3' }\n      };\n\n      // Add data rows\n      compliancesData.forEach(compliance => {\n        const client = clients.find(c => c.id === compliance.clientId);\n        worksheet.addRow({\n          clientName: client?.projectName || 'N/A',\n          complianceType: compliance.complianceType,\n          period: compliance.period,\n          dueDate: compliance.dueDate ? new Date(compliance.dueDate).toLocaleDateString() : '',\n          filingDate: compliance.filingDate ? new Date(compliance.filingDate).toLocaleDateString() : '',\n          status: compliance.status,\n          amount: compliance.amount || '',\n          penalty: compliance.penalty || '',\n          totalAmount: compliance.totalAmount || '',\n          filedBy: compliance.filedBy || '',\n          remarks: compliance.remarks || ''\n        });\n      });\n\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=compliances_${new Date().toISOString().split('T')[0]}.xlsx`);\n      \n      await workbook.xlsx.write(res);\n      res.end();\n    } catch (error) {\n      console.error('Compliances export error:', error);\n      res.status(500).json({ message: 'Failed to export compliances data' });\n    }\n  });\n\n  // Attendance Export to Excel\n  app.get(\"/api/attendance/export/:companyId/:year/:month\", authenticateToken, async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const year = parseInt(req.params.year);\n      const month = parseInt(req.params.month);\n      \n      if (req.user.role !== 'system_admin' && req.user.companyId !== companyId) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const employees = await storage.getEmployeesByCompany(companyId);\n      const departments = await storage.getDepartmentsByCompany(companyId);\n      \n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet('Attendance');\n      \n      // Define columns\n      worksheet.columns = [\n        { header: 'Employee ID', key: 'employeeId', width: 15 },\n        { header: 'Employee Name', key: 'employeeName', width: 25 },\n        { header: 'Department', key: 'department', width: 20 },\n        { header: 'Present Days', key: 'presentDays', width: 15 },\n        { header: 'Absent Days', key: 'absentDays', width: 15 },\n        { header: 'Leave Days', key: 'leaveDays', width: 15 },\n        { header: 'Weekly Off', key: 'weeklyOff', width: 15 },\n        { header: 'Holidays', key: 'holidays', width: 15 },\n        { header: 'Pay Days', key: 'payDays', width: 15 },\n        { header: 'OT Hours', key: 'otHours', width: 15 },\n        { header: 'Total Hours', key: 'totalHours', width: 15 },\n        { header: 'Late Coming', key: 'lateComing', width: 15 },\n        { header: 'Early Going', key: 'earlyGoing', width: 15 }\n      ];\n\n      // Style header row\n      worksheet.getRow(1).font = { bold: true };\n      worksheet.getRow(1).fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: { argb: 'FFD3D3D3' }\n      };\n\n      // Add data rows\n      for (const emp of employees) {\n        const department = departments.find(d => d.id === emp.departmentId);\n        let monthlyRecord = await storage.getMonthlyAttendanceByEmployee(emp.id, year, month);\n        \n        // If no saved record, calculate defaults\n        if (!monthlyRecord) {\n          const basePresent = 20 + (emp.id % 5);\n          const weeklyOff = 4;\n          const leave = emp.id % 3;\n          const holidays = 2;\n          const payDays = basePresent + weeklyOff + leave + holidays;\n          const otHours = (emp.id + 1) * 1.5;\n          \n          monthlyRecord = {\n            presentDays: basePresent,\n            payableDays: payDays,\n            totalHoursWorked: otHours.toString()\n          };\n        }\n\n        const presentDays = monthlyRecord.presentDays || 20;\n        const weeklyOff = 4;\n        const holidays = 2;\n        const leaveDays = Math.max(0, (monthlyRecord.payableDays || 26) - presentDays - weeklyOff - holidays);\n        const absentDays = 30 - presentDays - leaveDays - weeklyOff - holidays;\n        const otHours = parseFloat(monthlyRecord.totalHoursWorked || '0');\n\n        worksheet.addRow({\n          employeeId: emp.employeeId,\n          employeeName: `${emp.firstName} ${emp.lastName}`,\n          department: department?.name || 'N/A',\n          presentDays: presentDays,\n          absentDays: Math.max(0, absentDays),\n          leaveDays: leaveDays,\n          weeklyOff: weeklyOff,\n          holidays: holidays,\n          payDays: monthlyRecord.payableDays || 26,\n          otHours: otHours.toFixed(1),\n          totalHours: (presentDays * 8 + otHours).toFixed(1),\n          lateComing: Math.floor(Math.random() * 5), // Random for demo\n          earlyGoing: Math.floor(Math.random() * 3) // Random for demo\n        });\n      }\n\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=attendance_${year}_${month.toString().padStart(2, '0')}.xlsx`);\n      \n      await workbook.xlsx.write(res);\n      res.end();\n    } catch (error) {\n      console.error('Attendance export error:', error);\n      res.status(500).json({ message: 'Failed to export attendance' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":171219},"server/seed-jobs.ts":{"content":"import { db } from \"./db\";\nimport { jobs, companies, departments, users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function seedJobs() {\n  try {\n    console.log(\"Seeding job postings...\");\n\n    // Get the company, departments, and admin user\n    const [company] = await db.select().from(companies).limit(1);\n    const [adminUser] = await db.select().from(users).where(eq(users.role, 'admin')).limit(1);\n    const departmentsList = await db.select().from(departments);\n    \n    const engineeringDept = departmentsList.find(d => d.name === 'Engineering');\n    const hrDept = departmentsList.find(d => d.name === 'Human Resources');\n    const marketingDept = departmentsList.find(d => d.name === 'Marketing');\n\n    if (!company || !adminUser || !engineeringDept || !hrDept || !marketingDept) {\n      throw new Error(\"Required data not found. Please run the main seed script first.\");\n    }\n\n    // Create job postings\n    await db.insert(jobs).values([\n      {\n        companyId: company.id,\n        title: \"Senior Full Stack Developer\",\n        description: `We're looking for a talented Senior Full Stack Developer to join our growing engineering team. You'll be responsible for designing and implementing both frontend and backend solutions for our enterprise applications.\n\nKey Responsibilities:\n• Develop and maintain web applications using React, Node.js, and PostgreSQL\n• Collaborate with product managers and designers to deliver high-quality features\n• Participate in code reviews and mentor junior developers\n• Ensure application performance, quality, and responsiveness\n• Stay up-to-date with emerging technologies and best practices\n\nWhat We Offer:\n• Competitive salary and comprehensive benefits\n• Flexible work arrangements and remote-friendly culture\n• Professional development opportunities and conference attendance\n• Collaborative and innovative work environment\n• Opportunity to work on cutting-edge projects`,\n        requirements: `Required Qualifications:\n• Bachelor's degree in Computer Science or related field\n• 5+ years of experience in full-stack development\n• Strong proficiency in JavaScript, TypeScript, React, and Node.js\n• Experience with relational databases (PostgreSQL preferred)\n• Familiarity with cloud platforms (AWS, GCP, or Azure)\n• Understanding of REST APIs and modern web development practices\n• Experience with version control systems (Git)\n\nPreferred Qualifications:\n• Experience with Docker and containerization\n• Knowledge of CI/CD pipelines\n• Experience with testing frameworks (Jest, Cypress)\n• Familiarity with agile development methodologies\n• Previous experience in a leadership or mentoring role`,\n        departmentId: engineeringDept.id,\n        salaryMin: \"95000\",\n        salaryMax: \"135000\",\n        location: \"San Francisco, CA / Remote\",\n        employmentType: \"full-time\",\n        status: \"active\",\n        postedBy: adminUser.id,\n        postedAt: new Date(\"2025-01-15\"),\n        closingDate: new Date(\"2025-02-28\"),\n      },\n      {\n        companyId: company.id,\n        title: \"DevOps Engineer\",\n        description: `Join our infrastructure team as a DevOps Engineer and help us build scalable, reliable systems that power our applications. You'll work with cutting-edge technologies and be responsible for automation, monitoring, and continuous improvement of our development and deployment processes.\n\nKey Responsibilities:\n• Design and implement CI/CD pipelines\n• Manage cloud infrastructure and containerized applications\n• Monitor system performance and implement alerting solutions\n• Automate deployment processes and infrastructure provisioning\n• Collaborate with development teams to improve deployment workflows\n• Ensure security best practices across all environments`,\n        requirements: `Required Skills:\n• 3+ years of experience in DevOps or Site Reliability Engineering\n• Strong experience with cloud platforms (AWS, GCP, or Azure)\n• Proficiency with containerization technologies (Docker, Kubernetes)\n• Experience with Infrastructure as Code (Terraform, CloudFormation)\n• Knowledge of CI/CD tools (Jenkins, GitLab CI, GitHub Actions)\n• Understanding of monitoring and logging tools (Prometheus, Grafana, ELK stack)\n• Strong scripting skills (Python, Bash, or similar)\n\nNice to Have:\n• Experience with service mesh technologies (Istio, Linkerd)\n• Knowledge of database administration\n• Certification in cloud platforms\n• Experience with microservices architecture`,\n        departmentId: engineeringDept.id,\n        salaryMin: \"85000\",\n        salaryMax: \"120000\",\n        location: \"Austin, TX / Remote\",\n        employmentType: \"full-time\",\n        status: \"active\",\n        postedBy: adminUser.id,\n        postedAt: new Date(\"2025-01-18\"),\n        closingDate: new Date(\"2025-03-15\"),\n      },\n      {\n        companyId: company.id,\n        title: \"HR Business Partner\",\n        description: `We're seeking an experienced HR Business Partner to work closely with our leadership team and employees to drive organizational effectiveness and employee engagement. This role is perfect for an HR professional who wants to make a strategic impact in a growing technology company.\n\nKey Responsibilities:\n• Partner with business leaders on workforce planning and organizational design\n• Provide HR guidance on performance management, employee relations, and policy interpretation\n• Lead talent acquisition efforts and develop recruitment strategies\n• Design and implement employee development and retention programs\n• Analyze HR metrics and provide insights to drive decision-making\n• Support change management initiatives and organizational transformation`,\n        requirements: `Required Qualifications:\n• Bachelor's degree in Human Resources, Business Administration, or related field\n• 5+ years of HR experience with at least 2 years as an HR Business Partner\n• Strong knowledge of employment law and HR best practices\n• Experience with HRIS systems and HR analytics\n• Excellent communication and interpersonal skills\n• Demonstrated ability to influence and build relationships at all organizational levels\n\nPreferred Qualifications:\n• PHR or SHRM certification\n• Experience in a technology or fast-paced startup environment\n• Project management experience\n• Experience with performance management systems\n• Master's degree in HR, Business, or related field`,\n        departmentId: hrDept.id,\n        salaryMin: \"75000\",\n        salaryMax: \"95000\",\n        location: \"New York, NY / Hybrid\",\n        employmentType: \"full-time\",\n        status: \"active\",\n        postedBy: adminUser.id,\n        postedAt: new Date(\"2025-01-20\"),\n        closingDate: new Date(\"2025-02-20\"),\n      },\n      {\n        companyId: company.id,\n        title: \"Digital Marketing Specialist\",\n        description: `Join our marketing team as a Digital Marketing Specialist and help drive our online presence and lead generation efforts. You'll work across multiple digital channels to create engaging campaigns that attract and convert our target audience.\n\nKey Responsibilities:\n• Develop and execute digital marketing campaigns across multiple channels\n• Manage social media accounts and create engaging content\n• Optimize website content for search engines (SEO)\n• Create and manage PPC campaigns on Google Ads and social platforms\n• Analyze campaign performance and provide actionable insights\n• Collaborate with design team on marketing materials and creatives\n• Track and report on key marketing metrics and ROI`,\n        requirements: `Required Skills:\n• Bachelor's degree in Marketing, Communications, or related field\n• 2-4 years of experience in digital marketing\n• Proficiency with Google Analytics, Google Ads, and social media platforms\n• Experience with email marketing platforms (Mailchimp, HubSpot, etc.)\n• Strong analytical skills and experience with marketing metrics\n• Excellent written and verbal communication skills\n• Creative thinking and problem-solving abilities\n\nPreferred Qualifications:\n• Google Ads and Analytics certifications\n• Experience with marketing automation tools\n• Knowledge of HTML/CSS and basic web development\n• Experience with A/B testing and conversion optimization\n• Familiarity with CRM systems\n• Experience in B2B or SaaS marketing`,\n        departmentId: marketingDept.id,\n        salaryMin: \"50000\",\n        salaryMax: \"70000\",\n        location: \"Chicago, IL / Remote\",\n        employmentType: \"full-time\",\n        status: \"active\",\n        postedBy: adminUser.id,\n        postedAt: new Date(\"2025-01-19\"),\n        closingDate: new Date(\"2025-02-25\"),\n      },\n      {\n        companyId: company.id,\n        title: \"Frontend Developer (React)\",\n        description: `We're looking for a passionate Frontend Developer to join our product team and help build beautiful, responsive user interfaces for our web applications. You'll work closely with designers and backend developers to create exceptional user experiences.\n\nKey Responsibilities:\n• Develop responsive web applications using React and modern JavaScript\n• Collaborate with UX/UI designers to implement pixel-perfect designs\n• Optimize applications for maximum speed and scalability\n• Write clean, maintainable, and well-tested code\n• Participate in code reviews and contribute to team knowledge sharing\n• Stay current with frontend development trends and best practices`,\n        requirements: `Required Skills:\n• Bachelor's degree in Computer Science, Web Development, or related field\n• 2-4 years of frontend development experience\n• Strong proficiency in React, JavaScript (ES6+), and TypeScript\n• Experience with CSS3, HTML5, and responsive design\n• Familiarity with state management libraries (Redux, Context API)\n• Understanding of RESTful APIs and asynchronous programming\n• Experience with version control (Git)\n\nNice to Have:\n• Experience with Next.js or other React frameworks\n• Knowledge of testing frameworks (Jest, React Testing Library)\n• Familiarity with build tools (Webpack, Vite)\n• Understanding of accessibility standards (WCAG)\n• Experience with design tools (Figma, Adobe Creative Suite)`,\n        departmentId: engineeringDept.id,\n        salaryMin: \"65000\",\n        salaryMax: \"90000\",\n        location: \"Remote\",\n        employmentType: \"full-time\",\n        status: \"draft\",\n        postedBy: adminUser.id,\n        postedAt: null,\n        closingDate: null,\n      },\n    ]);\n\n    console.log(\"✅ Job postings seeded successfully!\");\n    console.log(\"Created 5 job postings across Engineering, HR, and Marketing departments\");\n\n  } catch (error) {\n    console.error(\"Error seeding jobs:\", error);\n    throw error;\n  }\n}\n\n// Export for manual use","size_bytes":10853},"server/seed-permissions.ts":{"content":"import { db } from './db';\nimport { permissions, permissionTemplates, rolePermissions } from '@shared/schema';\n\nconst permissionsData = [\n  // Employee Management Permissions\n  { name: 'employee_create', description: 'Create new employee records', category: 'employee_management', module: 'employees' },\n  { name: 'employee_read', description: 'View employee information', category: 'employee_management', module: 'employees' },\n  { name: 'employee_update', description: 'Edit employee records', category: 'employee_management', module: 'employees' },\n  { name: 'employee_delete', description: 'Delete employee records', category: 'employee_management', module: 'employees' },\n  { name: 'employee_payroll_view', description: 'View employee payroll information', category: 'payroll', module: 'payroll' },\n  { name: 'employee_payroll_edit', description: 'Edit employee payroll settings', category: 'payroll', module: 'payroll' },\n\n  // Attendance Permissions\n  { name: 'attendance_view_all', description: 'View all employee attendance records', category: 'attendance', module: 'attendance' },\n  { name: 'attendance_edit', description: 'Edit attendance records', category: 'attendance', module: 'attendance' },\n  { name: 'attendance_delete', description: 'Delete attendance records', category: 'attendance', module: 'attendance' },\n  { name: 'attendance_export', description: 'Export attendance reports', category: 'attendance', module: 'attendance' },\n\n  // Payroll Permissions\n  { name: 'payroll_create', description: 'Create monthly payroll runs', category: 'payroll', module: 'payroll' },\n  { name: 'payroll_finalize', description: 'Finalize payroll runs', category: 'payroll', module: 'payroll' },\n  { name: 'payroll_view_all', description: 'View all payroll records', category: 'payroll', module: 'payroll' },\n  { name: 'payroll_payment_update', description: 'Update payment status for payroll records', category: 'payroll', module: 'payroll' },\n\n  // Recruitment Permissions\n  { name: 'job_create', description: 'Create job postings', category: 'recruitment', module: 'recruitment' },\n  { name: 'job_edit', description: 'Edit job postings', category: 'recruitment', module: 'recruitment' },\n  { name: 'job_delete', description: 'Delete job postings', category: 'recruitment', module: 'recruitment' },\n  { name: 'application_review', description: 'Review job applications', category: 'recruitment', module: 'recruitment' },\n  { name: 'interview_schedule', description: 'Schedule interviews', category: 'recruitment', module: 'recruitment' },\n  { name: 'offer_create', description: 'Create job offers', category: 'recruitment', module: 'recruitment' },\n\n  // Leave Management Permissions\n  { name: 'leave_request_approve', description: 'Approve leave requests', category: 'leave_management', module: 'leave' },\n  { name: 'leave_request_reject', description: 'Reject leave requests', category: 'leave_management', module: 'leave' },\n  { name: 'leave_balance_view', description: 'View leave balances for all employees', category: 'leave_management', module: 'leave' },\n  { name: 'leave_policy_manage', description: 'Manage leave policies', category: 'leave_management', module: 'leave' },\n\n  // Advance Request Permissions\n  { name: 'advance_request_approve', description: 'Approve advance salary requests', category: 'advance_management', module: 'advance' },\n  { name: 'advance_request_reject', description: 'Reject advance salary requests', category: 'advance_management', module: 'advance' },\n  { name: 'advance_payment_mark', description: 'Mark advance payments as paid', category: 'advance_management', module: 'advance' },\n\n  // Company Settings Permissions\n  { name: 'company_settings', description: 'Access company settings', category: 'company_management', module: 'company' },\n  { name: 'company_settings_view', description: 'View company settings', category: 'company_management', module: 'company' },\n  { name: 'company_settings_edit', description: 'Edit company settings', category: 'company_management', module: 'company' },\n  { name: 'department_manage', description: 'Manage departments', category: 'company_management', module: 'company' },\n  { name: 'branch_manage', description: 'Manage company branches', category: 'company_management', module: 'company' },\n\n  // User Management Permissions\n  { name: 'user_create', description: 'Create new user accounts', category: 'user_management', module: 'users' },\n  { name: 'user_edit', description: 'Edit user accounts', category: 'user_management', module: 'users' },\n  { name: 'user_delete', description: 'Delete user accounts', category: 'user_management', module: 'users' },\n  { name: 'user_permission_grant', description: 'Grant permissions to users', category: 'user_management', module: 'users' },\n\n  // Reporting Permissions\n  { name: 'reports_generate', description: 'Generate HR reports', category: 'reporting', module: 'reports' },\n  { name: 'reports_export', description: 'Export reports to various formats', category: 'reporting', module: 'reports' },\n  { name: 'dashboard_view_all', description: 'View comprehensive dashboard data', category: 'reporting', module: 'dashboard' }\n];\n\n// Skip permission templates for now since we need to check if that table exists\n\nexport async function seedPermissions() {\n  try {\n    console.log('Seeding permissions...');\n    \n    // Check if permissions already exist\n    const existingPermissions = await db.select().from(permissions).limit(1);\n    if (existingPermissions.length > 0) {\n      console.log('Permissions already exist, skipping permission seeding');\n      return;\n    }\n    \n    // Insert permissions\n    const insertedPermissions = await db.insert(permissions).values(permissionsData).returning();\n    console.log(`Inserted ${insertedPermissions.length} permissions`);\n\n    // Skip permission templates for now\n    console.log('Skipping permission templates - checking if table exists');\n\n    // Skip role permissions for now - checking if table exists\n    console.log('Skipping role permissions setup - checking if table exists');\n\n    console.log('Permission seeding completed successfully!');\n  } catch (error) {\n    console.error('Error seeding permissions:', error);\n    throw error;\n  }\n}","size_bytes":6224},"server/seed.ts":{"content":"import { seedPermissions } from './seed-permissions';\nimport { seedDemoData } from './seed-demo-data';\nimport { seedJobs } from './seed-jobs';\n\nasync function main() {\n  try {\n    console.log('Starting database seeding...');\n    \n    await seedPermissions();\n    await seedDemoData();\n    await seedJobs();\n    \n    console.log('Database seeding completed successfully!');\n    process.exit(0);\n  } catch (error) {\n    console.error('Error during seeding:', error);\n    process.exit(1);\n  }\n}\n\nmain();","size_bytes":500},"server/storage.ts":{"content":"import { \n  companies, users, departments, employees, employeeProfiles, jobs, jobApplications, attendance,\n  monthlyAttendance, faceTemplates, attendanceLocations, employeePayroll, employeeSalaryStructures,\n  permissions, rolePermissions, permissionRequests, userPermissions, permissionTemplates, userActivities, employmentHistory, kycDetails, familyDetails,\n  interviews, jobOffers, monthlyPayroll, payrollRecords, leaveRequests, advanceRequests, approvalWorkflows,\n  designations, branches, locations, costCenters, biometricMachines, holidays, leavePolicies,\n  clients, complianceSetups, compliancesData, employeeAssignments,\n  salaryComponents, companySalaryComponentConfig, employeeSalaryComponentValues,\n  type Company, type InsertCompany, type User, type InsertUser, \n  type Department, type InsertDepartment, type Employee, type InsertEmployee,\n  type EmployeeProfile, type InsertEmployeeProfile, type EmployeePayroll, type InsertEmployeePayroll,\n  type SelectEmployeeSalaryStructure, type InsertEmployeeSalaryStructure,\n  type Job, type InsertJob, type JobApplication, type InsertJobApplication,\n  type Attendance, type InsertAttendance, type MonthlyAttendance, type InsertMonthlyAttendance,\n  type FaceTemplate, type InsertFaceTemplate, type AttendanceLocation, type InsertAttendanceLocation,\n  type Permission, type InsertPermission, type UserPermission, type InsertUserPermission,\n  type PermissionTemplate, type InsertPermissionTemplate,\n  type RolePermission, type InsertRolePermission, type PermissionRequest, \n  type InsertPermissionRequest, type UserActivity, type InsertUserActivity,\n  type EmploymentHistory, type InsertEmploymentHistory, type KycDetails, \n  type InsertKycDetails, type FamilyDetails, type InsertFamilyDetails,\n  type Interview, type InsertInterview, type JobOffer, type InsertJobOffer,\n  type MonthlyPayroll, type InsertMonthlyPayroll, type PayrollRecord, type InsertPayrollRecord,\n  type LeaveRequest, type InsertLeaveRequest, type AdvanceRequest, type InsertAdvanceRequest,\n  type ApprovalWorkflow, type InsertApprovalWorkflow,\n  type Client, type InsertClient, type ComplianceSetup, type InsertComplianceSetup,\n  type CompliancesData, type InsertCompliancesData, type EmployeeAssignment, type InsertEmployeeAssignment,\n  type SalaryComponent, type InsertSalaryComponent, type CompanySalaryComponentConfig, type InsertCompanySalaryComponentConfig,\n  type EmployeeSalaryComponentValues, type InsertEmployeeSalaryComponentValues\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, count, sql, or, gt } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  authenticateUser(email: string, password: string): Promise<User | null>;\n\n  // Company methods\n  getCompany(id: number): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  getCompaniesByUser(userId: number): Promise<Company[]>;\n\n  // Employee methods\n  getEmployee(id: number): Promise<Employee | undefined>;\n  getEmployeeByUserId(userId: number): Promise<Employee | undefined>;\n  getEmployeesByCompany(companyId: number): Promise<Employee[]>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: number, employee: Partial<Employee>): Promise<Employee>;\n  deleteEmployee(id: number): Promise<void>;\n\n  // Employee Payroll methods\n  getEmployeePayroll(employeeId: number): Promise<EmployeePayroll | undefined>;\n  createEmployeePayroll(payroll: InsertEmployeePayroll): Promise<EmployeePayroll>;\n  updateEmployeePayroll(employeeId: number, payroll: Partial<EmployeePayroll>): Promise<EmployeePayroll>;\n  deleteEmployeePayroll(employeeId: number): Promise<void>;\n\n  // Employee Salary Structure methods (month-wise historical tracking)\n  getEmployeeSalaryStructure(employeeId: number, year: number, month: number): Promise<SelectEmployeeSalaryStructure | undefined>;\n  upsertEmployeeSalaryStructure(structure: InsertEmployeeSalaryStructure): Promise<SelectEmployeeSalaryStructure>;\n  getLatestEmployeeSalaryStructure(employeeId: number): Promise<SelectEmployeeSalaryStructure | undefined>;\n  getEmployeeSalaryStructureHistory(employeeId: number, limit?: number): Promise<SelectEmployeeSalaryStructure[]>;\n  getCompleteSalaryHistoryFromJoining(employeeId: number): Promise<SelectEmployeeSalaryStructure[]>;\n  getFutureSalaryStructures(employeeId: number, fromYear: number, fromMonth: number): Promise<SelectEmployeeSalaryStructure[]>;\n\n  // Department methods\n  getDepartment(id: number): Promise<Department | undefined>;\n  getDepartmentsByCompany(companyId: number): Promise<Department[]>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n  updateDepartment(id: number, department: Partial<Department>): Promise<Department>;\n  deleteDepartment(id: number): Promise<void>;\n\n  // Job methods\n  getJob(id: number): Promise<Job | undefined>;\n  getJobsByCompany(companyId: number): Promise<Job[]>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJob(id: number, job: Partial<Job>): Promise<Job>;\n  deleteJob(id: number): Promise<void>;\n\n  // Job Application methods\n  getJobApplication(id: number): Promise<JobApplication | undefined>;\n  getApplicationsByJob(jobId: number): Promise<JobApplication[]>;\n  getApplicationsByCompany(companyId: number): Promise<JobApplication[]>;\n  createJobApplication(application: InsertJobApplication): Promise<JobApplication>;\n  updateJobApplication(id: number, application: Partial<JobApplication>): Promise<JobApplication>;\n\n  // Attendance methods\n  getAttendanceByEmployee(employeeId: number, date?: Date): Promise<Attendance[]>;\n  getAttendanceByCompany(companyId: number, date?: Date): Promise<Attendance[]>;\n  createAttendance(attendance: InsertAttendance): Promise<Attendance>;\n  updateAttendance(id: number, attendance: Partial<Attendance>): Promise<Attendance>;\n  markCheckIn(employeeId: number, checkInData: {\n    latitude?: number;\n    longitude?: number;\n    faceImage?: string;\n    deviceInfo?: string;\n    ipAddress?: string;\n  }): Promise<Attendance>;\n  markCheckOut(attendanceId: number, checkOutData: {\n    latitude?: number;\n    longitude?: number;\n  }): Promise<Attendance>;\n  \n  // Monthly attendance methods\n  getMonthlyAttendance(employeeId: number, year: number, month: number): Promise<MonthlyAttendance | undefined>;\n  calculateMonthlyAttendance(employeeId: number, companyId: number, year: number, month: number): Promise<MonthlyAttendance>;\n  \n  // Face template methods\n  getFaceTemplate(employeeId: number): Promise<FaceTemplate | undefined>;\n  createFaceTemplate(insertFaceTemplate: InsertFaceTemplate): Promise<FaceTemplate>;\n  updateFaceTemplate(employeeId: number, templateData: string): Promise<FaceTemplate>;\n  \n  // Location methods\n  getAttendanceLocations(companyId: number): Promise<AttendanceLocation[]>;\n  createAttendanceLocation(insertLocation: InsertAttendanceLocation): Promise<AttendanceLocation>;\n  validateLocation(companyId: number, latitude: number, longitude: number): Promise<AttendanceLocation | null>;\n\n  // Dashboard stats\n  getDashboardStats(companyId: number): Promise<{\n    totalEmployees: number;\n    activeJobs: number;\n    pendingApplications: number;\n    todayAttendance: number;\n  }>;\n\n  // User management methods\n  getUsersByCompany(companyId: number): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: number, user: Partial<User>): Promise<User>;\n  deleteUser(id: number): Promise<void>;\n  \n  // Aadhaar verification methods\n  checkEmployeeByAadhaar(aadhaarNo: string): Promise<Employee | null>;\n  getEmployeeStatusByAadhaar(aadhaarNo: string): Promise<{\n    isEmployeeInCompany: boolean;\n    employeeData?: Employee;\n    companyData?: Company;\n  }>;\n  \n  // Company management methods\n  getAllCompanies(): Promise<Company[]>;\n  updateCompany(id: number, company: Partial<Company>): Promise<Company>;\n  deleteCompany(id: number): Promise<void>;\n\n  // Permission methods\n  getPermissions(): Promise<Permission[]>;\n  createPermission(permission: InsertPermission): Promise<Permission>;\n  getRolePermissions(role: string, companyId?: number): Promise<RolePermission[]>;\n  createRolePermission(rolePermission: InsertRolePermission): Promise<RolePermission>;\n  deleteRolePermission(id: number): Promise<void>;\n\n  // Permission request methods\n  getPermissionRequests(companyId?: number): Promise<PermissionRequest[]>;\n  createPermissionRequest(permissionRequest: InsertPermissionRequest): Promise<PermissionRequest>;\n  updatePermissionRequest(id: number, permissionRequest: Partial<PermissionRequest>): Promise<PermissionRequest>;\n  getPermissionRequestsByUser(userId: number): Promise<PermissionRequest[]>;\n\n  // User activity methods\n  createUserActivity(activity: InsertUserActivity): Promise<UserActivity>;\n  getUserActivities(companyId?: number, userId?: number): Promise<UserActivity[]>;\n\n  // Employee profile methods\n  createEmployeeProfile(profileData: InsertEmployeeProfile): Promise<EmployeeProfile>;\n  getEmployeeProfileByUserId(userId: number): Promise<EmployeeProfile | undefined>;\n  updateEmployeeProfile(userId: number, profileData: Partial<EmployeeProfile>): Promise<EmployeeProfile>;\n  \n  // Employment history methods\n  getEmploymentHistoryByProfile(profileId: number): Promise<EmploymentHistory[]>;\n  createEmploymentHistory(historyData: InsertEmploymentHistory): Promise<EmploymentHistory>;\n  updateEmploymentHistory(id: number, historyData: Partial<EmploymentHistory>): Promise<EmploymentHistory>;\n  deleteEmploymentHistory(id: number): Promise<void>;\n  \n  // KYC details methods\n  getKycDetailsByProfile(profileId: number): Promise<KycDetails | undefined>;\n  createKycDetails(kycData: InsertKycDetails): Promise<KycDetails>;\n  updateKycDetails(profileId: number, kycData: Partial<KycDetails>): Promise<KycDetails>;\n  \n  // Employee portal methods\n  getEmployeeProfileByAadhaar(aadhaarNo: string): Promise<EmployeeProfile | undefined>;\n  \n  // Family details methods\n  getFamilyDetailsByProfile(profileId: number): Promise<FamilyDetails[]>;\n  createFamilyDetails(familyData: InsertFamilyDetails): Promise<FamilyDetails>;\n  updateFamilyDetails(id: number, familyData: Partial<FamilyDetails>): Promise<FamilyDetails>;\n  deleteFamilyDetails(id: number): Promise<void>;\n\n  // Leave Request methods\n  getLeaveRequest(id: number): Promise<LeaveRequest | undefined>;\n  getLeaveRequestsByCompany(companyId: number): Promise<LeaveRequest[]>;\n  getLeaveRequestsByEmployee(employeeId: number): Promise<LeaveRequest[]>;\n  createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest>;\n  updateLeaveRequest(id: number, updates: Partial<LeaveRequest>): Promise<LeaveRequest>;\n  approveLeaveRequest(id: number, level: 1 | 2 | 3, approverId: number, comments?: string): Promise<LeaveRequest>;\n  rejectLeaveRequest(id: number, rejectedById: number, reason: string): Promise<LeaveRequest>;\n\n  // Advance Request methods\n  getAdvanceRequest(id: number): Promise<AdvanceRequest | undefined>;\n  getAdvanceRequestsByCompany(companyId: number): Promise<AdvanceRequest[]>;\n  getAdvanceRequestsByEmployee(employeeId: number): Promise<AdvanceRequest[]>;\n  createAdvanceRequest(request: InsertAdvanceRequest): Promise<AdvanceRequest>;\n  updateAdvanceRequest(id: number, updates: Partial<AdvanceRequest>): Promise<AdvanceRequest>;\n  approveAdvanceRequest(id: number, level: 1 | 2 | 3, approverId: number, comments?: string): Promise<AdvanceRequest>;\n  rejectAdvanceRequest(id: number, rejectedById: number, reason: string): Promise<AdvanceRequest>;\n  markAdvancePaid(id: number, paidAmount: string, paymentMethod: string, reference?: string): Promise<AdvanceRequest>;\n\n  // Approval Workflow methods\n  getApprovalWorkflow(companyId: number, requestType: string): Promise<ApprovalWorkflow | undefined>;\n  createApprovalWorkflow(workflow: InsertApprovalWorkflow): Promise<ApprovalWorkflow>;\n  updateApprovalWorkflow(id: number, updates: Partial<ApprovalWorkflow>): Promise<ApprovalWorkflow>;\n\n  // Enhanced Permission Management methods\n  getAllPermissions(): Promise<Permission[]>;\n  getPermissionsByCategory(category: string): Promise<Permission[]>;\n  getPermissionsByModule(module: string): Promise<Permission[]>;\n  createPermission(permission: InsertPermission): Promise<Permission>;\n  updatePermission(id: number, permission: Partial<Permission>): Promise<Permission>;\n  deletePermission(id: number): Promise<void>;\n\n  // User Permission methods\n  getUserPermissions(userId: number, companyId: number): Promise<UserPermission[]>;\n  hasUserPermission(userId: number, permissionName: string, companyId: number): Promise<boolean>;\n  grantUserPermission(userPermission: InsertUserPermission): Promise<UserPermission>;\n  revokeUserPermission(userId: number, permissionId: number, companyId: number): Promise<void>;\n  getUsersWithPermission(permissionName: string, companyId: number): Promise<User[]>;\n\n  // Enhanced Permission Request methods\n  getPermissionRequestsEnhanced(companyId: number): Promise<PermissionRequest[]>;\n  getPermissionRequestsByUserEnhanced(userId: number): Promise<PermissionRequest[]>;\n  getPendingPermissionRequests(companyId: number): Promise<PermissionRequest[]>;\n  createPermissionRequestEnhanced(request: InsertPermissionRequest): Promise<PermissionRequest>;\n  updatePermissionRequestEnhanced(id: number, request: Partial<PermissionRequest>): Promise<PermissionRequest>;\n  approvePermissionRequestLevel(id: number, reviewerId: number, level: 'level1' | 'level2' | 'final', comments?: string): Promise<PermissionRequest>;\n  rejectPermissionRequestLevel(id: number, reviewerId: number, level: 'level1' | 'level2' | 'final', comments?: string): Promise<PermissionRequest>;\n\n  // Role Permission methods\n  getRolePermissionsEnhanced(role: string, companyId?: number): Promise<RolePermission[]>;\n  assignRolePermission(rolePermission: InsertRolePermission): Promise<RolePermission>;\n  removeRolePermission(role: string, permissionId: number, companyId?: number): Promise<void>;\n\n  // Permission Template methods\n  getPermissionTemplates(role?: string): Promise<PermissionTemplate[]>;\n  createPermissionTemplate(template: InsertPermissionTemplate): Promise<PermissionTemplate>;\n  updatePermissionTemplate(id: number, template: Partial<PermissionTemplate>): Promise<PermissionTemplate>;\n  deletePermissionTemplate(id: number): Promise<void>;\n  applyPermissionTemplate(templateId: number, userId: number, companyId: number, grantedBy: number): Promise<UserPermission[]>;\n\n  // Company Settings methods\n  // Biometric Machine methods\n  getBiometricMachinesByCompany(companyId: number): Promise<any[]>;\n  createBiometricMachine(machine: any): Promise<any>;\n  updateBiometricMachine(id: number, machine: any): Promise<any>;\n  deleteBiometricMachine(id: number): Promise<void>;\n\n  // Holiday methods\n  getHolidaysByCompany(companyId: number): Promise<any[]>;\n  createHoliday(holiday: any): Promise<any>;\n  updateHoliday(id: number, holiday: any): Promise<any>;\n  deleteHoliday(id: number): Promise<void>;\n\n  // Leave Policy methods\n  getLeavePoliciesByCompany(companyId: number): Promise<any[]>;\n  createLeavePolicy(policy: any): Promise<any>;\n  updateLeavePolicy(id: number, policy: any): Promise<any>;\n  deleteLeavePolicy(id: number): Promise<void>;\n\n  // Designation methods\n  getDesignationsByCompany(companyId: number): Promise<any[]>;\n  createDesignation(designation: any): Promise<any>;\n  updateDesignation(id: number, designation: any): Promise<any>;\n  deleteDesignation(id: number): Promise<void>;\n\n  // Branch methods\n  getBranchesByCompany(companyId: number): Promise<any[]>;\n  createBranch(branch: any): Promise<any>;\n  updateBranch(id: number, branch: any): Promise<any>;\n  deleteBranch(id: number): Promise<void>;\n\n  // Location methods  \n  getLocationsByCompany(companyId: number): Promise<any[]>;\n  createLocation(location: any): Promise<any>;\n  updateLocation(id: number, location: any): Promise<any>;\n  deleteLocation(id: number): Promise<void>;\n\n  // Cost Center methods\n  getCostCentersByCompany(companyId: number): Promise<any[]>;\n  createCostCenter(costCenter: any): Promise<any>;\n  updateCostCenter(id: number, costCenter: any): Promise<any>;\n  deleteCostCenter(id: number): Promise<void>;\n\n  // Client Compliances methods\n  getClientsByCompany(companyId: number): Promise<Client[]>;\n  createClient(clientData: InsertClient): Promise<Client>;\n  updateClient(id: number, clientData: Partial<Client>): Promise<Client>;\n  deleteClient(id: number): Promise<void>;\n\n  // Compliance Setup methods\n  getComplianceSetupsByCompany(companyId: number): Promise<ComplianceSetup[]>;\n  createComplianceSetup(setupData: InsertComplianceSetup): Promise<ComplianceSetup>;\n  updateComplianceSetup(id: number, setupData: Partial<ComplianceSetup>): Promise<ComplianceSetup>;\n  deleteComplianceSetup(id: number): Promise<void>;\n\n  // Compliances Data methods\n  getCompliancesDataByCompany(companyId: number): Promise<CompliancesData[]>;\n  createCompliancesData(complianceData: InsertCompliancesData): Promise<CompliancesData>;\n  updateCompliancesData(id: number, complianceData: Partial<CompliancesData>): Promise<CompliancesData>;\n  deleteCompliancesData(id: number): Promise<void>;\n\n  // Employee Assignment methods\n  getEmployeeAssignmentsByCompany(companyId: number): Promise<EmployeeAssignment[]>;\n  createEmployeeAssignment(assignmentData: InsertEmployeeAssignment): Promise<EmployeeAssignment>;\n  updateEmployeeAssignment(id: number, assignmentData: Partial<EmployeeAssignment>): Promise<EmployeeAssignment>;\n  deleteEmployeeAssignment(id: number): Promise<void>;\n\n  // Salary Component methods\n  getSalaryComponents(): Promise<SalaryComponent[]>;\n  createSalaryComponent(component: InsertSalaryComponent): Promise<SalaryComponent>;\n  updateSalaryComponent(id: number, component: Partial<SalaryComponent>): Promise<SalaryComponent>;\n  deleteSalaryComponent(id: number): Promise<void>;\n\n  // Company Salary Component Configuration methods\n  getCompanySalaryComponentConfig(companyId: number, entryMode?: string): Promise<CompanySalaryComponentConfig[]>;\n  createCompanySalaryComponentConfig(config: InsertCompanySalaryComponentConfig): Promise<CompanySalaryComponentConfig>;\n  updateCompanySalaryComponentConfig(id: number, config: Partial<CompanySalaryComponentConfig>): Promise<CompanySalaryComponentConfig>;\n  deleteCompanySalaryComponentConfig(id: number): Promise<void>;\n  upsertCompanySalaryComponentConfig(config: InsertCompanySalaryComponentConfig): Promise<CompanySalaryComponentConfig>;\n\n  // Employee Salary Component Values methods\n  getEmployeeSalaryComponentValues(structureId: number): Promise<EmployeeSalaryComponentValues[]>;\n  createEmployeeSalaryComponentValues(values: InsertEmployeeSalaryComponentValues): Promise<EmployeeSalaryComponentValues>;\n  updateEmployeeSalaryComponentValues(id: number, values: Partial<EmployeeSalaryComponentValues>): Promise<EmployeeSalaryComponentValues>;\n  deleteEmployeeSalaryComponentValues(id: number): Promise<void>;\n  bulkCreateEmployeeSalaryComponentValues(values: InsertEmployeeSalaryComponentValues[]): Promise<EmployeeSalaryComponentValues[]>;\n  deleteEmployeeSalaryComponentValuesByStructure(structureId: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Check if username already exists and make it unique if needed\n    let finalUsername = insertUser.username;\n    try {\n      const existingUser = await this.getUserByUsername(insertUser.username);\n      if (existingUser) {\n        // Generate a unique username by appending a number\n        let counter = 1;\n        let newUsername = `${insertUser.username}${counter}`;\n        let userExists = await this.getUserByUsername(newUsername);\n        while (userExists) {\n          counter++;\n          newUsername = `${insertUser.username}${counter}`;\n          userExists = await this.getUserByUsername(newUsername);\n        }\n        finalUsername = newUsername;\n      }\n    } catch (error) {\n      console.log('Error checking username:', error);\n    }\n\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, username: finalUsername, password: hashedPassword })\n      .returning();\n    return user;\n  }\n\n  async authenticateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user || !await bcrypt.compare(password, user.password)) {\n      return null;\n    }\n    return user;\n  }\n\n  async getCompany(id: number): Promise<Company | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.id, id));\n    return company || undefined;\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const [company] = await db\n      .insert(companies)\n      .values(insertCompany)\n      .returning();\n    return company;\n  }\n\n  async getCompaniesByUser(userId: number): Promise<Company[]> {\n    const user = await this.getUser(userId);\n    if (!user?.companyId) return [];\n    const company = await this.getCompany(user.companyId);\n    return company ? [company] : [];\n  }\n\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee || undefined;\n  }\n\n  async getEmployeeByUserId(userId: number): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.userId, userId));\n    return employee || undefined;\n  }\n\n  async getEmployeesByCompany(companyId: number): Promise<Employee[]> {\n    return await db.select().from(employees).where(eq(employees.companyId, companyId)).orderBy(desc(employees.createdAt));\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const [employee] = await db\n      .insert(employees)\n      .values(insertEmployee)\n      .returning();\n    return employee;\n  }\n\n  async updateEmployee(id: number, employee: Partial<Employee>): Promise<Employee> {\n    const [updatedEmployee] = await db\n      .update(employees)\n      .set({ ...employee, updatedAt: new Date() })\n      .where(eq(employees.id, id))\n      .returning();\n    return updatedEmployee;\n  }\n\n  async deleteEmployee(id: number): Promise<void> {\n    await db.delete(employees).where(eq(employees.id, id));\n  }\n\n  // Employee Payroll methods\n  async getEmployeePayroll(employeeId: number): Promise<EmployeePayroll | undefined> {\n    const [payroll] = await db.select().from(employeePayroll).where(eq(employeePayroll.employeeId, employeeId));\n    return payroll || undefined;\n  }\n\n  async createEmployeePayroll(payroll: InsertEmployeePayroll): Promise<EmployeePayroll> {\n    const [newPayroll] = await db\n      .insert(employeePayroll)\n      .values(payroll)\n      .returning();\n    return newPayroll;\n  }\n\n  async updateEmployeePayroll(employeeId: number, payroll: Partial<EmployeePayroll>): Promise<EmployeePayroll> {\n    const [updatedPayroll] = await db\n      .update(employeePayroll)\n      .set(payroll)\n      .where(eq(employeePayroll.employeeId, employeeId))\n      .returning();\n    return updatedPayroll;\n  }\n\n  async deleteEmployeePayroll(employeeId: number): Promise<void> {\n    await db.delete(employeePayroll).where(eq(employeePayroll.employeeId, employeeId));\n  }\n\n  // Employee Salary Structure methods (month-wise historical tracking)\n  async getEmployeeSalaryStructure(employeeId: number, year: number, month: number): Promise<SelectEmployeeSalaryStructure | undefined> {\n    const [structure] = await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(\n        and(\n          eq(employeeSalaryStructures.employeeId, employeeId),\n          eq(employeeSalaryStructures.year, year),\n          eq(employeeSalaryStructures.month, month)\n        )\n      );\n    return structure || undefined;\n  }\n\n  async upsertEmployeeSalaryStructure(structure: InsertEmployeeSalaryStructure): Promise<SelectEmployeeSalaryStructure> {\n    // Check if a record already exists for this employee, year, and month\n    const existingStructure = await this.getEmployeeSalaryStructure(\n      structure.employeeId,\n      structure.year,\n      structure.month\n    );\n\n    if (existingStructure) {\n      // Update existing record\n      const [updatedStructure] = await db\n        .update(employeeSalaryStructures)\n        .set({ ...structure, updatedAt: new Date() })\n        .where(\n          and(\n            eq(employeeSalaryStructures.employeeId, structure.employeeId),\n            eq(employeeSalaryStructures.year, structure.year),\n            eq(employeeSalaryStructures.month, structure.month)\n          )\n        )\n        .returning();\n      return updatedStructure;\n    } else {\n      // Insert new record\n      const [newStructure] = await db\n        .insert(employeeSalaryStructures)\n        .values(structure)\n        .returning();\n      return newStructure;\n    }\n  }\n\n  async getLatestEmployeeSalaryStructure(employeeId: number): Promise<SelectEmployeeSalaryStructure | undefined> {\n    const [latestStructure] = await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(eq(employeeSalaryStructures.employeeId, employeeId))\n      .orderBy(desc(employeeSalaryStructures.year), desc(employeeSalaryStructures.month))\n      .limit(1);\n    return latestStructure || undefined;\n  }\n\n  async getEmployeeSalaryStructureHistory(employeeId: number, limit: number = 12): Promise<SelectEmployeeSalaryStructure[]> {\n    return await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(eq(employeeSalaryStructures.employeeId, employeeId))\n      .orderBy(desc(employeeSalaryStructures.year), desc(employeeSalaryStructures.month))\n      .limit(limit);\n  }\n\n  async getCompleteSalaryHistoryFromJoining(employeeId: number): Promise<SelectEmployeeSalaryStructure[]> {\n    // Get employee to find hire date\n    const employee = await this.getEmployee(employeeId);\n    if (!employee) {\n      return [];\n    }\n\n    // Get all existing salary structures for this employee\n    const existingStructures = await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(eq(employeeSalaryStructures.employeeId, employeeId))\n      .orderBy(employeeSalaryStructures.year, employeeSalaryStructures.month);\n\n    // If no salary structures exist, return empty\n    if (existingStructures.length === 0) {\n      return [];\n    }\n\n    // Determine starting date - use hire date if available, otherwise earliest salary structure\n    let joiningDate: Date;\n    if (employee.hireDate) {\n      joiningDate = new Date(employee.hireDate);\n    } else {\n      // Fallback to earliest salary structure date if no hire date\n      const earliestStructure = existingStructures[0]; // Already sorted by year, month\n      joiningDate = new Date(earliestStructure.year, earliestStructure.month - 1, 1); // month is 1-indexed\n      console.log(`⚠️  No hire date for employee ${employeeId}, using earliest salary structure: ${earliestStructure.year}-${earliestStructure.month}`);\n    }\n    const currentDate = new Date();\n    const completeHistory: SelectEmployeeSalaryStructure[] = [];\n    \n    // Start from joining month\n    let currentYear = joiningDate.getFullYear();\n    let currentMonth = joiningDate.getMonth() + 1; // JavaScript months are 0-indexed\n\n    // Generate entries for each month from joining to current month\n    while (currentYear < currentDate.getFullYear() || \n           (currentYear === currentDate.getFullYear() && currentMonth <= currentDate.getMonth() + 1)) {\n      \n      // Find existing structure for this month\n      const existingStructure = existingStructures.find(\n        s => s.year === currentYear && s.month === currentMonth\n      );\n\n      if (existingStructure) {\n        // Use the actual salary structure for this month\n        completeHistory.push(existingStructure);\n      } else {\n        // Find the most recent salary structure before this month\n        const mostRecentStructure = existingStructures\n          .filter(s => \n            (s.year < currentYear) || \n            (s.year === currentYear && s.month < currentMonth)\n          )\n          .sort((a, b) => {\n            if (a.year !== b.year) return b.year - a.year;\n            return b.month - a.month;\n          })[0];\n\n        let structureToUse = mostRecentStructure;\n\n        // If no prior structure exists (early months), use the earliest available structure\n        if (!structureToUse && existingStructures.length > 0) {\n          structureToUse = existingStructures\n            .sort((a, b) => {\n              if (a.year !== b.year) return a.year - b.year;\n              return a.month - b.month;\n            })[0];\n        }\n\n        if (structureToUse) {\n          // Create a derived structure for this month using the reference data\n          const derivedStructure: SelectEmployeeSalaryStructure = {\n            ...structureToUse,\n            id: 0, // Indicate this is a derived entry\n            year: currentYear,\n            month: currentMonth,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          };\n          completeHistory.push(derivedStructure);\n        }\n      }\n\n      // Move to next month\n      currentMonth++;\n      if (currentMonth > 12) {\n        currentMonth = 1;\n        currentYear++;\n      }\n    }\n\n    // Return in descending order (most recent first) for consistency with other functions\n    return completeHistory.reverse();\n  }\n\n  async getFutureSalaryStructures(employeeId: number, fromYear: number, fromMonth: number): Promise<SelectEmployeeSalaryStructure[]> {\n    return await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(\n        and(\n          eq(employeeSalaryStructures.employeeId, employeeId),\n          or(\n            gt(employeeSalaryStructures.year, fromYear),\n            and(\n              eq(employeeSalaryStructures.year, fromYear),\n              gt(employeeSalaryStructures.month, fromMonth)\n            )\n          )\n        )\n      )\n      .orderBy(employeeSalaryStructures.year, employeeSalaryStructures.month);\n  }\n\n  async getDepartment(id: number): Promise<Department | undefined> {\n    const [department] = await db.select().from(departments).where(eq(departments.id, id));\n    return department || undefined;\n  }\n\n  async getDepartmentsByCompany(companyId: number): Promise<Department[]> {\n    return await db.select().from(departments).where(eq(departments.companyId, companyId)).orderBy(departments.name);\n  }\n\n  async getAllDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n\n  async createDepartment(insertDepartment: InsertDepartment): Promise<Department> {\n    const [department] = await db\n      .insert(departments)\n      .values(insertDepartment)\n      .returning();\n    return department;\n  }\n\n  async updateDepartment(id: number, department: Partial<Department>): Promise<Department> {\n    const [updatedDepartment] = await db\n      .update(departments)\n      .set({ ...department, updatedAt: new Date() })\n      .where(eq(departments.id, id))\n      .returning();\n    return updatedDepartment;\n  }\n\n  async deleteDepartment(id: number): Promise<void> {\n    await db.delete(departments).where(eq(departments.id, id));\n  }\n\n  async getJob(id: number): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, id));\n    return job || undefined;\n  }\n\n  async getJobsByCompany(companyId: number): Promise<Job[]> {\n    return await db.select().from(jobs).where(eq(jobs.companyId, companyId)).orderBy(desc(jobs.createdAt));\n  }\n\n  async createJob(insertJob: InsertJob): Promise<Job> {\n    const [job] = await db\n      .insert(jobs)\n      .values(insertJob)\n      .returning();\n    return job;\n  }\n\n  async updateJob(id: number, job: Partial<Job>): Promise<Job> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ ...job, updatedAt: new Date() })\n      .where(eq(jobs.id, id))\n      .returning();\n    return updatedJob;\n  }\n\n  async deleteJob(id: number): Promise<void> {\n    await db.delete(jobs).where(eq(jobs.id, id));\n  }\n\n  async getJobApplication(id: number): Promise<JobApplication | undefined> {\n    const [application] = await db.select().from(jobApplications).where(eq(jobApplications.id, id));\n    return application || undefined;\n  }\n\n  async getApplicationsByJob(jobId: number): Promise<JobApplication[]> {\n    return await db.select().from(jobApplications).where(eq(jobApplications.jobId, jobId)).orderBy(desc(jobApplications.appliedAt));\n  }\n\n  async getApplicationsByCompany(companyId: number): Promise<JobApplication[]> {\n    return await db\n      .select({\n        id: jobApplications.id,\n        jobId: jobApplications.jobId,\n        applicantName: jobApplications.applicantName,\n        applicantEmail: jobApplications.applicantEmail,\n        applicantPhone: jobApplications.applicantPhone,\n        resume: jobApplications.resume,\n        coverLetter: jobApplications.coverLetter,\n        status: jobApplications.status,\n        appliedAt: jobApplications.appliedAt,\n        reviewedAt: jobApplications.reviewedAt,\n        reviewedBy: jobApplications.reviewedBy,\n        notes: jobApplications.notes,\n        createdAt: jobApplications.createdAt,\n        updatedAt: jobApplications.updatedAt,\n      })\n      .from(jobApplications)\n      .innerJoin(jobs, eq(jobApplications.jobId, jobs.id))\n      .where(eq(jobs.companyId, companyId))\n      .orderBy(desc(jobApplications.appliedAt));\n  }\n\n  async createJobApplication(insertApplication: InsertJobApplication): Promise<JobApplication> {\n    const [application] = await db\n      .insert(jobApplications)\n      .values(insertApplication)\n      .returning();\n    return application;\n  }\n\n  async updateJobApplication(id: number, application: Partial<JobApplication>): Promise<JobApplication> {\n    const [updatedApplication] = await db\n      .update(jobApplications)\n      .set({ ...application, updatedAt: new Date() })\n      .where(eq(jobApplications.id, id))\n      .returning();\n    return updatedApplication;\n  }\n\n  async getAttendanceByEmployee(employeeId: number, date?: Date): Promise<Attendance[]> {\n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      return await db.select().from(attendance).where(\n        and(\n          eq(attendance.employeeId, employeeId),\n          sql`${attendance.date} >= ${startOfDay}`,\n          sql`${attendance.date} <= ${endOfDay}`\n        )\n      ).orderBy(desc(attendance.date));\n    }\n    \n    return await db.select().from(attendance).where(eq(attendance.employeeId, employeeId)).orderBy(desc(attendance.date));\n  }\n\n  async createAttendance(insertAttendance: InsertAttendance): Promise<Attendance> {\n    const [attendanceRecord] = await db\n      .insert(attendance)\n      .values(insertAttendance)\n      .returning();\n    return attendanceRecord;\n  }\n\n  async updateAttendance(id: number, attendanceUpdate: Partial<Attendance>): Promise<Attendance> {\n    const [updatedAttendance] = await db\n      .update(attendance)\n      .set({ ...attendanceUpdate, updatedAt: new Date() })\n      .where(eq(attendance.id, id))\n      .returning();\n    return updatedAttendance;\n  }\n\n  async getAttendanceByCompany(companyId: number, date?: Date): Promise<Attendance[]> {\n    const query = db\n      .select()\n      .from(attendance)\n      .innerJoin(employees, eq(attendance.employeeId, employees.id))\n      .where(eq(employees.companyId, companyId));\n\n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      return await query\n        .where(\n          and(\n            eq(employees.companyId, companyId),\n            sql`${attendance.date} >= ${startOfDay.toISOString().split('T')[0]}`,\n            sql`${attendance.date} <= ${endOfDay.toISOString().split('T')[0]}`\n          )\n        )\n        .orderBy(desc(attendance.date));\n    }\n    \n    return await query.orderBy(desc(attendance.date));\n  }\n\n  async markCheckIn(employeeId: number, checkInData: {\n    latitude?: number;\n    longitude?: number;\n    faceImage?: string;\n    deviceInfo?: string;\n    ipAddress?: string;\n  }): Promise<Attendance> {\n    const today = new Date().toISOString().split('T')[0];\n    const now = new Date();\n    \n    // Check if employee already has attendance for today\n    const existingAttendance = await db\n      .select()\n      .from(attendance)\n      .where(\n        and(\n          eq(attendance.employeeId, employeeId),\n          sql`date(${attendance.date}) = ${today}`\n        )\n      );\n\n    if (existingAttendance.length > 0) {\n      // Update existing record\n      const [updated] = await db\n        .update(attendance)\n        .set({\n          checkIn: now,\n          faceVerified: checkInData.faceImage ? true : false,\n          faceImage: checkInData.faceImage,\n          checkInLatitude: checkInData.latitude || null,\n          checkInLongitude: checkInData.longitude || null,\n          locationVerified: (checkInData.latitude && checkInData.longitude) ? true : false,\n          deviceInfo: checkInData.deviceInfo,\n          ipAddress: checkInData.ipAddress,\n          verificationType: checkInData.faceImage ? 'face' : 'manual',\n          status: 'present',\n          isPresent: true,\n          updatedAt: now\n        })\n        .where(eq(attendance.id, existingAttendance[0].id))\n        .returning();\n      \n      return updated;\n    } else {\n      // Get employee info for company ID\n      const employee = await this.getEmployee(employeeId);\n      if (!employee) {\n        throw new Error('Employee not found');\n      }\n\n      // Create new attendance record\n      const [newAttendance] = await db\n        .insert(attendance)\n        .values({\n          employeeId,\n          companyId: employee.companyId,\n          date: today,\n          checkIn: now,\n          faceVerified: checkInData.faceImage ? true : false,\n          faceImage: checkInData.faceImage,\n          checkInLatitude: checkInData.latitude || null,\n          checkInLongitude: checkInData.longitude || null,\n          locationVerified: (checkInData.latitude && checkInData.longitude) ? true : false,\n          deviceInfo: checkInData.deviceInfo,\n          ipAddress: checkInData.ipAddress,\n          verificationType: checkInData.faceImage ? 'face' : 'manual',\n          status: 'present',\n          isPresent: true\n        })\n        .returning();\n      \n      return newAttendance;\n    }\n  }\n\n  async markCheckOut(attendanceId: number, checkOutData: {\n    latitude?: number;\n    longitude?: number;\n  }): Promise<Attendance> {\n    const now = new Date();\n    \n    const [attendanceRecord] = await db\n      .select()\n      .from(attendance)\n      .where(eq(attendance.id, attendanceId));\n\n    if (!attendanceRecord) {\n      throw new Error('Attendance record not found');\n    }\n\n    // Calculate hours worked\n    let hoursWorked = 0;\n    if (attendanceRecord.checkIn) {\n      const checkInTime = new Date(attendanceRecord.checkIn);\n      hoursWorked = (now.getTime() - checkInTime.getTime()) / (1000 * 60 * 60);\n    }\n\n    const [updated] = await db\n      .update(attendance)\n      .set({\n        checkOut: now,\n        checkOutLatitude: checkOutData.latitude || null,\n        checkOutLongitude: checkOutData.longitude || null,\n        hoursWorked: hoursWorked.toFixed(2),\n        updatedAt: now\n      })\n      .where(eq(attendance.id, attendanceId))\n      .returning();\n    \n    return updated;\n  }\n\n  async getMonthlyAttendance(employeeId: number, year: number, month: number): Promise<MonthlyAttendance | undefined> {\n    const [monthlyRecord] = await db\n      .select()\n      .from(monthlyAttendance)\n      .where(\n        and(\n          eq(monthlyAttendance.employeeId, employeeId),\n          eq(monthlyAttendance.year, year),\n          eq(monthlyAttendance.month, month)\n        )\n      );\n    \n    return monthlyRecord || undefined;\n  }\n\n  async upsertMonthlyAttendanceQuickEntry(data: {\n    employeeId: number;\n    year: number;\n    month: number;\n    payDays: number;\n    otHours: number;\n  }) {\n    const existing = await db\n      .select()\n      .from(monthlyAttendance)\n      .where(\n        and(\n          eq(monthlyAttendance.employeeId, data.employeeId),\n          eq(monthlyAttendance.year, data.year),\n          eq(monthlyAttendance.month, data.month)\n        )\n      );\n\n    if (existing.length > 0) {\n      // Update existing record\n      const [updated] = await db\n        .update(monthlyAttendance)\n        .set({\n          payableDays: data.payDays,\n          totalHoursWorked: data.otHours.toString(),\n          updatedAt: new Date()\n        })\n        .where(eq(monthlyAttendance.id, existing[0].id))\n        .returning();\n      return updated;\n    } else {\n      // Create new record\n      const [created] = await db\n        .insert(monthlyAttendance)\n        .values({\n          employeeId: data.employeeId,\n          year: data.year,\n          month: data.month,\n          presentDays: Math.max(0, data.payDays - 6), // Estimate present days\n          payableDays: data.payDays,\n          absentDays: 0,\n          lateDays: 0,\n          totalWorkingDays: 26,\n          totalHoursWorked: data.otHours.toString(),\n          averageCheckInTime: \"09:00\",\n          averageCheckOutTime: \"18:00\"\n        })\n        .returning();\n      return created;\n    }\n  }\n\n  async getMonthlyAttendanceByEmployee(employeeId: number, year: number, month: number) {\n    const [result] = await db\n      .select()\n      .from(monthlyAttendance)\n      .where(\n        and(\n          eq(monthlyAttendance.employeeId, employeeId),\n          eq(monthlyAttendance.year, year),\n          eq(monthlyAttendance.month, month)\n        )\n      );\n    return result;\n  }\n\n  async deleteMonthlyAttendance(employeeId: number, year: number, month: number) {\n    const deleted = await db\n      .delete(monthlyAttendance)\n      .where(\n        and(\n          eq(monthlyAttendance.employeeId, employeeId),\n          eq(monthlyAttendance.year, year),\n          eq(monthlyAttendance.month, month)\n        )\n      )\n      .returning();\n    \n    return deleted.length > 0 ? deleted[0] : null;\n  }\n\n  async calculateMonthlyAttendance(employeeId: number, companyId: number, year: number, month: number): Promise<MonthlyAttendance> {\n    // First check if monthly attendance record already exists - use that data if available\n    const existingRecord = await this.getMonthlyAttendance(employeeId, year, month);\n    if (existingRecord) {\n      return existingRecord;\n    }\n\n    // If no monthly record exists, try to calculate from daily attendance records\n    const firstDay = new Date(year, month - 1, 1);\n    const lastDay = new Date(year, month, 0);\n    \n    const attendanceRecords = await db\n      .select()\n      .from(attendance)\n      .where(\n        and(\n          eq(attendance.employeeId, employeeId),\n          sql`${attendance.date} >= ${firstDay.toISOString().split('T')[0]}`,\n          sql`${attendance.date} <= ${lastDay.toISOString().split('T')[0]}`\n        )\n      );\n\n    // Calculate statistics from daily records\n    const totalWorkingDays = this.getWorkingDaysInMonth(year, month);\n    const presentDays = attendanceRecords.filter(r => r.status === 'present').length;\n    const absentDays = attendanceRecords.filter(r => r.status === 'absent').length;\n    const halfDays = attendanceRecords.filter(r => r.status === 'half_day').length;\n    const lateDays = attendanceRecords.filter(r => r.status === 'late').length;\n    const paidLeaveDays = attendanceRecords.filter(r => r.status === 'paid_leave').length;\n    const unpaidLeaveDays = attendanceRecords.filter(r => r.status === 'unpaid_leave').length;\n    const compOffDays = attendanceRecords.filter(r => r.status === 'comp_off').length;\n    const weeklyOffDays = this.getWeeklyOffDaysInMonth(year, month);\n    const holidayDays = 0; // TODO: Get from holidays table\n    \n    // Calculate payable days with proper late penalty policy\n    const hasMinimumAttendance = (presentDays + lateDays + halfDays) > 0;\n    const creditedWeeklyOffs = hasMinimumAttendance ? weeklyOffDays : 0;\n    const creditedHolidays = hasMinimumAttendance ? holidayDays : 0;\n    \n    const fullPayDays = presentDays + paidLeaveDays + creditedWeeklyOffs + compOffDays + creditedHolidays;\n    const penalizedLateDays = lateDays * 0.9;\n    const partialHalfDays = halfDays * 0.5;\n    const payableDays = fullPayDays + penalizedLateDays + partialHalfDays;\n    const totalHoursWorked = attendanceRecords\n      .reduce((total, record) => total + (parseFloat(record.hoursWorked || '0')), 0);\n    \n    const monthlyData = {\n      employeeId,\n      companyId,\n      year,\n      month,\n      totalWorkingDays,\n      presentDays,\n      absentDays,\n      halfDays,\n      lateDays,\n      paidLeaveDays,\n      unpaidLeaveDays,\n      compOffDays,\n      weeklyOffDays,\n      holidayDays,\n      payableDays,\n      totalHoursWorked: totalHoursWorked.toFixed(2),\n      averageCheckInTime: this.calculateAverageTime(attendanceRecords.map(r => r.checkIn).filter(Boolean)),\n      averageCheckOutTime: this.calculateAverageTime(attendanceRecords.map(r => r.checkOut).filter(Boolean))\n    };\n\n    if (existingRecord) {\n      const [updated] = await db\n        .update(monthlyAttendance)\n        .set({ ...monthlyData, updatedAt: new Date() })\n        .where(eq(monthlyAttendance.id, existingRecord.id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(monthlyAttendance)\n        .values(monthlyData)\n        .returning();\n      return created;\n    }\n  }\n\n  private getWorkingDaysInMonth(year: number, month: number): number {\n    const firstDay = new Date(year, month - 1, 1);\n    const lastDay = new Date(year, month, 0);\n    let workingDays = 0;\n    \n    for (let date = new Date(firstDay); date <= lastDay; date.setDate(date.getDate() + 1)) {\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) { // Not Sunday (0) or Saturday (6)\n        workingDays++;\n      }\n    }\n    \n    return workingDays;\n  }\n\n  private getWeeklyOffDaysInMonth(year: number, month: number): number {\n    const firstDay = new Date(year, month - 1, 1);\n    const lastDay = new Date(year, month, 0);\n    let weeklyOffDays = 0;\n    \n    for (let date = new Date(firstDay); date <= lastDay; date.setDate(date.getDate() + 1)) {\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) { // Sunday (0) or Saturday (6)\n        weeklyOffDays++;\n      }\n    }\n    \n    return weeklyOffDays;\n  }\n\n  // Payroll Methods\n  async getMonthlyPayrolls(companyId: number): Promise<MonthlyPayroll[]> {\n    return await db\n      .select()\n      .from(monthlyPayroll)\n      .where(eq(monthlyPayroll.companyId, companyId))\n      .orderBy(desc(monthlyPayroll.year), desc(monthlyPayroll.month));\n  }\n\n  async getMonthlyPayroll(id: number): Promise<MonthlyPayroll | undefined> {\n    const [payroll] = await db\n      .select()\n      .from(monthlyPayroll)\n      .where(eq(monthlyPayroll.id, id));\n    return payroll;\n  }\n\n  async createMonthlyPayroll(data: InsertMonthlyPayroll): Promise<MonthlyPayroll> {\n    const [created] = await db\n      .insert(monthlyPayroll)\n      .values(data)\n      .returning();\n    return created;\n  }\n\n  async finalizePayroll(payrollId: number, finalizedBy: number): Promise<MonthlyPayroll> {\n    const [updated] = await db\n      .update(monthlyPayroll)\n      .set({ \n        status: 'finalized',\n        finalizedBy,\n        finalizedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(monthlyPayroll.id, payrollId))\n      .returning();\n    return updated;\n  }\n\n  async deleteMonthlyPayroll(payrollId: number): Promise<boolean> {\n    // First delete all associated payroll records\n    const deletedRecords = await db\n      .delete(payrollRecords)\n      .where(eq(payrollRecords.monthlyPayrollId, payrollId))\n      .returning();\n\n    // Then delete the monthly payroll\n    const deletedPayroll = await db\n      .delete(monthlyPayroll)\n      .where(eq(monthlyPayroll.id, payrollId))\n      .returning();\n      \n    // Return true if payroll was actually deleted\n    return deletedPayroll.length > 0;\n  }\n\n  async getPayrollRecords(monthlyPayrollId: number): Promise<any[]> {\n    // Join with employees and departments to get enriched data for Excel export\n    const records = await db\n      .select({\n        id: payrollRecords.id,\n        monthlyPayrollId: payrollRecords.monthlyPayrollId,\n        employeeId: payrollRecords.employeeId,\n        employeeCode: employees.employeeId,\n        employeeName: sql<string>`${employees.firstName} || ' ' || ${employees.lastName}`,\n        department: departments.name,\n        presentDays: payrollRecords.presentDays,\n        payableDays: payrollRecords.payableDays,\n        basicSalary: payrollRecords.basicSalary,\n        hra: payrollRecords.hra,\n        conveyanceAllowance: payrollRecords.conveyanceAllowance,\n        otherAllowances: payrollRecords.otherAllowances,\n        grossSalary: payrollRecords.grossSalary,\n        epfEmployee: payrollRecords.epfEmployee,\n        esicEmployee: payrollRecords.esicEmployee,\n        tdsAmount: payrollRecords.tdsAmount,\n        ptAmount: payrollRecords.ptAmount,\n        totalDeductions: payrollRecords.totalDeductions,\n        netSalary: payrollRecords.netSalary,\n        paymentStatus: payrollRecords.paymentStatus\n      })\n      .from(payrollRecords)\n      .leftJoin(employees, eq(payrollRecords.employeeId, employees.id))\n      .leftJoin(departments, eq(employees.departmentId, departments.id))\n      .where(eq(payrollRecords.monthlyPayrollId, monthlyPayrollId))\n      .orderBy(payrollRecords.employeeId);\n    \n    return records;\n  }\n\n  async createPayrollRecord(data: InsertPayrollRecord): Promise<PayrollRecord> {\n    const [created] = await db\n      .insert(payrollRecords)\n      .values(data)\n      .returning();\n    return created;\n  }\n\n  async updatePaymentStatus(recordId: number, status: string, amount?: number, method?: string, reference?: string): Promise<PayrollRecord> {\n    const updateData: any = {\n      paymentStatus: status,\n      updatedAt: new Date()\n    };\n\n    if (status === 'paid') {\n      updateData.paidAmount = amount || 0;\n      updateData.paymentDate = new Date();\n      updateData.paymentMethod = method;\n      updateData.paymentReference = reference;\n    } else if (status === 'unpaid') {\n      updateData.paidAmount = 0;\n      updateData.paymentDate = null;\n      updateData.paymentMethod = null;\n      updateData.paymentReference = null;\n    }\n\n    const [updated] = await db\n      .update(payrollRecords)\n      .set(updateData)\n      .where(eq(payrollRecords.id, recordId))\n      .returning();\n    return updated;\n  }\n\n  async generatePayrollForMonth(companyId: number, month: number, year: number, generatedBy: number): Promise<MonthlyPayroll> {\n    // Check if payroll already exists\n    const existingPayroll = await db\n      .select()\n      .from(monthlyPayroll)\n      .where(\n        and(\n          eq(monthlyPayroll.companyId, companyId),\n          eq(monthlyPayroll.month, month),\n          eq(monthlyPayroll.year, year)\n        )\n      );\n\n    if (existingPayroll.length > 0) {\n      throw new Error('Payroll for this month already exists');\n    }\n\n    // Create monthly payroll record\n    const [createdPayroll] = await db\n      .insert(monthlyPayroll)\n      .values({\n        companyId,\n        month,\n        year,\n        generatedBy,\n        status: 'draft'\n      })\n      .returning();\n\n    // Get all active employees for the company\n    const activeEmployees = await db\n      .select()\n      .from(employees)\n      .where(\n        and(\n          eq(employees.companyId, companyId),\n          eq(employees.status, 'active')\n        )\n      );\n\n    // Generate payroll records for each employee\n    for (const employee of activeEmployees) {\n      // Get the latest payroll setup for this employee\n      const [payrollSetup] = await db\n        .select()\n        .from(employeePayroll)\n        .where(eq(employeePayroll.employeeId, employee.id))\n        .orderBy(desc(employeePayroll.updatedAt))\n        .limit(1);\n\n\n      if (!employee) continue;\n\n      // Calculate monthly attendance\n      const monthlyAttendanceData = await this.calculateMonthlyAttendance(employee.id, companyId, year, month);\n\n      // Calculate salary components based on payroll setup\n      const basicSalary = parseFloat(payrollSetup?.earningHead1 || '0');\n      const hra = parseFloat(payrollSetup?.earningHead2 || '0');\n      const conveyanceAllowance = parseFloat(payrollSetup?.earningHead3 || '0');\n      const otherAllowances = parseFloat(payrollSetup?.earningHead4 || '0');\n      const grossSalary = parseFloat(payrollSetup?.grossValue || '0');\n\n      // Note: Original deduction and contribution calculations removed to avoid dual calculation sources\n      // All calculations now use proportional amounts only\n\n      // Calculate proportional salary based on payable days\n      const totalMonthDays = new Date(year, month, 0).getDate(); // Get actual days in month\n      const payableDays = Math.max(0, monthlyAttendanceData.payableDays || 0); // Ensure non-negative\n      const rawProportionFactor = totalMonthDays > 0 ? payableDays / totalMonthDays : 0;\n      \n      // Clamp proportion factor to prevent errors (0-1 range) and handle NaN/invalid values\n      const proportionFactor = isNaN(rawProportionFactor) ? 0 : Math.max(0, Math.min(1, rawProportionFactor));\n      \n      // Apply proportional calculation to all salary components with proper rounding\n      const proportionalBasicSalary = Math.round((basicSalary * proportionFactor) * 100) / 100;\n      const proportionalHra = Math.round((hra * proportionFactor) * 100) / 100;\n      const proportionalConveyanceAllowance = Math.round((conveyanceAllowance * proportionFactor) * 100) / 100;\n      const proportionalOtherAllowances = Math.round((otherAllowances * proportionFactor) * 100) / 100;\n      const proportionalGrossSalary = Math.round((grossSalary * proportionFactor) * 100) / 100;\n      \n      // Calculate deductions based on proportional amounts with proper rounding\n      let proportionalEpfEmployee = 0;\n      let proportionalEsicEmployee = 0;\n      let proportionalLwfEmployee = 0;\n      let proportionalVpfAmount = 0;\n      let proportionalTdsAmount = 0;\n      let proportionalPtAmount = 0;\n\n      if (payrollSetup?.epfEnabled) {\n        proportionalEpfEmployee = Math.round((proportionalBasicSalary * 0.12) * 100) / 100;\n      }\n\n      if (payrollSetup?.esicEnabled) {\n        proportionalEsicEmployee = Math.round((proportionalGrossSalary * 0.0075) * 100) / 100;\n      }\n\n      if (payrollSetup?.lwfEnabled) {\n        proportionalLwfEmployee = Math.round((10 * proportionFactor) * 100) / 100; // Proportional fixed amount\n      }\n\n      if (payrollSetup?.vpfEnabled && payrollSetup?.vpfAmount) {\n        proportionalVpfAmount = Math.round((parseFloat(payrollSetup.vpfAmount) * proportionFactor) * 100) / 100;\n      }\n\n      if (payrollSetup?.tdsEnabled && payrollSetup?.tdsAmount) {\n        proportionalTdsAmount = Math.round((parseFloat(payrollSetup.tdsAmount) * proportionFactor) * 100) / 100;\n      }\n\n      if (payrollSetup?.ptEnabled && payrollSetup?.ptAmount) {\n        proportionalPtAmount = Math.round((parseFloat(payrollSetup.ptAmount) * proportionFactor) * 100) / 100;\n      }\n\n      const proportionalTotalDeductions = Math.round((proportionalEpfEmployee + proportionalEsicEmployee + \n        proportionalLwfEmployee + proportionalVpfAmount + proportionalTdsAmount + proportionalPtAmount) * 100) / 100;\n\n      // Calculate employer contributions based on proportional amounts with proper rounding\n      let proportionalEpfEmployer = 0;\n      let proportionalEpfAdmin = 0;\n      let proportionalEsicEmployer = 0;\n      let proportionalLwfEmployer = 0;\n      let proportionalBonus = 0;\n\n      if (payrollSetup?.epfEnabled) {\n        proportionalEpfEmployer = Math.round((proportionalBasicSalary * 0.12) * 100) / 100;\n        proportionalEpfAdmin = Math.round((proportionalBasicSalary * 0.01) * 100) / 100;\n      }\n\n      if (payrollSetup?.esicEnabled) {\n        proportionalEsicEmployer = Math.round((proportionalGrossSalary * 0.0325) * 100) / 100;\n      }\n\n      if (payrollSetup?.lwfEnabled) {\n        proportionalLwfEmployer = Math.round((10 * proportionFactor) * 100) / 100; // Proportional fixed amount\n      }\n\n      if (payrollSetup?.bonusEnabled) {\n        proportionalBonus = Math.round((proportionalGrossSalary * 0.0833) * 100) / 100;\n      }\n\n      const proportionalTotalEmployerContributions = Math.round((proportionalEpfEmployer + proportionalEpfAdmin + \n        proportionalEsicEmployer + proportionalLwfEmployer + proportionalBonus) * 100) / 100;\n\n      // Calculate final amounts with proper rounding\n      const netSalary = Math.round((proportionalGrossSalary - proportionalTotalDeductions) * 100) / 100;\n      const ctc = Math.round((proportionalGrossSalary + proportionalTotalEmployerContributions) * 100) / 100;\n\n      // Create payroll record\n      await db.insert(payrollRecords).values({\n        monthlyPayrollId: createdPayroll.id,\n        employeeId: employee.id,\n        companyId,\n        presentDays: monthlyAttendanceData.presentDays,\n        weeklyOffs: monthlyAttendanceData.weeklyOffDays,\n        leaveDays: monthlyAttendanceData.paidLeaveDays + monthlyAttendanceData.unpaidLeaveDays,\n        holidays: monthlyAttendanceData.holidayDays,\n        payableDays: monthlyAttendanceData.payableDays,\n        overtimeHours: '0', // TODO: Calculate from attendance\n        basicSalary: proportionalBasicSalary.toFixed(2),\n        hra: proportionalHra.toFixed(2),\n        conveyanceAllowance: proportionalConveyanceAllowance.toFixed(2),\n        otherAllowances: proportionalOtherAllowances.toFixed(2),\n        grossSalary: proportionalGrossSalary.toFixed(2),\n        overtimeAmount: '0',\n        epfEmployee: proportionalEpfEmployee.toFixed(2),\n        esicEmployee: proportionalEsicEmployee.toFixed(2),\n        lwfEmployee: proportionalLwfEmployee.toFixed(2),\n        vpfAmount: proportionalVpfAmount.toFixed(2),\n        tdsAmount: proportionalTdsAmount.toFixed(2),\n        ptAmount: proportionalPtAmount.toFixed(2),\n        totalDeductions: proportionalTotalDeductions.toFixed(2),\n        epfEmployer: proportionalEpfEmployer.toFixed(2),\n        epfAdmin: proportionalEpfAdmin.toFixed(2),\n        esicEmployer: proportionalEsicEmployer.toFixed(2),\n        lwfEmployer: proportionalLwfEmployer.toFixed(2),\n        bonus: proportionalBonus.toFixed(2),\n        totalEmployerContributions: proportionalTotalEmployerContributions.toFixed(2),\n        netSalary: netSalary.toFixed(2),\n        ctc: ctc.toFixed(2),\n        paymentStatus: 'unpaid'\n      });\n    }\n\n    return createdPayroll;\n  }\n\n  private calculateAverageTime(times: (Date | string)[]): string | null {\n    if (times.length === 0) return null;\n    \n    const totalMinutes = times.reduce((sum, time) => {\n      const date = new Date(time);\n      return sum + (date.getHours() * 60 + date.getMinutes());\n    }, 0);\n    \n    const avgMinutes = totalMinutes / times.length;\n    const hours = Math.floor(avgMinutes / 60);\n    const minutes = Math.floor(avgMinutes % 60);\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`;\n  }\n\n  async getFaceTemplate(employeeId: number): Promise<FaceTemplate | undefined> {\n    const [template] = await db\n      .select()\n      .from(faceTemplates)\n      .where(\n        and(\n          eq(faceTemplates.employeeId, employeeId),\n          eq(faceTemplates.isActive, true)\n        )\n      );\n    \n    return template || undefined;\n  }\n\n  async createFaceTemplate(insertFaceTemplate: InsertFaceTemplate): Promise<FaceTemplate> {\n    const [template] = await db\n      .insert(faceTemplates)\n      .values(insertFaceTemplate)\n      .returning();\n    \n    return template;\n  }\n\n  async updateFaceTemplate(employeeId: number, templateData: string): Promise<FaceTemplate> {\n    const existing = await this.getFaceTemplate(employeeId);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(faceTemplates)\n        .set({ templateData, updatedAt: new Date() })\n        .where(eq(faceTemplates.id, existing.id))\n        .returning();\n      \n      return updated;\n    } else {\n      return await this.createFaceTemplate({\n        employeeId,\n        templateData,\n        isActive: true\n      });\n    }\n  }\n\n  async getAttendanceLocations(companyId: number): Promise<AttendanceLocation[]> {\n    return await db\n      .select()\n      .from(attendanceLocations)\n      .where(\n        and(\n          eq(attendanceLocations.companyId, companyId),\n          eq(attendanceLocations.isActive, true)\n        )\n      )\n      .orderBy(attendanceLocations.name);\n  }\n\n  async createAttendanceLocation(insertLocation: InsertAttendanceLocation): Promise<AttendanceLocation> {\n    const [location] = await db\n      .insert(attendanceLocations)\n      .values(insertLocation)\n      .returning();\n    \n    return location;\n  }\n\n  async validateLocation(companyId: number, latitude: number, longitude: number): Promise<AttendanceLocation | null> {\n    const locations = await this.getAttendanceLocations(companyId);\n    \n    for (const location of locations) {\n      const distance = this.calculateDistance(\n        latitude,\n        longitude,\n        parseFloat(location.latitude),\n        parseFloat(location.longitude)\n      );\n      \n      if (distance <= (location.radius || 100)) {\n        return location;\n      }\n    }\n    \n    return null;\n  }\n\n  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 6371e3; // Earth's radius in meters\n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lon1 - lon2) * Math.PI / 180;\n\n    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n              Math.cos(φ1) * Math.cos(φ2) *\n              Math.sin(Δλ/2) * Math.sin(Δλ/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    return R * c;\n  }\n\n  async getDashboardStats(companyId: number): Promise<{\n    totalEmployees: number;\n    activeJobs: number;\n    pendingApplications: number;\n    todayAttendance: number;\n  }> {\n    // Total employees\n    const [employeeCount] = await db\n      .select({ count: count() })\n      .from(employees)\n      .where(and(eq(employees.companyId, companyId), eq(employees.status, 'active')));\n\n    // Active jobs\n    const [jobCount] = await db\n      .select({ count: count() })\n      .from(jobs)\n      .where(and(eq(jobs.companyId, companyId), eq(jobs.status, 'active')));\n\n    // Pending applications\n    const [applicationCount] = await db\n      .select({ count: count() })\n      .from(jobApplications)\n      .innerJoin(jobs, eq(jobApplications.jobId, jobs.id))\n      .where(and(eq(jobs.companyId, companyId), eq(jobApplications.status, 'pending')));\n\n    // Today's attendance (simplified - just count of present employees today)\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const [attendanceCount] = await db\n      .select({ count: count() })\n      .from(attendance)\n      .innerJoin(employees, eq(attendance.employeeId, employees.id))\n      .where(\n        and(\n          eq(employees.companyId, companyId),\n          eq(attendance.isPresent, true),\n          sql`${attendance.date} >= ${today}`,\n          sql`${attendance.date} < ${tomorrow}`\n        )\n      );\n\n    return {\n      totalEmployees: employeeCount.count || 0,\n      activeJobs: jobCount.count || 0,\n      pendingApplications: applicationCount.count || 0,\n      todayAttendance: attendanceCount.count || 0,\n    };\n  }\n\n  // User management methods\n  async getUsersByCompany(companyId: number): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.companyId, companyId)).orderBy(desc(users.createdAt));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(id: number, user: Partial<User>): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...user, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async deleteUser(id: number): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Company management methods\n  async getAllCompanies(): Promise<Company[]> {\n    return await db.select().from(companies).orderBy(desc(companies.createdAt));\n  }\n\n  async updateCompany(id: number, company: Partial<Company>): Promise<Company> {\n    const [updatedCompany] = await db\n      .update(companies)\n      .set({ ...company, updatedAt: new Date() })\n      .where(eq(companies.id, id))\n      .returning();\n    return updatedCompany;\n  }\n\n  async updateCompanyProfile(id: number, profileData: Partial<Company>): Promise<Company> {\n    const [updatedCompany] = await db\n      .update(companies)\n      .set({ \n        ...profileData, \n        profileComplete: true,\n        updatedAt: new Date() \n      })\n      .where(eq(companies.id, id))\n      .returning();\n    return updatedCompany;\n  }\n\n  async deleteCompany(id: number): Promise<void> {\n    // Delete related data first due to foreign key constraints\n    await db.delete(departments).where(eq(departments.companyId, id));\n    await db.delete(jobs).where(eq(jobs.companyId, id));\n    await db.delete(employees).where(eq(employees.companyId, id));\n    await db.delete(userActivities).where(eq(userActivities.companyId, id));\n    await db.delete(permissionRequests).where(eq(permissionRequests.companyId, id));\n    await db.delete(jobApplications).where(eq(jobApplications.companyId, id));\n    await db.delete(interviews).where(eq(interviews.companyId, id));\n    await db.delete(jobOffers).where(eq(jobOffers.companyId, id));\n    \n    // Finally delete the company\n    await db.delete(companies).where(eq(companies.id, id));\n  }\n\n  // Employee Profile methods\n  async createEmployeeProfile(profileData: InsertEmployeeProfile): Promise<EmployeeProfile> {\n    const [profile] = await db\n      .insert(employeeProfiles)\n      .values(profileData)\n      .returning();\n    return profile;\n  }\n\n  async getEmployeeProfileByUserId(userId: number): Promise<EmployeeProfile | undefined> {\n    const [profile] = await db.select().from(employeeProfiles).where(eq(employeeProfiles.userId, userId));\n    \n    if (!profile) {\n      // If no employee profile exists, create a minimal one from user data\n      const user = await this.getUser(userId);\n      if (user) {\n        const newProfile = await this.createEmployeeProfile({\n          userId: user.id,\n          firstName: user.username.split('@')[0] || 'Employee',\n          lastName: '',\n        });\n        return newProfile;\n      }\n    }\n    \n    return profile || undefined;\n  }\n\n  async updateEmployeeProfile(userId: number, profileData: Partial<EmployeeProfile>): Promise<EmployeeProfile> {\n    // Check if profile exists, if not create it\n    const existingProfile = await this.getEmployeeProfileByUserId(userId);\n    \n    if (!existingProfile) {\n      // Create new profile if it doesn't exist\n      return await this.createEmployeeProfile({\n        userId,\n        firstName: profileData.firstName || '',\n        lastName: profileData.lastName || '',\n        skills: profileData.skills,\n        experience: profileData.experience,\n        phone: profileData.phone,\n        address: profileData.address,\n      });\n    }\n    \n    const [profile] = await db\n      .update(employeeProfiles)\n      .set({ ...profileData, updatedAt: new Date() })\n      .where(eq(employeeProfiles.userId, userId))\n      .returning();\n    return profile;\n  }\n\n  async getAllPublicJobs(): Promise<Job[]> {\n    return await db.select().from(jobs).where(eq(jobs.status, 'active')).orderBy(desc(jobs.postedAt));\n  }\n\n  async getJobApplicationsByEmail(email: string): Promise<JobApplication[]> {\n    return await db.select().from(jobApplications).where(eq(jobApplications.applicantEmail, email)).orderBy(desc(jobApplications.appliedAt));\n  }\n\n  // Permission methods\n  async getPermissions(): Promise<Permission[]> {\n    return await db.select().from(permissions).orderBy(permissions.category, permissions.name);\n  }\n\n  async createPermission(insertPermission: InsertPermission): Promise<Permission> {\n    const [permission] = await db\n      .insert(permissions)\n      .values(insertPermission)\n      .returning();\n    return permission;\n  }\n\n  async getRolePermissions(role: string, companyId?: number): Promise<RolePermission[]> {\n    let query = db.select().from(rolePermissions).where(eq(rolePermissions.role, role as any));\n    \n    if (companyId) {\n      query = db.select().from(rolePermissions)\n        .where(\n          and(\n            eq(rolePermissions.role, role as any),\n            eq(rolePermissions.companyId, companyId)\n          )\n        );\n    }\n    \n    return await query.orderBy(rolePermissions.id);\n  }\n\n  async createRolePermission(insertRolePermission: InsertRolePermission): Promise<RolePermission> {\n    const [rolePermission] = await db\n      .insert(rolePermissions)\n      .values(insertRolePermission)\n      .returning();\n    return rolePermission;\n  }\n\n  async deleteRolePermission(id: number): Promise<void> {\n    await db.delete(rolePermissions).where(eq(rolePermissions.id, id));\n  }\n\n  // Permission request methods\n  async getPermissionRequests(companyId?: number): Promise<any[]> {\n    try {\n      let query = db.select().from(permissionRequests);\n      \n      if (companyId) {\n        query = query.where(eq(permissionRequests.companyId, companyId));\n      }\n      \n      const results = await query.orderBy(desc(permissionRequests.createdAt));\n      return results;\n    } catch (error) {\n      console.error('Error fetching permission requests:', error);\n      throw error;\n    }\n  }\n\n  async createPermissionRequest(insertPermissionRequest: InsertPermissionRequest): Promise<PermissionRequest> {\n    try {\n      const [permissionRequest] = await db\n        .insert(permissionRequests)\n        .values(insertPermissionRequest)\n        .returning();\n      return permissionRequest;\n    } catch (error) {\n      console.error('Error creating permission request:', error);\n      throw error;\n    }\n  }\n\n  async updatePermissionRequest(id: number, updates: Partial<PermissionRequest>): Promise<PermissionRequest> {\n    const [updated] = await db\n      .update(permissionRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(permissionRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async updatePermissionRequest(id: number, permissionRequest: Partial<PermissionRequest>): Promise<PermissionRequest> {\n    const [updatedPermissionRequest] = await db\n      .update(permissionRequests)\n      .set({ ...permissionRequest, updatedAt: new Date() })\n      .where(eq(permissionRequests.id, id))\n      .returning();\n    return updatedPermissionRequest;\n  }\n\n  async getPermissionRequestsByUser(userId: number): Promise<PermissionRequest[]> {\n    return await db.select().from(permissionRequests)\n      .where(eq(permissionRequests.userId, userId))\n      .orderBy(desc(permissionRequests.createdAt));\n  }\n\n  // User activity methods\n  async createUserActivity(insertActivity: InsertUserActivity): Promise<UserActivity> {\n    const [activity] = await db\n      .insert(userActivities)\n      .values(insertActivity)\n      .returning();\n    return activity;\n  }\n\n  async getUserActivities(companyId?: number, userId?: number): Promise<UserActivity[]> {\n    if (companyId && userId) {\n      return await db.select().from(userActivities)\n        .where(and(eq(userActivities.companyId, companyId), eq(userActivities.userId, userId)))\n        .orderBy(desc(userActivities.createdAt));\n    } else if (companyId) {\n      return await db.select().from(userActivities)\n        .where(eq(userActivities.companyId, companyId))\n        .orderBy(desc(userActivities.createdAt));\n    } else if (userId) {\n      return await db.select().from(userActivities)\n        .where(eq(userActivities.userId, userId))\n        .orderBy(desc(userActivities.createdAt));\n    }\n    \n    return await db.select().from(userActivities).orderBy(desc(userActivities.createdAt));\n  }\n\n  // Employment history methods\n  async getEmploymentHistoryByProfile(profileId: number): Promise<EmploymentHistory[]> {\n    return await db.select().from(employmentHistory)\n      .where(eq(employmentHistory.employeeProfileId, profileId))\n      .orderBy(desc(employmentHistory.joinDate));\n  }\n\n  async createEmploymentHistory(historyData: InsertEmploymentHistory): Promise<EmploymentHistory> {\n    const [history] = await db\n      .insert(employmentHistory)\n      .values(historyData)\n      .returning();\n    return history;\n  }\n\n  async updateEmploymentHistory(id: number, historyData: Partial<EmploymentHistory>): Promise<EmploymentHistory> {\n    const [history] = await db\n      .update(employmentHistory)\n      .set({ ...historyData, updatedAt: new Date() })\n      .where(eq(employmentHistory.id, id))\n      .returning();\n    return history;\n  }\n\n  async deleteEmploymentHistory(id: number): Promise<void> {\n    await db.delete(employmentHistory).where(eq(employmentHistory.id, id));\n  }\n\n  // KYC details methods\n  async getKycDetailsByProfile(profileId: number): Promise<KycDetails | undefined> {\n    const [kyc] = await db.select().from(kycDetails)\n      .where(eq(kycDetails.employeeProfileId, profileId));\n    return kyc || undefined;\n  }\n\n  async createKycDetails(kycData: InsertKycDetails): Promise<KycDetails> {\n    const [kyc] = await db\n      .insert(kycDetails)\n      .values(kycData)\n      .returning();\n    return kyc;\n  }\n\n  async updateKycDetails(profileId: number, kycData: Partial<KycDetails>): Promise<KycDetails> {\n    // Check if KYC details exist, if not create them\n    const existing = await this.getKycDetailsByProfile(profileId);\n    \n    if (!existing) {\n      return await this.createKycDetails({\n        employeeProfileId: profileId,\n        aadharNo: kycData.aadharNo,\n        panNo: kycData.panNo,\n        bankAccountNo: kycData.bankAccountNo,\n        ifscCode: kycData.ifscCode,\n        uanNo: kycData.uanNo,\n        esicNo: kycData.esicNo,\n      });\n    }\n    \n    const [kyc] = await db\n      .update(kycDetails)\n      .set({ ...kycData, updatedAt: new Date() })\n      .where(eq(kycDetails.employeeProfileId, profileId))\n      .returning();\n    return kyc;\n  }\n\n  // Interview methods\n  async getInterviewsByCompany(companyId: number): Promise<Interview[]> {\n    return await db\n      .select({\n        id: interviews.id,\n        jobApplicationId: interviews.jobApplicationId,\n        scheduledAt: interviews.scheduledAt,\n        duration: interviews.duration,\n        location: interviews.location,\n        meetingLink: interviews.meetingLink,\n        interviewerIds: interviews.interviewerIds,\n        status: interviews.status,\n        notes: interviews.notes,\n        rating: interviews.rating,\n        result: interviews.result,\n        createdAt: interviews.createdAt,\n        updatedAt: interviews.updatedAt,\n      })\n      .from(interviews)\n      .innerJoin(jobApplications, eq(interviews.jobApplicationId, jobApplications.id))\n      .innerJoin(jobs, eq(jobApplications.jobId, jobs.id))\n      .where(eq(jobs.companyId, companyId))\n      .orderBy(desc(interviews.scheduledAt));\n  }\n\n  async createInterview(interviewData: InsertInterview): Promise<Interview> {\n    const [interview] = await db\n      .insert(interviews)\n      .values(interviewData)\n      .returning();\n    return interview;\n  }\n\n  async updateInterviewStatus(id: number, status: string, notes?: string): Promise<Interview> {\n    const [interview] = await db\n      .update(interviews)\n      .set({ status, notes, updatedAt: new Date() })\n      .where(eq(interviews.id, id))\n      .returning();\n    return interview;\n  }\n\n  // Job Application methods\n  async getJobApplicationsByCompany(companyId: number): Promise<JobApplication[]> {\n    return await db\n      .select()\n      .from(jobApplications)\n      .innerJoin(jobs, eq(jobApplications.jobId, jobs.id))\n      .where(eq(jobs.companyId, companyId))\n      .orderBy(desc(jobApplications.appliedAt));\n  }\n\n  async updateJobApplicationStatus(id: number, status: string, reviewedBy?: number): Promise<JobApplication> {\n    const [application] = await db\n      .update(jobApplications)\n      .set({ \n        status: status as any, \n        reviewedBy, \n        reviewedAt: new Date(), \n        updatedAt: new Date() \n      })\n      .where(eq(jobApplications.id, id))\n      .returning();\n    return application;\n  }\n\n  // Job Offer methods\n  async createJobOffer(offerData: InsertJobOffer): Promise<JobOffer> {\n    const [offer] = await db\n      .insert(jobOffers)\n      .values(offerData)\n      .returning();\n    return offer;\n  }\n\n  async getJobOffersByCompany(companyId: number): Promise<JobOffer[]> {\n    return await db\n      .select()\n      .from(jobOffers)\n      .innerJoin(jobApplications, eq(jobOffers.jobApplicationId, jobApplications.id))\n      .innerJoin(jobs, eq(jobApplications.jobId, jobs.id))\n      .where(eq(jobs.companyId, companyId))\n      .orderBy(desc(jobOffers.createdAt));\n  }\n\n  async updateJobOfferStatus(id: number, status: string): Promise<JobOffer> {\n    const [offer] = await db\n      .update(jobOffers)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(jobOffers.id, id))\n      .returning();\n    return offer;\n  }\n\n  // Family details methods\n  async getFamilyDetailsByProfile(profileId: number): Promise<FamilyDetails[]> {\n    return await db.select().from(familyDetails)\n      .where(eq(familyDetails.employeeProfileId, profileId))\n      .orderBy(familyDetails.memberName);\n  }\n\n  async createFamilyDetails(familyData: InsertFamilyDetails): Promise<FamilyDetails> {\n    const [family] = await db\n      .insert(familyDetails)\n      .values(familyData)\n      .returning();\n    return family;\n  }\n\n  async updateFamilyDetails(id: number, familyData: Partial<FamilyDetails>): Promise<FamilyDetails> {\n    const [family] = await db\n      .update(familyDetails)\n      .set({ ...familyData, updatedAt: new Date() })\n      .where(eq(familyDetails.id, id))\n      .returning();\n    return family;\n  }\n\n  async deleteFamilyDetails(id: number): Promise<void> {\n    await db.delete(familyDetails).where(eq(familyDetails.id, id));\n  }\n\n  // Leave Request methods implementation\n  async getLeaveRequest(id: number): Promise<LeaveRequest | undefined> {\n    const [request] = await db.select().from(leaveRequests).where(eq(leaveRequests.id, id));\n    return request || undefined;\n  }\n\n  async getLeaveRequestsByCompany(companyId: number): Promise<LeaveRequest[]> {\n    return await db.select().from(leaveRequests)\n      .where(eq(leaveRequests.companyId, companyId))\n      .orderBy(desc(leaveRequests.appliedAt));\n  }\n\n  async getLeaveRequestsByEmployee(employeeId: number): Promise<LeaveRequest[]> {\n    return await db.select().from(leaveRequests)\n      .where(eq(leaveRequests.employeeId, employeeId))\n      .orderBy(desc(leaveRequests.appliedAt));\n  }\n\n  async createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest> {\n    const [created] = await db.insert(leaveRequests).values(request).returning();\n    return created;\n  }\n\n  async updateLeaveRequest(id: number, updates: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const [updated] = await db.update(leaveRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async approveLeaveRequest(id: number, level: 1 | 2 | 3, approverId: number, comments?: string): Promise<LeaveRequest> {\n    const updateData: Partial<LeaveRequest> = { updatedAt: new Date() };\n    \n    if (level === 1) {\n      updateData.level1ApproverId = approverId;\n      updateData.level1ApprovedAt = new Date();\n      updateData.level1Comments = comments;\n    } else if (level === 2) {\n      updateData.level2ApproverId = approverId;\n      updateData.level2ApprovedAt = new Date();\n      updateData.level2Comments = comments;\n    } else if (level === 3) {\n      updateData.finalApproverId = approverId;\n      updateData.finalApprovedAt = new Date();\n      updateData.finalComments = comments;\n      updateData.status = 'approved';\n    }\n\n    const [updated] = await db.update(leaveRequests)\n      .set(updateData)\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async rejectLeaveRequest(id: number, rejectedById: number, reason: string): Promise<LeaveRequest> {\n    const [updated] = await db.update(leaveRequests)\n      .set({\n        status: 'rejected',\n        rejectedById,\n        rejectedAt: new Date(),\n        rejectionReason: reason,\n        updatedAt: new Date()\n      })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Advance Request methods implementation\n  async getAdvanceRequest(id: number): Promise<AdvanceRequest | undefined> {\n    const [request] = await db.select().from(advanceRequests).where(eq(advanceRequests.id, id));\n    return request || undefined;\n  }\n\n  async getAdvanceRequestsByCompany(companyId: number): Promise<AdvanceRequest[]> {\n    return await db.select().from(advanceRequests)\n      .where(eq(advanceRequests.companyId, companyId))\n      .orderBy(desc(advanceRequests.appliedAt));\n  }\n\n  async getAdvanceRequestsByEmployee(employeeId: number): Promise<AdvanceRequest[]> {\n    return await db.select().from(advanceRequests)\n      .where(eq(advanceRequests.employeeId, employeeId))\n      .orderBy(desc(advanceRequests.appliedAt));\n  }\n\n  async createAdvanceRequest(request: InsertAdvanceRequest): Promise<AdvanceRequest> {\n    const [created] = await db.insert(advanceRequests).values(request).returning();\n    return created;\n  }\n\n  async updateAdvanceRequest(id: number, updates: Partial<AdvanceRequest>): Promise<AdvanceRequest> {\n    const [updated] = await db.update(advanceRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(advanceRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async approveAdvanceRequest(id: number, level: 1 | 2 | 3, approverId: number, comments?: string): Promise<AdvanceRequest> {\n    const updateData: Partial<AdvanceRequest> = { updatedAt: new Date() };\n    \n    if (level === 1) {\n      updateData.level1ApproverId = approverId;\n      updateData.level1ApprovedAt = new Date();\n      updateData.level1Comments = comments;\n    } else if (level === 2) {\n      updateData.level2ApproverId = approverId;\n      updateData.level2ApprovedAt = new Date();\n      updateData.level2Comments = comments;\n    } else if (level === 3) {\n      updateData.finalApproverId = approverId;\n      updateData.finalApprovedAt = new Date();\n      updateData.finalComments = comments;\n      updateData.status = 'approved';\n    }\n\n    const [updated] = await db.update(advanceRequests)\n      .set(updateData)\n      .where(eq(advanceRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async rejectAdvanceRequest(id: number, rejectedById: number, reason: string): Promise<AdvanceRequest> {\n    const [updated] = await db.update(advanceRequests)\n      .set({\n        status: 'rejected',\n        rejectedById,\n        rejectedAt: new Date(),\n        rejectionReason: reason,\n        updatedAt: new Date()\n      })\n      .where(eq(advanceRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async markAdvancePaid(id: number, paidAmount: string, paymentMethod: string, reference?: string): Promise<AdvanceRequest> {\n    const [updated] = await db.update(advanceRequests)\n      .set({\n        status: 'paid',\n        paidAmount,\n        paidAt: new Date(),\n        paymentMethod,\n        paymentReference: reference,\n        updatedAt: new Date()\n      })\n      .where(eq(advanceRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Approval Workflow methods implementation\n  async getApprovalWorkflow(companyId: number, requestType: string): Promise<ApprovalWorkflow | undefined> {\n    const [workflow] = await db.select().from(approvalWorkflows)\n      .where(and(\n        eq(approvalWorkflows.companyId, companyId),\n        eq(approvalWorkflows.requestType, requestType),\n        eq(approvalWorkflows.isActive, true)\n      ));\n    return workflow || undefined;\n  }\n\n  async createApprovalWorkflow(workflow: InsertApprovalWorkflow): Promise<ApprovalWorkflow> {\n    const [created] = await db.insert(approvalWorkflows).values(workflow).returning();\n    return created;\n  }\n\n  async updateApprovalWorkflow(id: number, updates: Partial<ApprovalWorkflow>): Promise<ApprovalWorkflow> {\n    const [updated] = await db.update(approvalWorkflows)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(approvalWorkflows.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Enhanced Permission Management methods implementation\n  async getAllPermissions(): Promise<Permission[]> {\n    return await db.select().from(permissions).where(eq(permissions.isActive, true)).orderBy(permissions.category, permissions.name);\n  }\n\n  async getPermissionsByCategory(category: string): Promise<Permission[]> {\n    return await db.select().from(permissions)\n      .where(and(eq(permissions.category, category), eq(permissions.isActive, true)))\n      .orderBy(permissions.name);\n  }\n\n  async getPermissionsByModule(module: string): Promise<Permission[]> {\n    return await db.select().from(permissions)\n      .where(and(eq(permissions.module, module), eq(permissions.isActive, true)))\n      .orderBy(permissions.name);\n  }\n\n  async createPermission(permission: InsertPermission): Promise<Permission> {\n    const [created] = await db.insert(permissions).values(permission).returning();\n    return created;\n  }\n\n  async updatePermission(id: number, permission: Partial<Permission>): Promise<Permission> {\n    const [updated] = await db.update(permissions)\n      .set(permission)\n      .where(eq(permissions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePermission(id: number): Promise<void> {\n    await db.update(permissions)\n      .set({ isActive: false })\n      .where(eq(permissions.id, id));\n  }\n\n  // User Permission methods implementation\n  async getUserPermissions(userId: number, companyId: number): Promise<UserPermission[]> {\n    return await db.select()\n      .from(userPermissions)\n      .where(and(\n        eq(userPermissions.userId, userId),\n        eq(userPermissions.companyId, companyId),\n        eq(userPermissions.isActive, true)\n      ))\n      .orderBy(userPermissions.grantedAt);\n  }\n\n  async hasUserPermission(userId: number, permissionName: string, companyId: number): Promise<boolean> {\n    const result = await db.select({ count: count() })\n      .from(userPermissions)\n      .innerJoin(permissions, eq(userPermissions.permissionId, permissions.id))\n      .where(and(\n        eq(userPermissions.userId, userId),\n        eq(userPermissions.companyId, companyId),\n        eq(permissions.name, permissionName),\n        eq(userPermissions.isActive, true),\n        eq(permissions.isActive, true)\n      ));\n    return result[0].count > 0;\n  }\n\n  async grantUserPermission(userPermission: InsertUserPermission): Promise<UserPermission> {\n    const [granted] = await db.insert(userPermissions).values({ ...userPermission, isActive: true }).returning();\n    return granted;\n  }\n\n  async revokeUserPermission(userId: number, permissionId: number, companyId: number): Promise<void> {\n    await db.update(userPermissions)\n      .set({ isActive: false })\n      .where(and(\n        eq(userPermissions.userId, userId),\n        eq(userPermissions.permissionId, permissionId),\n        eq(userPermissions.companyId, companyId)\n      ));\n  }\n\n  async getUsersWithPermission(permissionName: string, companyId: number): Promise<User[]> {\n    return await db.select({\n      id: users.id,\n      username: users.username,\n      email: users.email,\n      role: users.role,\n      companyId: users.companyId,\n      isActive: users.isActive,\n      createdAt: users.createdAt,\n      updatedAt: users.updatedAt\n    })\n      .from(users)\n      .innerJoin(userPermissions, eq(users.id, userPermissions.userId))\n      .innerJoin(permissions, eq(userPermissions.permissionId, permissions.id))\n      .where(and(\n        eq(users.companyId, companyId),\n        eq(permissions.name, permissionName),\n        eq(userPermissions.isActive, true),\n        eq(permissions.isActive, true),\n        eq(users.isActive, true)\n      ));\n  }\n\n  // Enhanced Permission Request methods implementation\n  async getPermissionRequestsEnhanced(companyId: number): Promise<PermissionRequest[]> {\n    return await db.select().from(permissionRequests)\n      .where(eq(permissionRequests.companyId, companyId))\n      .orderBy(desc(permissionRequests.createdAt));\n  }\n\n  async getPermissionRequestsByUserEnhanced(userId: number): Promise<PermissionRequest[]> {\n    return await db.select().from(permissionRequests)\n      .where(eq(permissionRequests.userId, userId))\n      .orderBy(desc(permissionRequests.createdAt));\n  }\n\n  async getPendingPermissionRequests(companyId: number): Promise<PermissionRequest[]> {\n    return await db.select().from(permissionRequests)\n      .where(and(\n        eq(permissionRequests.companyId, companyId),\n        eq(permissionRequests.status, 'pending')\n      ))\n      .orderBy(desc(permissionRequests.createdAt));\n  }\n\n  async createPermissionRequestEnhanced(request: InsertPermissionRequest): Promise<PermissionRequest> {\n    const [created] = await db.insert(permissionRequests).values(request).returning();\n    return created;\n  }\n\n  async updatePermissionRequestEnhanced(id: number, request: Partial<PermissionRequest>): Promise<PermissionRequest> {\n    const [updated] = await db.update(permissionRequests)\n      .set({ ...request, updatedAt: new Date() })\n      .where(eq(permissionRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async approvePermissionRequestLevel(id: number, reviewerId: number, level: 'level1' | 'level2' | 'final', comments?: string): Promise<PermissionRequest> {\n    let updateData: any = { updatedAt: new Date() };\n    \n    if (level === 'level1') {\n      updateData.level1ReviewerId = reviewerId;\n      updateData.level1ReviewedAt = new Date();\n      updateData.level1Comments = comments;\n    } else if (level === 'level2') {\n      updateData.level2ReviewerId = reviewerId;\n      updateData.level2ReviewedAt = new Date();\n      updateData.level2Comments = comments;\n    } else if (level === 'final') {\n      updateData.finalReviewerId = reviewerId;\n      updateData.finalReviewedAt = new Date();\n      updateData.finalComments = comments;\n      updateData.status = 'approved';\n    }\n\n    const [updated] = await db.update(permissionRequests)\n      .set(updateData)\n      .where(eq(permissionRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  async rejectPermissionRequestLevel(id: number, reviewerId: number, level: 'level1' | 'level2' | 'final', comments?: string): Promise<PermissionRequest> {\n    let updateData: any = { \n      status: 'rejected',\n      updatedAt: new Date()\n    };\n    \n    if (level === 'level1') {\n      updateData.level1ReviewerId = reviewerId;\n      updateData.level1ReviewedAt = new Date();\n      updateData.level1Comments = comments;\n    } else if (level === 'level2') {\n      updateData.level2ReviewerId = reviewerId;\n      updateData.level2ReviewedAt = new Date();\n      updateData.level2Comments = comments;\n    } else if (level === 'final') {\n      updateData.finalReviewerId = reviewerId;\n      updateData.finalReviewedAt = new Date();\n      updateData.finalComments = comments;\n    }\n\n    const [updated] = await db.update(permissionRequests)\n      .set(updateData)\n      .where(eq(permissionRequests.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Role Permission methods implementation\n  async getRolePermissionsEnhanced(role: string, companyId?: number): Promise<RolePermission[]> {\n    if (companyId) {\n      return await db.select().from(rolePermissions)\n        .where(and(\n          eq(rolePermissions.role, role),\n          eq(rolePermissions.companyId, companyId)\n        ));\n    }\n    return await db.select().from(rolePermissions)\n      .where(eq(rolePermissions.role, role));\n  }\n\n  async assignRolePermission(rolePermission: InsertRolePermission): Promise<RolePermission> {\n    const [assigned] = await db.insert(rolePermissions).values(rolePermission).returning();\n    return assigned;\n  }\n\n  async removeRolePermission(role: string, permissionId: number, companyId?: number): Promise<void> {\n    if (companyId) {\n      await db.delete(rolePermissions)\n        .where(and(\n          eq(rolePermissions.role, role),\n          eq(rolePermissions.permissionId, permissionId),\n          eq(rolePermissions.companyId, companyId)\n        ));\n    } else {\n      await db.delete(rolePermissions)\n        .where(and(\n          eq(rolePermissions.role, role),\n          eq(rolePermissions.permissionId, permissionId)\n        ));\n    }\n  }\n\n  // Permission Template methods implementation\n  async getPermissionTemplates(role?: string): Promise<PermissionTemplate[]> {\n    if (role) {\n      return await db.select().from(permissionTemplates)\n        .where(eq(permissionTemplates.role, role))\n        .orderBy(permissionTemplates.name);\n    }\n    return await db.select().from(permissionTemplates).orderBy(permissionTemplates.name);\n  }\n\n  async createPermissionTemplate(template: InsertPermissionTemplate): Promise<PermissionTemplate> {\n    const [created] = await db.insert(permissionTemplates).values(template).returning();\n    return created;\n  }\n\n  async updatePermissionTemplate(id: number, template: Partial<PermissionTemplate>): Promise<PermissionTemplate> {\n    const [updated] = await db.update(permissionTemplates)\n      .set({ ...template, updatedAt: new Date() })\n      .where(eq(permissionTemplates.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePermissionTemplate(id: number): Promise<void> {\n    await db.delete(permissionTemplates).where(eq(permissionTemplates.id, id));\n  }\n\n  async applyPermissionTemplate(templateId: number, userId: number, companyId: number, grantedBy: number): Promise<UserPermission[]> {\n    const template = await db.select().from(permissionTemplates).where(eq(permissionTemplates.id, templateId));\n    if (!template[0]) {\n      throw new Error('Permission template not found');\n    }\n\n    const permissionIds = JSON.parse(template[0].permissionIds);\n    const userPermissions: InsertUserPermission[] = permissionIds.map((permissionId: number) => ({\n      userId,\n      permissionId,\n      companyId,\n      grantedBy,\n      reason: `Applied from template: ${template[0].name}`\n    }));\n\n    const granted = await db.insert(userPermissions).values(userPermissions).returning();\n    return granted;\n  }\n\n  // Company Settings methods implementation\n  // Biometric Machine methods\n  async getBiometricMachinesByCompany(companyId: number): Promise<any[]> {\n    return await db.select().from(biometricMachines)\n      .where(eq(biometricMachines.companyId, companyId))\n      .orderBy(biometricMachines.serialNumber);\n  }\n\n  async createBiometricMachine(machine: any): Promise<any> {\n    const [created] = await db.insert(biometricMachines).values(machine).returning();\n    return created;\n  }\n\n  async updateBiometricMachine(id: number, machine: any): Promise<any> {\n    const [updated] = await db.update(biometricMachines)\n      .set({ ...machine, updatedAt: new Date() })\n      .where(eq(biometricMachines.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBiometricMachine(id: number): Promise<void> {\n    await db.delete(biometricMachines).where(eq(biometricMachines.id, id));\n  }\n\n  // Holiday methods\n  async getHolidaysByCompany(companyId: number): Promise<any[]> {\n    return await db.select().from(holidays)\n      .where(eq(holidays.companyId, companyId))\n      .orderBy(holidays.date);\n  }\n\n  async createHoliday(holiday: any): Promise<any> {\n    const [created] = await db.insert(holidays).values(holiday).returning();\n    return created;\n  }\n\n  async updateHoliday(id: number, holiday: any): Promise<any> {\n    const [updated] = await db.update(holidays)\n      .set({ ...holiday, updatedAt: new Date() })\n      .where(eq(holidays.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteHoliday(id: number): Promise<void> {\n    await db.delete(holidays).where(eq(holidays.id, id));\n  }\n\n  // Leave Policy methods\n  async getLeavePoliciesByCompany(companyId: number): Promise<any[]> {\n    return await db.select().from(leavePolicies)\n      .where(eq(leavePolicies.companyId, companyId))\n      .orderBy(leavePolicies.name);\n  }\n\n  async createLeavePolicy(policy: any): Promise<any> {\n    const [created] = await db.insert(leavePolicies).values(policy).returning();\n    return created;\n  }\n\n  async updateLeavePolicy(id: number, policy: any): Promise<any> {\n    const [updated] = await db.update(leavePolicies)\n      .set({ ...policy, updatedAt: new Date() })\n      .where(eq(leavePolicies.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteLeavePolicy(id: number): Promise<void> {\n    await db.delete(leavePolicies).where(eq(leavePolicies.id, id));\n  }\n\n  // Designation methods\n  async getDesignationsByCompany(companyId: number): Promise<any[]> {\n    return await db.select().from(designations)\n      .where(eq(designations.companyId, companyId))\n      .orderBy(designations.title);\n  }\n\n  async createDesignation(designation: any): Promise<any> {\n    const [created] = await db.insert(designations).values(designation).returning();\n    return created;\n  }\n\n  async updateDesignation(id: number, designation: any): Promise<any> {\n    const [updated] = await db.update(designations)\n      .set({ ...designation, updatedAt: new Date() })\n      .where(eq(designations.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteDesignation(id: number): Promise<void> {\n    await db.delete(designations).where(eq(designations.id, id));\n  }\n\n  // Branch methods\n  async getBranchesByCompany(companyId: number): Promise<any[]> {\n    return await db.select().from(branches)\n      .where(eq(branches.companyId, companyId))\n      .orderBy(branches.name);\n  }\n\n  async createBranch(branch: any): Promise<any> {\n    const [created] = await db.insert(branches).values(branch).returning();\n    return created;\n  }\n\n  async updateBranch(id: number, branch: any): Promise<any> {\n    const [updated] = await db.update(branches)\n      .set({ ...branch, updatedAt: new Date() })\n      .where(eq(branches.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteBranch(id: number): Promise<void> {\n    await db.delete(branches).where(eq(branches.id, id));\n  }\n\n  // Location methods  \n  async getLocationsByCompany(companyId: number): Promise<any[]> {\n    return await db.select().from(locations)\n      .where(eq(locations.companyId, companyId))\n      .orderBy(locations.name);\n  }\n\n  async createLocation(location: any): Promise<any> {\n    const [created] = await db.insert(locations).values(location).returning();\n    return created;\n  }\n\n  async updateLocation(id: number, location: any): Promise<any> {\n    const [updated] = await db.update(locations)\n      .set({ ...location, updatedAt: new Date() })\n      .where(eq(locations.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteLocation(id: number): Promise<void> {\n    await db.delete(locations).where(eq(locations.id, id));\n  }\n\n  // Cost Center methods\n  async getCostCentersByCompany(companyId: number): Promise<any[]> {\n    return await db.select().from(costCenters)\n      .where(eq(costCenters.companyId, companyId))\n      .orderBy(costCenters.code);\n  }\n\n  async createCostCenter(costCenter: any): Promise<any> {\n    const [created] = await db.insert(costCenters).values(costCenter).returning();\n    return created;\n  }\n\n  async updateCostCenter(id: number, costCenter: any): Promise<any> {\n    const [updated] = await db.update(costCenters)\n      .set({ ...costCenter, updatedAt: new Date() })\n      .where(eq(costCenters.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCostCenter(id: number): Promise<void> {\n    await db.delete(costCenters).where(eq(costCenters.id, id));\n  }\n  // Client Compliances Management\n  async getClientsByCompany(companyId: number): Promise<Client[]> {\n    return await db\n      .select()\n      .from(clients)\n      .where(eq(clients.companyId, companyId))\n      .orderBy(clients.projectName);\n  }\n\n  async createClient(clientData: InsertClient): Promise<Client> {\n    const [client] = await db\n      .insert(clients)\n      .values(clientData)\n      .returning();\n    return client;\n  }\n\n  async updateClient(id: number, clientData: Partial<Client>): Promise<Client> {\n    const [client] = await db\n      .update(clients)\n      .set({ ...clientData, updatedAt: new Date() })\n      .where(eq(clients.id, id))\n      .returning();\n    return client;\n  }\n\n  async deleteClient(id: number): Promise<void> {\n    await db.delete(clients).where(eq(clients.id, id));\n  }\n\n  async getComplianceSetupsByCompany(companyId: number): Promise<any[]> {\n    return await db\n      .select({\n        id: complianceSetups.id,\n        companyId: complianceSetups.companyId,\n        employeeId: complianceSetups.employeeId,\n        basicSalary: complianceSetups.basicSalary,\n        grossSalary: complianceSetups.grossSalary,\n        differenceAdjustment: complianceSetups.differenceAdjustment,\n        pfType: complianceSetups.pfType,\n        esicType: complianceSetups.esicType,\n        bonusType: complianceSetups.bonusType,\n        createdAt: complianceSetups.createdAt,\n        updatedAt: complianceSetups.updatedAt,\n        employee: employees\n      })\n      .from(complianceSetups)\n      .leftJoin(employees, eq(complianceSetups.employeeId, employees.id))\n      .where(eq(complianceSetups.companyId, companyId));\n  }\n\n  async createComplianceSetup(setupData: InsertComplianceSetup): Promise<ComplianceSetup> {\n    const [setup] = await db\n      .insert(complianceSetups)\n      .values(setupData)\n      .returning();\n    return setup;\n  }\n\n  async updateComplianceSetup(id: number, setupData: Partial<ComplianceSetup>): Promise<ComplianceSetup> {\n    const [setup] = await db\n      .update(complianceSetups)\n      .set({ ...setupData, updatedAt: new Date() })\n      .where(eq(complianceSetups.id, id))\n      .returning();\n    return setup;\n  }\n\n  async deleteComplianceSetup(id: number): Promise<void> {\n    await db.delete(complianceSetups).where(eq(complianceSetups.id, id));\n  }\n\n  async getCompliancesDataByProjectAndMonth(companyId: number, projectId: number, month: string): Promise<any[]> {\n    return await db\n      .select({\n        id: compliancesData.id,\n        companyId: compliancesData.companyId,\n        projectId: compliancesData.projectId,\n        employeeId: compliancesData.employeeId,\n        month: compliancesData.month,\n        actualPayable: compliancesData.actualPayable,\n        compliancesGross: compliancesData.compliancesGross,\n        compliancesAttendance: compliancesData.compliancesAttendance,\n        compliancesOT: compliancesData.compliancesOT,\n        compliancesGrossEarn: compliancesData.compliancesGrossEarn,\n        pfDeduction: compliancesData.pfDeduction,\n        esicDeduction: compliancesData.esicDeduction,\n        netPayableAmount: compliancesData.netPayableAmount,\n        differenceAmount: compliancesData.differenceAmount,\n        createdAt: compliancesData.createdAt,\n        updatedAt: compliancesData.updatedAt,\n        employee: employees\n      })\n      .from(compliancesData)\n      .leftJoin(employees, eq(compliancesData.employeeId, employees.id))\n      .where(\n        and(\n          eq(compliancesData.companyId, companyId),\n          eq(compliancesData.projectId, projectId),\n          eq(compliancesData.month, month)\n        )\n      );\n  }\n\n  async getCompliancesDataByCompany(companyId: number): Promise<CompliancesData[]> {\n    return await db\n      .select()\n      .from(compliancesData)\n      .where(eq(compliancesData.companyId, companyId))\n      .orderBy(compliancesData.month);\n  }\n\n  async createCompliancesData(complianceData: InsertCompliancesData): Promise<CompliancesData> {\n    const [data] = await db\n      .insert(compliancesData)\n      .values(complianceData)\n      .returning();\n    return data;\n  }\n\n  async updateCompliancesData(id: number, complianceData: Partial<CompliancesData>): Promise<CompliancesData> {\n    const [data] = await db\n      .update(compliancesData)\n      .set({ ...complianceData, updatedAt: new Date() })\n      .where(eq(compliancesData.id, id))\n      .returning();\n    return data;\n  }\n\n  async deleteCompliancesData(id: number): Promise<void> {\n    await db.delete(compliancesData).where(eq(compliancesData.id, id));\n  }\n\n  // Auto-generate compliance data based on assignments and setups\n  async autoGenerateComplianceData(companyId: number, employeeId: number, projectId: number): Promise<void> {\n    const currentDate = new Date();\n    const currentMonth = currentDate.toISOString().slice(0, 7); // YYYY-MM format\n\n    // Check if compliance data already exists for this combination\n    const existingData = await db\n      .select()\n      .from(compliancesData)\n      .where(\n        and(\n          eq(compliancesData.companyId, companyId),\n          eq(compliancesData.employeeId, employeeId),\n          eq(compliancesData.projectId, projectId),\n          eq(compliancesData.month, currentMonth)\n        )\n      );\n\n    if (existingData.length > 0) {\n      return; // Data already exists, no need to regenerate\n    }\n\n    // Get employee's payroll setup for realistic calculations\n    const payrollSetup = await db\n      .select()\n      .from(employeePayroll)\n      .where(eq(employeePayroll.employeeId, employeeId))\n      .limit(1);\n\n    // Generate realistic compliance data based on payroll setup\n    const grossValue = payrollSetup[0]?.grossValue ? parseFloat(payrollSetup[0].grossValue) : 35000;\n    const basicSalary = payrollSetup[0]?.earningHead1 ? parseFloat(payrollSetup[0].earningHead1) : grossValue * 0.5;\n    \n    // Calculate realistic values\n    const actualPayable = grossValue + (Math.random() * 5000 - 2500); // ±2500 variance\n    const compliancesGross = grossValue * (0.95 + Math.random() * 0.1); // 95-105% of gross\n    const compliancesAttendance = Math.floor(Math.random() * 8) + 20; // 20-27 days\n    const compliancesOT = Math.floor(Math.random() * 20); // 0-20 hours\n    const compliancesGrossEarn = compliancesGross + (compliancesOT * 200); // OT at 200/hour\n    \n    // Calculate deductions based on payroll setup\n    const pfDeduction = payrollSetup[0]?.epfEnabled ? basicSalary * 0.12 : 0;\n    const esicDeduction = payrollSetup[0]?.esicEnabled ? grossValue * 0.0075 : 0;\n    const netPayableAmount = compliancesGrossEarn - pfDeduction - esicDeduction;\n    const differenceAmount = actualPayable - netPayableAmount;\n\n    // Create compliance data record\n    await db.insert(compliancesData).values({\n      companyId,\n      projectId,\n      employeeId,\n      month: currentMonth,\n      actualPayable: actualPayable.toFixed(2),\n      compliancesGross: compliancesGross.toFixed(2),\n      compliancesAttendance,\n      compliancesOT,\n      compliancesGrossEarn: compliancesGrossEarn.toFixed(2),\n      pfDeduction: pfDeduction.toFixed(2),\n      esicDeduction: esicDeduction.toFixed(2),\n      netPayableAmount: netPayableAmount.toFixed(2),\n      differenceAmount: differenceAmount.toFixed(2),\n    });\n  }\n\n  // Generate compliance data for all assigned employees in a project\n  async generateComplianceDataForProject(companyId: number, projectId: number): Promise<void> {\n    // Get all employees assigned to this project\n    const assignments = await db\n      .select()\n      .from(employeeAssignments)\n      .where(\n        and(\n          eq(employeeAssignments.companyId, companyId),\n          eq(employeeAssignments.projectId, projectId),\n          isNull(employeeAssignments.deAssignDate) // Only active assignments\n        )\n      );\n\n    // Generate compliance data for each assigned employee\n    for (const assignment of assignments) {\n      await this.autoGenerateComplianceData(companyId, assignment.employeeId, projectId);\n    }\n  }\n\n  // Employee Assignment methods\n  async getEmployeeAssignmentsByCompany(companyId: number): Promise<EmployeeAssignment[]> {\n    return await db\n      .select({\n        id: employeeAssignments.id,\n        companyId: employeeAssignments.companyId,\n        employeeId: employeeAssignments.employeeId,\n        designationId: employeeAssignments.designationId,\n        assignDate: employeeAssignments.assignDate,\n        deassignDate: employeeAssignments.deassignDate,\n        address: employeeAssignments.address,\n        createdAt: employeeAssignments.createdAt,\n        updatedAt: employeeAssignments.updatedAt,\n        employee: {\n          id: employees.id,\n          firstName: employees.firstName,\n          lastName: employees.lastName,\n          address: employees.address,\n        },\n        designation: {\n          id: designations.id,\n          title: designations.title,\n        },\n      })\n      .from(employeeAssignments)\n      .leftJoin(employees, eq(employeeAssignments.employeeId, employees.id))\n      .leftJoin(designations, eq(employeeAssignments.designationId, designations.id))\n      .where(eq(employeeAssignments.companyId, companyId))\n      .orderBy(employeeAssignments.createdAt);\n  }\n\n  async createEmployeeAssignment(assignmentData: InsertEmployeeAssignment): Promise<EmployeeAssignment> {\n    const [assignment] = await db\n      .insert(employeeAssignments)\n      .values(assignmentData)\n      .returning();\n    return assignment;\n  }\n\n  async getEmployeeAssignmentsByEmployee(employeeId: number): Promise<EmployeeAssignment[]> {\n    return await db\n      .select()\n      .from(employeeAssignments)\n      .where(eq(employeeAssignments.employeeId, employeeId));\n  }\n\n  async updateEmployeeAssignment(id: number, assignmentData: Partial<EmployeeAssignment>): Promise<EmployeeAssignment> {\n    const [assignment] = await db\n      .update(employeeAssignments)\n      .set({ ...assignmentData, updatedAt: new Date() })\n      .where(eq(employeeAssignments.id, id))\n      .returning();\n    return assignment;\n  }\n\n  async deleteEmployeeAssignment(id: number): Promise<void> {\n    await db.delete(employeeAssignments).where(eq(employeeAssignments.id, id));\n  }\n\n  // Aadhaar verification methods implementation\n  async checkEmployeeByAadhaar(aadhaarNo: string): Promise<Employee | null> {\n    const result = await db.select()\n      .from(employees)\n      .innerJoin(kycDetails, eq(employees.id, kycDetails.employeeProfileId))\n      .where(eq(kycDetails.aadharNo, aadhaarNo))\n      .limit(1);\n    \n    return result.length > 0 ? result[0].employees : null;\n  }\n\n  async getEmployeeStatusByAadhaar(aadhaarNo: string): Promise<{\n    isEmployeeInCompany: boolean;\n    employeeData?: Employee;\n    companyData?: Company;\n  }> {\n    console.log('Checking employee status for Aadhaar:', aadhaarNo);\n    \n    // First check if the KYC record exists and get the employee profile\n    const kycResult = await db.select({\n      kycDetails: kycDetails,\n      employeeProfile: employeeProfiles\n    })\n      .from(kycDetails)\n      .innerJoin(employeeProfiles, eq(kycDetails.employeeProfileId, employeeProfiles.id))\n      .where(eq(kycDetails.aadharNo, aadhaarNo))\n      .limit(1);\n    \n    console.log('KYC result:', kycResult);\n    \n    if (kycResult.length === 0) {\n      console.log('No KYC record found for Aadhaar:', aadhaarNo);\n      return { isEmployeeInCompany: false };\n    }\n    \n    const employeeProfile = kycResult[0].employeeProfile;\n    \n    // Now check if this user has an employee record in any company\n    const employeeResult = await db.select({\n      employee: employees,\n      company: companies\n    })\n      .from(employees)\n      .innerJoin(companies, eq(employees.companyId, companies.id))\n      .where(and(\n        eq(employees.userId, employeeProfile.userId),\n        eq(employees.status, 'active')\n      ))\n      .limit(1);\n    \n    console.log('Employee result:', employeeResult);\n    \n    if (employeeResult.length > 0) {\n      console.log('Employee found in company:', employeeResult[0].company.name);\n      return {\n        isEmployeeInCompany: true,\n        employeeData: employeeResult[0].employee,\n        companyData: employeeResult[0].company\n      };\n    }\n    \n    console.log('Employee not found in any company');\n    return {\n      isEmployeeInCompany: false\n    };\n  }\n\n  // Employee portal methods implementation\n  async getEmployeeProfileByAadhaar(aadhaarNo: string): Promise<EmployeeProfile | undefined> {\n    const result = await db.select({\n      employeeProfile: employeeProfiles\n    })\n      .from(kycDetails)\n      .innerJoin(employeeProfiles, eq(kycDetails.employeeProfileId, employeeProfiles.id))\n      .where(eq(kycDetails.aadharNo, aadhaarNo))\n      .limit(1);\n    \n    return result.length > 0 ? result[0].employeeProfile : undefined;\n  }\n\n  // Salary Component methods implementation\n  async getSalaryComponents(): Promise<SalaryComponent[]> {\n    return await db.select().from(salaryComponents).orderBy(salaryComponents.componentKey);\n  }\n\n  async createSalaryComponent(component: InsertSalaryComponent): Promise<SalaryComponent> {\n    const [newComponent] = await db.insert(salaryComponents).values(component).returning();\n    return newComponent;\n  }\n\n  async updateSalaryComponent(id: number, component: Partial<SalaryComponent>): Promise<SalaryComponent> {\n    const [updatedComponent] = await db.update(salaryComponents)\n      .set(component)\n      .where(eq(salaryComponents.id, id))\n      .returning();\n    return updatedComponent;\n  }\n\n  async deleteSalaryComponent(id: number): Promise<void> {\n    await db.delete(salaryComponents).where(eq(salaryComponents.id, id));\n  }\n\n  // Company Salary Component Configuration methods implementation\n  async getCompanySalaryComponentConfig(companyId: number, entryMode?: string): Promise<CompanySalaryComponentConfig[]> {\n    const query = db.select().from(companySalaryComponentConfig)\n      .where(and(\n        eq(companySalaryComponentConfig.companyId, companyId),\n        eq(companySalaryComponentConfig.isActive, true),\n        entryMode ? eq(companySalaryComponentConfig.entryMode, entryMode) : undefined\n      ))\n      .orderBy(companySalaryComponentConfig.priority, companySalaryComponentConfig.componentKey);\n\n    return await query;\n  }\n\n  async createCompanySalaryComponentConfig(config: InsertCompanySalaryComponentConfig): Promise<CompanySalaryComponentConfig> {\n    const [newConfig] = await db.insert(companySalaryComponentConfig).values(config).returning();\n    return newConfig;\n  }\n\n  async updateCompanySalaryComponentConfig(id: number, config: Partial<CompanySalaryComponentConfig>): Promise<CompanySalaryComponentConfig> {\n    const [updatedConfig] = await db.update(companySalaryComponentConfig)\n      .set({\n        ...config,\n        updatedAt: new Date()\n      })\n      .where(eq(companySalaryComponentConfig.id, id))\n      .returning();\n    return updatedConfig;\n  }\n\n  async deleteCompanySalaryComponentConfig(id: number): Promise<void> {\n    await db.delete(companySalaryComponentConfig).where(eq(companySalaryComponentConfig.id, id));\n  }\n\n  async upsertCompanySalaryComponentConfig(config: InsertCompanySalaryComponentConfig): Promise<CompanySalaryComponentConfig> {\n    // Check if config already exists\n    const existing = await db.select()\n      .from(companySalaryComponentConfig)\n      .where(and(\n        eq(companySalaryComponentConfig.companyId, config.companyId),\n        eq(companySalaryComponentConfig.componentKey, config.componentKey),\n        eq(companySalaryComponentConfig.entryMode, config.entryMode)\n      ))\n      .limit(1);\n\n    if (existing.length > 0) {\n      // Update existing\n      return await this.updateCompanySalaryComponentConfig(existing[0].id, config);\n    } else {\n      // Create new\n      return await this.createCompanySalaryComponentConfig(config);\n    }\n  }\n\n  // Employee Salary Component Values methods implementation\n  async getEmployeeSalaryComponentValues(structureId: number): Promise<EmployeeSalaryComponentValues[]> {\n    return await db.select()\n      .from(employeeSalaryComponentValues)\n      .where(eq(employeeSalaryComponentValues.structureId, structureId))\n      .orderBy(employeeSalaryComponentValues.componentKey);\n  }\n\n  async createEmployeeSalaryComponentValues(values: InsertEmployeeSalaryComponentValues): Promise<EmployeeSalaryComponentValues> {\n    const [newValues] = await db.insert(employeeSalaryComponentValues).values(values).returning();\n    return newValues;\n  }\n\n  async updateEmployeeSalaryComponentValues(id: number, values: Partial<EmployeeSalaryComponentValues>): Promise<EmployeeSalaryComponentValues> {\n    const [updatedValues] = await db.update(employeeSalaryComponentValues)\n      .set(values)\n      .where(eq(employeeSalaryComponentValues.id, id))\n      .returning();\n    return updatedValues;\n  }\n\n  async deleteEmployeeSalaryComponentValues(id: number): Promise<void> {\n    await db.delete(employeeSalaryComponentValues).where(eq(employeeSalaryComponentValues.id, id));\n  }\n\n  async bulkCreateEmployeeSalaryComponentValues(values: InsertEmployeeSalaryComponentValues[]): Promise<EmployeeSalaryComponentValues[]> {\n    if (values.length === 0) return [];\n    return await db.insert(employeeSalaryComponentValues).values(values).returning();\n  }\n\n  async deleteEmployeeSalaryComponentValuesByStructure(structureId: number): Promise<void> {\n    await db.delete(employeeSalaryComponentValues)\n      .where(eq(employeeSalaryComponentValues.structureId, structureId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":118931},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, date, time, pgEnum, unique } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['system_admin', 'admin', 'employee']);\nexport const employeeStatusEnum = pgEnum('employee_status', ['active', 'inactive', 'probation', 'terminated']);\nexport const jobStatusEnum = pgEnum('job_status', ['draft', 'active', 'closed', 'cancelled']);\nexport const applicationStatusEnum = pgEnum('application_status', ['pending', 'reviewing', 'interviewed', 'offered', 'hired', 'rejected']);\nexport const permissionRequestStatusEnum = pgEnum('permission_request_status', ['pending', 'approved', 'rejected']);\nexport const permissionTypeEnum = pgEnum('permission_type', [\n  // Employee Management\n  'employee_create', 'employee_edit', 'employee_delete', 'employee_view', 'employee_profile_edit',\n  // Job Management  \n  'job_create', 'job_edit', 'job_delete', 'job_view', 'job_application_review',\n  // Department Management\n  'department_create', 'department_edit', 'department_delete', 'department_view',\n  // Attendance Management\n  'attendance_view_all', 'attendance_edit', 'attendance_delete', 'attendance_reports',\n  // Payroll Management\n  'payroll_view', 'payroll_edit', 'payroll_generate', 'payroll_finalize', 'payroll_reports',\n  // Leave Management\n  'leave_view_all', 'leave_approve_level1', 'leave_approve_level2', 'leave_approve_final', 'leave_reject',\n  // Advance Request Management\n  'advance_view_all', 'advance_approve_level1', 'advance_approve_level2', 'advance_approve_final', 'advance_reject', 'advance_mark_paid',\n  // Recruitment Management\n  'recruitment_view', 'recruitment_manage', 'interview_schedule', 'job_offer_create',\n  // Company Settings\n  'company_settings', 'company_profile_edit', 'company_approval',\n  // User Management\n  'user_create', 'user_edit', 'user_delete', 'user_view', 'user_role_change',\n  // System Administration\n  'system_admin_access', 'permission_manage', 'audit_logs_view'\n]);\nexport const companyStatusEnum = pgEnum('company_status', ['pending', 'approved', 'rejected', 'suspended']);\nexport const companyTypeEnum = pgEnum('company_type', ['proprietorship', 'partnership', 'private_limited', 'limited']);\nexport const leaveTypeEnum = pgEnum('leave_type', ['casual', 'sick', 'earned', 'maternity', 'paternity', 'comp_off', 'lwp']);\nexport const leaveStatusEnum = pgEnum('leave_status', ['pending', 'approved', 'rejected', 'cancelled']);\nexport const advanceStatusEnum = pgEnum('advance_status', ['pending', 'approved', 'rejected', 'cancelled', 'paid']);\nexport const approvalLevelEnum = pgEnum('approval_level', ['level_1', 'level_2', 'level_3', 'final']);\nexport const salaryEntryModeEnum = pgEnum('salary_entry_mode', ['gross', 'ctc', 'earning_heads']);\n\n// Companies table\nexport const companies = pgTable(\"companies\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  type: companyTypeEnum(\"type\"),\n  gstPan: text(\"gst_pan\"),\n  pfNo: text(\"pf_no\"),\n  esicNo: text(\"esic_no\"),\n  cinNo: text(\"cin_no\"),\n  authorizedPersonName: text(\"authorized_person_name\"),\n  authorizedPersonContact: text(\"authorized_person_contact\"),\n  website: text(\"website\"),\n  industry: text(\"industry\"),\n  size: text(\"size\"),\n  logo: text(\"logo\"),\n  status: companyStatusEnum(\"status\").default('pending').notNull(),\n  subscriptionPlan: text(\"subscription_plan\").default('basic'),\n  profileComplete: boolean(\"profile_complete\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('employee'),\n  companyId: integer(\"company_id\").references(() => companies.id),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Departments table\nexport const departments = pgTable(\"departments\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  managerId: integer(\"manager_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Employees table\nexport const employees = pgTable(\"employees\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  employeeId: text(\"employee_id\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  departmentId: integer(\"department_id\").references(() => departments.id),\n  position: text(\"position\"),\n  salary: decimal(\"salary\"),\n  hireDate: timestamp(\"hire_date\"),\n  status: employeeStatusEnum(\"status\").default('active').notNull(),\n  managerId: integer(\"manager_id\"),\n  address: text(\"address\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  emergencyContact: text(\"emergency_contact\"),\n  emergencyPhone: text(\"emergency_phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Employee Payroll table\nexport const employeePayroll = pgTable(\"employee_payroll\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  \n  // Payroll toggles\n  epfEnabled: boolean(\"epf_enabled\").default(false),\n  employeePfLimit: boolean(\"employee_pf_limit\").default(false),\n  employerPfLimit: boolean(\"employer_pf_limit\").default(false),\n  esicEnabled: boolean(\"esic_enabled\").default(false),\n  lwfEnabled: boolean(\"lwf_enabled\").default(false),\n  otEnabled: boolean(\"ot_enabled\").default(false),\n  doubleOt: boolean(\"double_ot\").default(false),\n  vpfEnabled: boolean(\"vpf_enabled\").default(false),\n  vpfAmount: decimal(\"vpf_amount\"),\n  tdsEnabled: boolean(\"tds_enabled\").default(false),\n  tdsAmount: decimal(\"tds_amount\"),\n  ptEnabled: boolean(\"pt_enabled\").default(false),\n  ptAmount: decimal(\"pt_amount\"),\n  bonusEnabled: boolean(\"bonus_enabled\").default(false),\n  bonusMonthlyPayment: boolean(\"bonus_monthly_payment\").default(false),\n  \n  // Salary structure\n  entryType: text(\"entry_type\").default('gross'), // 'ctc', 'gross', 'earning_heads'\n  ctcValue: decimal(\"ctc_value\"),\n  grossValue: decimal(\"gross_value\"),\n  \n  // Earning heads\n  earningHead1: decimal(\"earning_head1\"), // Basic Salary\n  earningHead2: decimal(\"earning_head2\"), // HRA\n  earningHead3: decimal(\"earning_head3\"), // Conveyance Allowance\n  earningHead4: decimal(\"earning_head4\"), // Other Allowances\n  \n  // Employee contribution amounts\n  epfEmployeeAmount: decimal(\"epf_employee_amount\"),\n  esicEmployeeAmount: decimal(\"esic_employee_amount\"),\n  lwfEmployeeAmount: decimal(\"lwf_employee_amount\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Employee Salary Structures table for month-wise historical tracking\nexport const employeeSalaryStructures = pgTable(\"employee_salary_structures\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  year: integer(\"year\").notNull(),\n  month: integer(\"month\").notNull(), // 1-12\n  \n  // Payroll toggles\n  epfEnabled: boolean(\"epf_enabled\").default(false),\n  employeePfLimit: boolean(\"employee_pf_limit\").default(false),\n  employerPfLimit: boolean(\"employer_pf_limit\").default(false),\n  esicEnabled: boolean(\"esic_enabled\").default(false),\n  lwfEnabled: boolean(\"lwf_enabled\").default(false),\n  otEnabled: boolean(\"ot_enabled\").default(false),\n  doubleOt: boolean(\"double_ot\").default(false),\n  vpfEnabled: boolean(\"vpf_enabled\").default(false),\n  vpfAmount: decimal(\"vpf_amount\"),\n  tdsEnabled: boolean(\"tds_enabled\").default(false),\n  tdsAmount: decimal(\"tds_amount\"),\n  ptEnabled: boolean(\"pt_enabled\").default(false),\n  ptAmount: decimal(\"pt_amount\"),\n  bonusEnabled: boolean(\"bonus_enabled\").default(false),\n  bonusMonthlyPayment: boolean(\"bonus_monthly_payment\").default(false),\n  \n  // Salary structure\n  entryType: text(\"entry_type\").default('gross'), // 'ctc', 'gross', 'earning_heads'\n  ctcValue: decimal(\"ctc_value\"),\n  grossValue: decimal(\"gross_value\"),\n  \n  // Earning heads\n  earningHead1: decimal(\"earning_head1\"), // Basic Salary\n  earningHead2: decimal(\"earning_head2\"), // HRA\n  earningHead3: decimal(\"earning_head3\"), // Conveyance Allowance\n  earningHead4: decimal(\"earning_head4\"), // Other Allowances\n  \n  // Employee contribution amounts\n  epfEmployeeAmount: decimal(\"epf_employee_amount\"),\n  esicEmployeeAmount: decimal(\"esic_employee_amount\"),\n  lwfEmployeeAmount: decimal(\"lwf_employee_amount\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  // Unique constraint to ensure only one salary structure per employee per month\n  employeeMonthlyUnique: unique().on(table.employeeId, table.year, table.month),\n}));\n\n// Salary Components - Define available salary components (Basic, HRA, etc.)\nexport const salaryComponents = pgTable(\"salary_components\", {\n  id: serial(\"id\").primaryKey(),\n  componentKey: text(\"component_key\").notNull().unique(), // 'basic', 'hra', 'conveyance', etc.\n  displayName: text(\"display_name\").notNull(), // 'Basic Salary', 'House Rent Allowance', etc.\n  isTaxable: boolean(\"is_taxable\").default(true),\n  isEmployerCost: boolean(\"is_employer_cost\").default(false), // For CTC calculations (PF employer contribution, etc.)\n  isDefault: boolean(\"is_default\").default(false), // System-provided components\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Company Salary Component Configuration - Percentage settings per company\nexport const companySalaryComponentConfig = pgTable(\"company_salary_component_config\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  componentKey: text(\"component_key\").references(() => salaryComponents.componentKey).notNull(),\n  entryMode: salaryEntryModeEnum(\"entry_mode\").notNull(), // Which mode this config applies to\n  percentageOfGross: decimal(\"percentage_of_gross\"), // For gross mode calculations\n  percentageOfCTC: decimal(\"percentage_of_ctc\"), // For CTC mode calculations\n  priority: integer(\"priority\").default(0), // Calculation order\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  // Unique constraint per company, component, and mode\n  companyComponentModeUnique: unique().on(table.companyId, table.componentKey, table.entryMode),\n}));\n\n// Employee Salary Component Values - Store individual component amounts\nexport const employeeSalaryComponentValues = pgTable(\"employee_salary_component_values\", {\n  id: serial(\"id\").primaryKey(),\n  structureId: integer(\"structure_id\").references(() => employeeSalaryStructures.id).notNull(),\n  componentKey: text(\"component_key\").references(() => salaryComponents.componentKey).notNull(),\n  amount: decimal(\"amount\").notNull(),\n  calculatedFromPercentage: boolean(\"calculated_from_percentage\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n}, (table) => ({\n  // Unique constraint per structure and component\n  structureComponentUnique: unique().on(table.structureId, table.componentKey),\n}));\n\n// Jobs table\nexport const jobs = pgTable(\"jobs\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  departmentId: integer(\"department_id\").references(() => departments.id),\n  requirements: text(\"requirements\"),\n  salaryMin: decimal(\"salary_min\"),\n  salaryMax: decimal(\"salary_max\"),\n  location: text(\"location\"),\n  employmentType: text(\"employment_type\").default('full-time'),\n  status: jobStatusEnum(\"status\").default('draft').notNull(),\n  postedBy: integer(\"posted_by\").references(() => users.id).notNull(),\n  postedAt: timestamp(\"posted_at\"),\n  closingDate: timestamp(\"closing_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Job Applications table\nexport const jobApplications = pgTable(\"job_applications\", {\n  id: serial(\"id\").primaryKey(),\n  jobId: integer(\"job_id\").references(() => jobs.id).notNull(),\n  applicantName: text(\"applicant_name\").notNull(),\n  applicantEmail: text(\"applicant_email\").notNull(),\n  applicantPhone: text(\"applicant_phone\"),\n  resume: text(\"resume\"),\n  coverLetter: text(\"cover_letter\"),\n  status: applicationStatusEnum(\"status\").default('pending').notNull(),\n  appliedAt: timestamp(\"applied_at\").defaultNow().notNull(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Enums for attendance\nexport const attendanceStatusEnum = pgEnum('attendance_status', ['present', 'absent', 'half_day', 'late', 'early_leave', 'comp_off', 'paid_leave', 'unpaid_leave']);\nexport const verificationType = pgEnum('verification_type', ['face', 'location', 'manual', 'biometric']);\n\n// Attendance table - Enhanced for comprehensive tracking\nexport const attendance = pgTable(\"attendance\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  date: date(\"date\").notNull(),\n  checkIn: timestamp(\"check_in\"),\n  checkOut: timestamp(\"check_out\"),\n  hoursWorked: decimal(\"hours_worked\", { precision: 4, scale: 2 }),\n  status: attendanceStatusEnum(\"status\").default('absent').notNull(),\n  isPresent: boolean(\"is_present\").default(false).notNull(),\n  // Face verification\n  faceVerified: boolean(\"face_verified\").default(false),\n  faceImage: text(\"face_image\"), // Base64 image for verification\n  faceConfidence: decimal(\"face_confidence\", { precision: 5, scale: 2 }),\n  // Location verification\n  locationVerified: boolean(\"location_verified\").default(false),\n  checkInLatitude: decimal(\"check_in_latitude\", { precision: 10, scale: 7 }),\n  checkInLongitude: decimal(\"check_in_longitude\", { precision: 10, scale: 7 }),\n  checkOutLatitude: decimal(\"check_out_latitude\", { precision: 10, scale: 7 }),\n  checkOutLongitude: decimal(\"check_out_longitude\", { precision: 10, scale: 7 }),\n  workLocation: text(\"work_location\"), // Detected location name\n  // Verification details\n  verificationType: verificationType(\"verification_type\").default('manual'),\n  deviceInfo: text(\"device_info\"), // Device used for check-in\n  ipAddress: text(\"ip_address\"),\n  notes: text(\"notes\"),\n  approvedBy: integer(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Monthly attendance summary table\nexport const monthlyAttendance = pgTable(\"monthly_attendance\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  year: integer(\"year\").notNull(),\n  month: integer(\"month\").notNull(), // 1-12\n  totalWorkingDays: integer(\"total_working_days\").notNull(),\n  presentDays: integer(\"present_days\").default(0),\n  absentDays: integer(\"absent_days\").default(0),\n  halfDays: integer(\"half_days\").default(0),\n  lateDays: integer(\"late_days\").default(0),\n  paidLeaveDays: integer(\"paid_leave_days\").default(0),\n  unpaidLeaveDays: integer(\"unpaid_leave_days\").default(0),\n  compOffDays: integer(\"comp_off_days\").default(0),\n  weeklyOffDays: integer(\"weekly_off_days\").default(0),\n  holidayDays: integer(\"holiday_days\").default(0),\n  payableDays: integer(\"payable_days\").default(0), // Present + Paid Leave + Weekly Off + Comp Off + Holidays\n  totalHoursWorked: decimal(\"total_hours_worked\", { precision: 6, scale: 2 }),\n  averageCheckInTime: time(\"average_check_in_time\"),\n  averageCheckOutTime: time(\"average_check_out_time\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Face templates for verification (store encrypted face embeddings)\nexport const faceTemplates = pgTable(\"face_templates\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  templateData: text(\"template_data\").notNull(), // Encrypted face embedding\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Attendance locations (authorized work locations)\nexport const attendanceLocations = pgTable(\"attendance_locations\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 7 }).notNull(),\n  longitude: decimal(\"longitude\", { precision: 10, scale: 7 }).notNull(),\n  radius: integer(\"radius\").default(100), // Allowed radius in meters\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Permissions table\nexport const permissions = pgTable(\"permissions\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  module: text(\"module\").notNull(), // e.g., 'employees', 'payroll', 'attendance'\n  isActive: boolean(\"is_active\").default(true),\n  requiresApproval: boolean(\"requires_approval\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// User Permissions table (direct permission assignments)\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  permissionId: integer(\"permission_id\").references(() => permissions.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  grantedBy: integer(\"granted_by\").references(() => users.id).notNull(),\n  grantedAt: timestamp(\"granted_at\").defaultNow().notNull(),\n  expiresAt: timestamp(\"expires_at\"),\n  isActive: boolean(\"is_active\").default(true),\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Permission Templates (predefined sets of permissions for roles)\nexport const permissionTemplates = pgTable(\"permission_templates\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  role: userRoleEnum(\"role\").notNull(),\n  permissionIds: text(\"permission_ids\").notNull(), // JSON array of permission IDs\n  isDefault: boolean(\"is_default\").default(false),\n  createdBy: integer(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Employee Profiles table (for employees not yet hired by any company)\nexport const employeeProfiles = pgTable(\"employee_profiles\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  fatherName: text(\"father_name\"),\n  presentAddress: text(\"present_address\"),\n  permanentAddress: text(\"permanent_address\"),\n  currentSalary: text(\"current_salary\"),\n  expectedSalary: text(\"expected_salary\"),\n  noticePeriod: text(\"notice_period\"),\n  primaryContact: text(\"primary_contact\"),\n  alternativeContact: text(\"alternative_contact\"),\n  totalExperience: text(\"total_experience\"),\n  speciality: text(\"speciality\"),\n  skills: text(\"skills\"),\n  experience: text(\"experience\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Employment History table\nexport const employmentHistory = pgTable(\"employment_history\", {\n  id: serial(\"id\").primaryKey(),\n  employeeProfileId: integer(\"employee_profile_id\").references(() => employeeProfiles.id).notNull(),\n  companyName: text(\"company_name\").notNull(),\n  joinDate: date(\"join_date\"),\n  leftDate: date(\"left_date\"),\n  reasonForLeaving: text(\"reason_for_leaving\"),\n  jobDescription: text(\"job_description\"),\n  department: text(\"department\"),\n  designation: text(\"designation\"),\n  lastDrawnSalary: text(\"last_drawn_salary\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// KYC Details table\nexport const kycDetails = pgTable(\"kyc_details\", {\n  id: serial(\"id\").primaryKey(),\n  employeeProfileId: integer(\"employee_profile_id\").references(() => employeeProfiles.id).notNull(),\n  aadharNo: text(\"aadhar_no\"),\n  panNo: text(\"pan_no\"),\n  bankAccountNo: text(\"bank_account_no\"),\n  ifscCode: text(\"ifsc_code\"),\n  uanNo: text(\"uan_no\"),\n  esicNo: text(\"esic_no\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Family Details table\nexport const familyDetails = pgTable(\"family_details\", {\n  id: serial(\"id\").primaryKey(),\n  employeeProfileId: integer(\"employee_profile_id\").references(() => employeeProfiles.id).notNull(),\n  memberName: text(\"member_name\").notNull(),\n  relation: text(\"relation\").notNull(),\n  aadharNo: text(\"aadhar_no\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Role permissions table\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: serial(\"id\").primaryKey(),\n  role: userRoleEnum(\"role\").notNull(),\n  permissionId: integer(\"permission_id\").references(() => permissions.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Permission requests table (matching current database structure)\nexport const permissionRequests = pgTable(\"permission_requests\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  requestedBy: integer(\"requested_by\").references(() => users.id).notNull(),\n  permissionType: permissionTypeEnum(\"permission_type\").notNull(),\n  reason: text(\"reason\").notNull(),\n  status: permissionRequestStatusEnum(\"status\").default('pending').notNull(),\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewNotes: text(\"review_notes\"),\n  expiresAt: timestamp(\"expires_at\"),\n  companyId: integer(\"company_id\").references(() => companies.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// User activities table for audit trail\nexport const userActivities = pgTable(\"user_activities\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\"),\n  entityId: integer(\"entity_id\"),\n  details: text(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Interviews table\nexport const interviews = pgTable(\"interviews\", {\n  id: serial(\"id\").primaryKey(),\n  jobApplicationId: integer(\"job_application_id\").references(() => jobApplications.id).notNull(),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(60), // minutes\n  location: text(\"location\"),\n  meetingLink: text(\"meeting_link\"),\n  interviewerIds: text(\"interviewer_ids\"), // JSON array of user IDs\n  status: text(\"status\").default('scheduled').notNull(), // scheduled, completed, cancelled, rescheduled\n  notes: text(\"notes\"),\n  rating: integer(\"rating\"), // 1-10 scale\n  result: text(\"result\"), // pass, fail, pending\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Job offers table\nexport const jobOffers = pgTable(\"job_offers\", {\n  id: serial(\"id\").primaryKey(),\n  jobApplicationId: integer(\"job_application_id\").references(() => jobApplications.id).notNull(),\n  offeredSalary: text(\"offered_salary\"),\n  startDate: timestamp(\"start_date\"),\n  expiryDate: timestamp(\"expiry_date\"),\n  terms: text(\"terms\"), // JSON object with offer terms\n  status: text(\"status\").default('pending').notNull(), // pending, accepted, rejected, withdrawn\n  acceptedAt: timestamp(\"accepted_at\"),\n  rejectedAt: timestamp(\"rejected_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const companiesRelations = relations(companies, ({ many }) => ({\n  users: many(users),\n  departments: many(departments),\n  employees: many(employees),\n  jobs: many(jobs),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  company: one(companies, { fields: [users.companyId], references: [companies.id] }),\n  employee: one(employees, { fields: [users.id], references: [employees.userId] }),\n  postedJobs: many(jobs, { relationName: \"job_poster\" }),\n  reviewedApplications: many(jobApplications, { relationName: \"application_reviewer\" }),\n  permissionRequests: many(permissionRequests, { relationName: \"permission_user\" }),\n  requestedPermissions: many(permissionRequests, { relationName: \"permission_requester\" }),\n  level1ReviewedPermissions: many(permissionRequests, { relationName: \"permission_level1_reviewer\" }),\n  level2ReviewedPermissions: many(permissionRequests, { relationName: \"permission_level2_reviewer\" }),\n  finalReviewedPermissions: many(permissionRequests, { relationName: \"permission_final_reviewer\" }),\n  activities: many(userActivities),\n}));\n\nexport const departmentsRelations = relations(departments, ({ one, many }) => ({\n  company: one(companies, { fields: [departments.companyId], references: [companies.id] }),\n  manager: one(employees, { fields: [departments.managerId], references: [employees.id] }),\n  employees: many(employees),\n  jobs: many(jobs),\n}));\n\nexport const employeesRelations = relations(employees, ({ one, many }) => ({\n  user: one(users, { fields: [employees.userId], references: [users.id] }),\n  company: one(companies, { fields: [employees.companyId], references: [companies.id] }),\n  department: one(departments, { fields: [employees.departmentId], references: [departments.id] }),\n  manager: one(employees, { fields: [employees.managerId], references: [employees.id], relationName: \"employee_manager\" }),\n  subordinates: many(employees, { relationName: \"employee_manager\" }),\n  managedDepartments: many(departments, { relationName: \"department_manager\" }),\n  attendance: many(attendance),\n  salaryStructures: many(employeeSalaryStructures),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  company: one(companies, { fields: [jobs.companyId], references: [companies.id] }),\n  department: one(departments, { fields: [jobs.departmentId], references: [departments.id] }),\n  postedBy: one(users, { fields: [jobs.postedBy], references: [users.id], relationName: \"job_poster\" }),\n  applications: many(jobApplications),\n}));\n\nexport const jobApplicationsRelations = relations(jobApplications, ({ one, many }) => ({\n  job: one(jobs, { fields: [jobApplications.jobId], references: [jobs.id] }),\n  reviewedBy: one(users, { fields: [jobApplications.reviewedBy], references: [users.id], relationName: \"application_reviewer\" }),\n  interviews: many(interviews),\n  offers: many(jobOffers),\n}));\n\nexport const interviewsRelations = relations(interviews, ({ one }) => ({\n  jobApplication: one(jobApplications, { fields: [interviews.jobApplicationId], references: [jobApplications.id] }),\n}));\n\nexport const jobOffersRelations = relations(jobOffers, ({ one }) => ({\n  jobApplication: one(jobApplications, { fields: [jobOffers.jobApplicationId], references: [jobApplications.id] }),\n}));\n\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  employee: one(employees, { fields: [attendance.employeeId], references: [employees.id] }),\n}));\n\nexport const employeeSalaryStructuresRelations = relations(employeeSalaryStructures, ({ one }) => ({\n  employee: one(employees, { fields: [employeeSalaryStructures.employeeId], references: [employees.id] }),\n  company: one(companies, { fields: [employeeSalaryStructures.companyId], references: [companies.id] }),\n}));\n\nexport const permissionsRelations = relations(permissions, ({ many }) => ({\n  rolePermissions: many(rolePermissions),\n}));\n\nexport const rolePermissionsRelations = relations(rolePermissions, ({ one }) => ({\n  permission: one(permissions, { fields: [rolePermissions.permissionId], references: [permissions.id] }),\n  company: one(companies, { fields: [rolePermissions.companyId], references: [companies.id] }),\n}));\n\nexport const permissionRequestsRelations = relations(permissionRequests, ({ one }) => ({\n  user: one(users, { fields: [permissionRequests.userId], references: [users.id], relationName: \"permission_user\" }),\n  requestedByUser: one(users, { fields: [permissionRequests.requestedBy], references: [users.id], relationName: \"permission_requester\" }),\n  reviewedByUser: one(users, { fields: [permissionRequests.reviewedBy], references: [users.id], relationName: \"permission_reviewer\" }),\n  company: one(companies, { fields: [permissionRequests.companyId], references: [companies.id] }),\n}));\n\nexport const employeeProfilesRelations = relations(employeeProfiles, ({ one, many }) => ({\n  user: one(users, { fields: [employeeProfiles.userId], references: [users.id] }),\n  employmentHistory: many(employmentHistory),\n  kycDetails: one(kycDetails),\n  familyDetails: many(familyDetails),\n}));\n\nexport const employmentHistoryRelations = relations(employmentHistory, ({ one }) => ({\n  employeeProfile: one(employeeProfiles, { fields: [employmentHistory.employeeProfileId], references: [employeeProfiles.id] }),\n}));\n\nexport const kycDetailsRelations = relations(kycDetails, ({ one }) => ({\n  employeeProfile: one(employeeProfiles, { fields: [kycDetails.employeeProfileId], references: [employeeProfiles.id] }),\n}));\n\nexport const familyDetailsRelations = relations(familyDetails, ({ one }) => ({\n  employeeProfile: one(employeeProfiles, { fields: [familyDetails.employeeProfileId], references: [employeeProfiles.id] }),\n}));\n\nexport const userActivitiesRelations = relations(userActivities, ({ one }) => ({\n  user: one(users, { fields: [userActivities.userId], references: [users.id] }),\n  company: one(companies, { fields: [userActivities.companyId], references: [companies.id] }),\n}));\n\n// Monthly Payroll Tables\nexport const monthlyPayroll = pgTable(\"monthly_payroll\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  month: integer(\"month\").notNull(), // 1-12\n  year: integer(\"year\").notNull(),\n  status: text(\"status\").notNull().default('draft'), // 'draft', 'finalized'\n  generatedBy: integer(\"generated_by\").references(() => users.id).notNull(),\n  finalizedBy: integer(\"finalized_by\").references(() => users.id),\n  finalizedAt: timestamp(\"finalized_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const payrollRecords = pgTable(\"payroll_records\", {\n  id: serial(\"id\").primaryKey(),\n  monthlyPayrollId: integer(\"monthly_payroll_id\").references(() => monthlyPayroll.id).notNull(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  \n  // Attendance Data\n  presentDays: integer(\"present_days\").notNull().default(0),\n  weeklyOffs: integer(\"weekly_offs\").notNull().default(0),\n  leaveDays: integer(\"leave_days\").notNull().default(0),\n  holidays: integer(\"holidays\").notNull().default(0),\n  payableDays: integer(\"payable_days\").notNull().default(0),\n  overtimeHours: decimal(\"overtime_hours\").default('0'),\n  \n  // Salary Components\n  basicSalary: decimal(\"basic_salary\").notNull().default('0'),\n  hra: decimal(\"hra\").default('0'),\n  conveyanceAllowance: decimal(\"conveyance_allowance\").default('0'),\n  otherAllowances: decimal(\"other_allowances\").default('0'),\n  grossSalary: decimal(\"gross_salary\").notNull().default('0'),\n  overtimeAmount: decimal(\"overtime_amount\").default('0'),\n  \n  // Deductions\n  epfEmployee: decimal(\"epf_employee\").default('0'),\n  esicEmployee: decimal(\"esic_employee\").default('0'),\n  lwfEmployee: decimal(\"lwf_employee\").default('0'),\n  vpfAmount: decimal(\"vpf_amount\").default('0'),\n  tdsAmount: decimal(\"tds_amount\").default('0'),\n  ptAmount: decimal(\"pt_amount\").default('0'),\n  totalDeductions: decimal(\"total_deductions\").notNull().default('0'),\n  \n  // Employer Contributions\n  epfEmployer: decimal(\"epf_employer\").default('0'),\n  epfAdmin: decimal(\"epf_admin\").default('0'),\n  esicEmployer: decimal(\"esic_employer\").default('0'),\n  lwfEmployer: decimal(\"lwf_employer\").default('0'),\n  bonus: decimal(\"bonus\").default('0'),\n  totalEmployerContributions: decimal(\"total_employer_contributions\").default('0'),\n  \n  // Net Calculations\n  netSalary: decimal(\"net_salary\").notNull().default('0'),\n  ctc: decimal(\"ctc\").notNull().default('0'),\n  \n  // Payment Status\n  paymentStatus: text(\"payment_status\").notNull().default('unpaid'), // 'unpaid', 'paid', 'partially_paid'\n  paidAmount: decimal(\"paid_amount\").default('0'),\n  paymentDate: timestamp(\"payment_date\"),\n  paymentMethod: text(\"payment_method\"), // 'bank_transfer', 'cash', 'cheque'\n  paymentReference: text(\"payment_reference\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Payroll Relations\nexport const monthlyPayrollRelations = relations(monthlyPayroll, ({ one, many }) => ({\n  company: one(companies, { fields: [monthlyPayroll.companyId], references: [companies.id] }),\n  generatedBy: one(users, { fields: [monthlyPayroll.generatedBy], references: [users.id], relationName: \"payroll_generator\" }),\n  finalizedBy: one(users, { fields: [monthlyPayroll.finalizedBy], references: [users.id], relationName: \"payroll_finalizer\" }),\n  records: many(payrollRecords),\n}));\n\nexport const payrollRecordsRelations = relations(payrollRecords, ({ one }) => ({\n  monthlyPayroll: one(monthlyPayroll, { fields: [payrollRecords.monthlyPayrollId], references: [monthlyPayroll.id] }),\n  employee: one(employees, { fields: [payrollRecords.employeeId], references: [employees.id] }),\n  company: one(companies, { fields: [payrollRecords.companyId], references: [companies.id] }),\n}));\n\n// Payroll Insert Schemas\nexport const insertMonthlyPayrollSchema = createInsertSchema(monthlyPayroll).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPayrollRecordSchema = createInsertSchema(payrollRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Permission schemas\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPermissionTemplateSchema = createInsertSchema(permissionTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionRequestSchema = createInsertSchema(permissionRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  requestedBy: true,\n  level1ReviewerId: true,\n  level1ReviewedAt: true,\n  level1Comments: true,\n  level2ReviewerId: true,\n  level2ReviewedAt: true,\n  level2Comments: true,\n  finalReviewerId: true,\n  finalReviewedAt: true,\n  finalComments: true,\n  autoApproveAt: true,\n});\n\n// Permission-related Type Exports (moved to main types section to avoid duplicates)\n\n// Types\nexport type MonthlyPayroll = typeof monthlyPayroll.$inferSelect;\nexport type InsertMonthlyPayroll = typeof insertMonthlyPayrollSchema._type;\nexport type PayrollRecord = typeof payrollRecords.$inferSelect;\nexport type InsertPayrollRecord = typeof insertPayrollRecordSchema._type;\n\n// Client Compliances Types (definitions moved to end of file to avoid duplicates)\n\n// Additional Company Settings Tables\nexport const designations = pgTable('designations', {\n  id: serial('id').primaryKey(),\n  title: text('title').notNull(),\n  departmentId: integer('department_id').references(() => departments.id),\n  companyId: integer('company_id').references(() => companies.id),\n  level: text('level'), // Junior, Mid, Senior, Lead, Manager, Director\n  description: text('description'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const branches = pgTable('branches', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id),\n  name: text('name').notNull(),\n  address: text('address'),\n  city: text('city'),\n  state: text('state'),\n  zipCode: text('zip_code'),\n  phone: text('phone'),\n  manager: text('manager'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const locations = pgTable('locations', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id),\n  branchId: integer('branch_id').references(() => branches.id),\n  name: text('name').notNull(),\n  address: text('address'),\n  capacity: integer('capacity'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const costCenters = pgTable('cost_centers', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id),\n  code: text('code').notNull(),\n  name: text('name').notNull(),\n  description: text('description'),\n  budget: text('budget'),\n  manager: text('manager'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const biometricMachines = pgTable('biometric_machines', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id),\n  serialNumber: text('serial_number').notNull(),\n  ipAddress: text('ip_address').notNull(),\n  port: integer('port').notNull(),\n  location: text('location'),\n  model: text('model'),\n  status: text('status').default('active'), // active, inactive, maintenance\n  lastSync: timestamp('last_sync').defaultNow(),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const holidays = pgTable('holidays', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id),\n  name: text('name').notNull(),\n  date: date('date').notNull(),\n  type: text('type').default('company'), // national, regional, company\n  description: text('description'),\n  mandatory: boolean('mandatory').default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const leavePolicies = pgTable('leave_policies', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id),\n  name: text('name').notNull(),\n  type: text('type'), // annual, sick, maternity, paternity, personal, emergency\n  allowedDays: integer('allowed_days').notNull(),\n  carryForward: boolean('carry_forward').default(false),\n  description: text('description'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Leave Requests table\nexport const leaveRequests = pgTable(\"leave_requests\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  leaveType: leaveTypeEnum(\"leave_type\").notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  totalDays: decimal(\"total_days\", { precision: 5, scale: 1 }).notNull(),\n  reason: text(\"reason\").notNull(),\n  status: leaveStatusEnum(\"status\").default('pending').notNull(),\n  appliedAt: timestamp(\"applied_at\").defaultNow().notNull(),\n  \n  // Multi-level approval tracking\n  level1ApproverId: integer(\"level_1_approver_id\").references(() => users.id),\n  level1ApprovedAt: timestamp(\"level_1_approved_at\"),\n  level1Comments: text(\"level_1_comments\"),\n  \n  level2ApproverId: integer(\"level_2_approver_id\").references(() => users.id),\n  level2ApprovedAt: timestamp(\"level_2_approved_at\"),\n  level2Comments: text(\"level_2_comments\"),\n  \n  finalApproverId: integer(\"final_approver_id\").references(() => users.id),\n  finalApprovedAt: timestamp(\"final_approved_at\"),\n  finalComments: text(\"final_comments\"),\n  \n  rejectedById: integer(\"rejected_by_id\").references(() => users.id),\n  rejectedAt: timestamp(\"rejected_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Advance Requests table\nexport const advanceRequests = pgTable(\"advance_requests\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  reason: text(\"reason\").notNull(),\n  repaymentPeriod: integer(\"repayment_period\").notNull(), // months\n  status: advanceStatusEnum(\"status\").default('pending').notNull(),\n  appliedAt: timestamp(\"applied_at\").defaultNow().notNull(),\n  \n  // Multi-level approval tracking\n  level1ApproverId: integer(\"level_1_approver_id\").references(() => users.id),\n  level1ApprovedAt: timestamp(\"level_1_approved_at\"),\n  level1Comments: text(\"level_1_comments\"),\n  \n  level2ApproverId: integer(\"level_2_approver_id\").references(() => users.id),\n  level2ApprovedAt: timestamp(\"level_2_approved_at\"),\n  level2Comments: text(\"level_2_comments\"),\n  \n  finalApproverId: integer(\"final_approver_id\").references(() => users.id),\n  finalApprovedAt: timestamp(\"final_approved_at\"),\n  finalComments: text(\"final_comments\"),\n  \n  rejectedById: integer(\"rejected_by_id\").references(() => users.id),\n  rejectedAt: timestamp(\"rejected_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  \n  // Payment tracking\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }),\n  paidAt: timestamp(\"paid_at\"),\n  paymentMethod: text(\"payment_method\"),\n  paymentReference: text(\"payment_reference\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Approval Workflow Configuration table\nexport const approvalWorkflows = pgTable(\"approval_workflows\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").references(() => companies.id).notNull(),\n  requestType: text(\"request_type\").notNull(), // 'leave', 'advance'\n  level1ApproverRole: text(\"level_1_approver_role\"), // 'manager', 'hr', 'admin'\n  level2ApproverRole: text(\"level_2_approver_role\"),\n  finalApproverRole: text(\"final_approver_role\"),\n  amountThresholds: text(\"amount_thresholds\"), // JSON string for advance amounts\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Client Compliances Tables\nexport const clients = pgTable('clients', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id).notNull(),\n  projectName: text('project_name').notNull(),\n  projectCost: text('project_cost').notNull(),\n  startDate: date('start_date'),\n  principalEmployer: text('principal_employer'),\n  clientName: text('client_name'),\n  natureAndLocationOfWork: text('nature_and_location_of_work'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\nexport const complianceSetups = pgTable('compliance_setups', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id).notNull(),\n  employeeId: integer('employee_id').references(() => employees.id).notNull(),\n  basicSalary: text('basic_salary').notNull(),\n  grossSalary: text('gross_salary').notNull(),\n  differenceAdjustment: boolean('difference_adjustment').default(false),\n  pfType: text('pf_type').notNull(), // 'exempt', 'actual', 'ctc'\n  esicType: text('esic_type').notNull(), // 'exempt', 'actual', 'ctc'\n  bonusType: text('bonus_type').notNull(), // 'exempt', 'actual', 'ctc'\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Employee Assignments table\nexport const employeeAssignments = pgTable('employee_assignments', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id).notNull(),\n  employeeId: integer('employee_id').references(() => employees.id).notNull(),\n  designationId: integer('designation_id').references(() => designations.id).notNull(),\n  assignDate: text('assign_date').notNull(),\n  deassignDate: text('deassign_date'),\n  address: text('address').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\nexport const compliancesData = pgTable('compliances_data', {\n  id: serial('id').primaryKey(),\n  companyId: integer('company_id').references(() => companies.id).notNull(),\n  projectId: integer('project_id').references(() => clients.id).notNull(),\n  employeeId: integer('employee_id').references(() => employees.id).notNull(),\n  month: text('month').notNull(), // YYYY-MM format\n  actualPayable: text('actual_payable'),\n  compliancesGross: text('compliances_gross'),\n  compliancesAttendance: integer('compliances_attendance'),\n  compliancesOT: integer('compliances_ot'),\n  compliancesGrossEarn: text('compliances_gross_earn'),\n  pfDeduction: text('pf_deduction'),\n  esicDeduction: text('esic_deduction'),\n  netPayableAmount: text('net_payable_amount'),\n  differenceAmount: text('difference_amount'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Additional relations\nexport const designationRelations = relations(designations, ({ one }) => ({\n  department: one(departments, {\n    fields: [designations.departmentId],\n    references: [departments.id],\n  }),\n  company: one(companies, {\n    fields: [designations.companyId],\n    references: [companies.id],\n  }),\n}));\n\nexport const branchRelations = relations(branches, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [branches.companyId],\n    references: [companies.id],\n  }),\n  locations: many(locations),\n}));\n\nexport const locationRelations = relations(locations, ({ one }) => ({\n  company: one(companies, {\n    fields: [locations.companyId],\n    references: [companies.id],\n  }),\n  branch: one(branches, {\n    fields: [locations.branchId],\n    references: [branches.id],\n  }),\n}));\n\nexport const costCenterRelations = relations(costCenters, ({ one }) => ({\n  company: one(companies, {\n    fields: [costCenters.companyId],\n    references: [companies.id],\n  }),\n}));\n\nexport const biometricMachineRelations = relations(biometricMachines, ({ one }) => ({\n  company: one(companies, {\n    fields: [biometricMachines.companyId],\n    references: [companies.id],\n  }),\n}));\n\nexport const holidayRelations = relations(holidays, ({ one }) => ({\n  company: one(companies, {\n    fields: [holidays.companyId],\n    references: [companies.id],\n  }),\n}));\n\nexport const leavePolicyRelations = relations(leavePolicies, ({ one }) => ({\n  company: one(companies, {\n    fields: [leavePolicies.companyId],\n    references: [companies.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeProfileSchema = createInsertSchema(employeeProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobApplicationSchema = createInsertSchema(jobApplications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMonthlyAttendanceSchema = createInsertSchema(monthlyAttendance).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFaceTemplateSchema = createInsertSchema(faceTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAttendanceLocationSchema = createInsertSchema(attendanceLocations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmploymentHistorySchema = createInsertSchema(employmentHistory).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertKycDetailsSchema = createInsertSchema(kycDetails).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFamilyDetailsSchema = createInsertSchema(familyDetails).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserActivitySchema = createInsertSchema(userActivities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInterviewSchema = createInsertSchema(interviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobOfferSchema = createInsertSchema(jobOffers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeePayrollSchema = createInsertSchema(employeePayroll).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSalaryStructureSchema = createInsertSchema(employeeSalaryStructures).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).transform((data) => {\n  // Transform empty strings to null for decimal fields to prevent database errors\n  return {\n    ...data,\n    vpfAmount: data.vpfAmount === '' || data.vpfAmount === undefined ? null : data.vpfAmount,\n    tdsAmount: data.tdsAmount === '' || data.tdsAmount === undefined ? null : data.tdsAmount,\n    ptAmount: data.ptAmount === '' || data.ptAmount === undefined ? null : data.ptAmount,\n    ctcValue: data.ctcValue === '' || data.ctcValue === undefined ? null : data.ctcValue,\n    grossValue: data.grossValue === '' || data.grossValue === undefined ? null : data.grossValue,\n    earningHead1: data.earningHead1 === '' || data.earningHead1 === undefined ? null : data.earningHead1,\n    earningHead2: data.earningHead2 === '' || data.earningHead2 === undefined ? null : data.earningHead2,\n    earningHead3: data.earningHead3 === '' || data.earningHead3 === undefined ? null : data.earningHead3,\n    earningHead4: data.earningHead4 === '' || data.earningHead4 === undefined ? null : data.earningHead4,\n    epfEmployeeAmount: data.epfEmployeeAmount === '' || data.epfEmployeeAmount === undefined ? null : data.epfEmployeeAmount,\n    esicEmployeeAmount: data.esicEmployeeAmount === '' || data.esicEmployeeAmount === undefined ? null : data.esicEmployeeAmount,\n    lwfEmployeeAmount: data.lwfEmployeeAmount === '' || data.lwfEmployeeAmount === undefined ? null : data.lwfEmployeeAmount,\n  };\n});\n\n// Types for employeeSalaryStructures\nexport type InsertEmployeeSalaryStructure = z.infer<typeof insertEmployeeSalaryStructureSchema>;\nexport type SelectEmployeeSalaryStructure = typeof employeeSalaryStructures.$inferSelect;\n\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  appliedAt: true,\n});\n\nexport const insertAdvanceRequestSchema = createInsertSchema(advanceRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  appliedAt: true,\n});\n\nexport const insertApprovalWorkflowSchema = createInsertSchema(approvalWorkflows).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertComplianceSetupSchema = createInsertSchema(complianceSetups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCompliancesDataSchema = createInsertSchema(compliancesData).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeAssignmentSchema = createInsertSchema(employeeAssignments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Salary component schemas\nexport const insertSalaryComponentSchema = createInsertSchema(salaryComponents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCompanySalaryComponentConfigSchema = createInsertSchema(companySalaryComponentConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSalaryComponentValuesSchema = createInsertSchema(employeeSalaryComponentValues).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Employee Assignment Relations\nexport const employeeAssignmentRelations = relations(employeeAssignments, ({ one }) => ({\n  company: one(companies, {\n    fields: [employeeAssignments.companyId],\n    references: [companies.id],\n  }),\n  employee: one(employees, {\n    fields: [employeeAssignments.employeeId],\n    references: [employees.id],\n  }),\n  designation: one(designations, {\n    fields: [employeeAssignments.designationId],\n    references: [designations.id],\n  }),\n}));\n\n// Types\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Department = typeof departments.$inferSelect;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type EmployeeProfile = typeof employeeProfiles.$inferSelect;\nexport type InsertEmployeeProfile = z.infer<typeof insertEmployeeProfileSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type JobApplication = typeof jobApplications.$inferSelect;\nexport type InsertJobApplication = z.infer<typeof insertJobApplicationSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type MonthlyAttendance = typeof monthlyAttendance.$inferSelect;\nexport type InsertMonthlyAttendance = z.infer<typeof insertMonthlyAttendanceSchema>;\nexport type FaceTemplate = typeof faceTemplates.$inferSelect;\nexport type InsertFaceTemplate = z.infer<typeof insertFaceTemplateSchema>;\nexport type AttendanceLocation = typeof attendanceLocations.$inferSelect;\nexport type InsertAttendanceLocation = z.infer<typeof insertAttendanceLocationSchema>;\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type UserPermission = typeof userPermissions.$inferSelect;\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\nexport type PermissionTemplate = typeof permissionTemplates.$inferSelect;\nexport type InsertPermissionTemplate = z.infer<typeof insertPermissionTemplateSchema>;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type PermissionRequest = typeof permissionRequests.$inferSelect;\nexport type InsertPermissionRequest = z.infer<typeof insertPermissionRequestSchema>;\nexport type EmploymentHistory = typeof employmentHistory.$inferSelect;\nexport type InsertEmploymentHistory = z.infer<typeof insertEmploymentHistorySchema>;\nexport type KycDetails = typeof kycDetails.$inferSelect;\nexport type InsertKycDetails = z.infer<typeof insertKycDetailsSchema>;\nexport type FamilyDetails = typeof familyDetails.$inferSelect;\nexport type InsertFamilyDetails = z.infer<typeof insertFamilyDetailsSchema>;\nexport type UserActivity = typeof userActivities.$inferSelect;\nexport type InsertUserActivity = z.infer<typeof insertUserActivitySchema>;\nexport type Interview = typeof interviews.$inferSelect;\nexport type InsertInterview = z.infer<typeof insertInterviewSchema>;\nexport type JobOffer = typeof jobOffers.$inferSelect;\nexport type InsertJobOffer = z.infer<typeof insertJobOfferSchema>;\nexport type EmployeePayroll = typeof employeePayroll.$inferSelect;\nexport type InsertEmployeePayroll = z.infer<typeof insertEmployeePayrollSchema>;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;\nexport type InsertLeaveRequest = z.infer<typeof insertLeaveRequestSchema>;\nexport type AdvanceRequest = typeof advanceRequests.$inferSelect;\nexport type InsertAdvanceRequest = z.infer<typeof insertAdvanceRequestSchema>;\nexport type ApprovalWorkflow = typeof approvalWorkflows.$inferSelect;\nexport type InsertApprovalWorkflow = z.infer<typeof insertApprovalWorkflowSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type ComplianceSetup = typeof complianceSetups.$inferSelect;\nexport type InsertComplianceSetup = z.infer<typeof insertComplianceSetupSchema>;\nexport type CompliancesData = typeof compliancesData.$inferSelect;\nexport type InsertCompliancesData = z.infer<typeof insertCompliancesDataSchema>;\nexport type EmployeeAssignment = typeof employeeAssignments.$inferSelect;\nexport type InsertEmployeeAssignment = z.infer<typeof insertEmployeeAssignmentSchema>;\n\n// Salary component types\nexport type SalaryComponent = typeof salaryComponents.$inferSelect;\nexport type InsertSalaryComponent = z.infer<typeof insertSalaryComponentSchema>;\nexport type CompanySalaryComponentConfig = typeof companySalaryComponentConfig.$inferSelect;\nexport type InsertCompanySalaryComponentConfig = z.infer<typeof insertCompanySalaryComponentConfigSchema>;\nexport type EmployeeSalaryComponentValues = typeof employeeSalaryComponentValues.$inferSelect;\nexport type InsertEmployeeSalaryComponentValues = z.infer<typeof insertEmployeeSalaryComponentValuesSchema>;\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\n","size_bytes":60554},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport LoginPage from \"@/pages/login\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport EmployeesPage from \"@/pages/employees\";\nimport JobsPage from \"@/pages/jobs\";\nimport EmployeeProfile from \"@/pages/employee-profile\";\nimport RecruitmentDashboard from \"@/pages/recruitment-dashboard\";\nimport UserManagement from \"@/pages/user-management\";\nimport CompanyManagement from \"@/pages/company-management\";\nimport PermissionManagement from \"@/pages/permission-management\";\nimport PermissionRequestSimple from \"@/pages/permission-request-simple\";\nimport CompanyProfileSetup from \"./pages/company-profile-setup\";\nimport CompanyApprovalPending from \"./pages/company-approval-pending\";\nimport CompanySettings from \"./pages/company-settings\";\nimport ManageEmployee from \"./pages/manage-employee\";\nimport AddEmployee from \"./pages/add-employee\";\nimport ViewEmployee from \"./pages/view-employee\";\nimport EditEmployee from \"./pages/edit-employee\";\nimport AttendancePage from \"./pages/attendance\";\nimport DailyLogPage from \"./pages/daily-log\";\nimport PayrollPage from \"./pages/payroll\";\nimport LeaveApplicationPage from \"./pages/leave-application\";\nimport AdvanceRequestPage from \"./pages/advance-request\";\nimport AdminLeaveManagement from \"./pages/admin-leave-management\";\nimport AdminAdvanceManagement from \"./pages/admin-advance-management\";\nimport SignupPage from \"@/pages/signup\";\nimport ClientCompliances from \"./pages/client-compliances\";\n\nimport ProtectedRoute from \"@/components/layout/protected-route\";\nimport CompanyRequiredRoute from \"@/components/layout/company-required-route\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <DashboardPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin-dashboard\">\n        <ProtectedRoute>\n          <DashboardPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/employee-dashboard\">\n        <ProtectedRoute>\n          <DashboardPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/employees\">\n        <ProtectedRoute>\n          <EmployeesPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/employees\">\n        <ProtectedRoute>\n          <EmployeesPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/jobs\">\n        <ProtectedRoute>\n          <JobsPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/profile\">\n        <ProtectedRoute>\n          <EmployeeProfile />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/employee/profile\">\n        <ProtectedRoute>\n          <EmployeeProfile />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/users\">\n        <ProtectedRoute>\n          <UserManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/companies\">\n        <ProtectedRoute>\n          <CompanyManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/permissions\">\n        <ProtectedRoute>\n          <PermissionManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/employee/permissions\">\n        <ProtectedRoute>\n          <CompanyRequiredRoute>\n            <PermissionRequestSimple />\n          </CompanyRequiredRoute>\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/recruitment\">\n        <ProtectedRoute>\n          <RecruitmentDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/company-profile-setup\">\n        <ProtectedRoute>\n          <CompanyProfileSetup />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/company-approval-pending\">\n        <ProtectedRoute>\n          <CompanyApprovalPending />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/company-settings\">\n        <ProtectedRoute>\n          <CompanySettings />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/manage-employee\">\n        <ProtectedRoute>\n          <ManageEmployee />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/attendance\">\n        <ProtectedRoute>\n          <CompanyRequiredRoute>\n            <AttendancePage />\n          </CompanyRequiredRoute>\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/attendance\">\n        <ProtectedRoute>\n          <AttendancePage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/attendance/daily-log/:employeeId/:year/:month\">\n        {(params) => (\n          <ProtectedRoute>\n            <DailyLogPage />\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/employee/attendance\">\n        <ProtectedRoute>\n          <CompanyRequiredRoute>\n            <AttendancePage />\n          </CompanyRequiredRoute>\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/add-employee\">\n        <ProtectedRoute>\n          <AddEmployee />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/employees/:id/view\">\n        {(params) => (\n          <ProtectedRoute>\n            <ViewEmployee params={params} />\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/employees/:id/edit\">\n        {(params) => (\n          <ProtectedRoute>\n            <EditEmployee params={params} />\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/payroll\">\n        <ProtectedRoute>\n          <PayrollPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/leave-application\">\n        <ProtectedRoute>\n          <CompanyRequiredRoute>\n            <LeaveApplicationPage />\n          </CompanyRequiredRoute>\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/employee/leave-application\">\n        <ProtectedRoute>\n          <CompanyRequiredRoute>\n            <LeaveApplicationPage />\n          </CompanyRequiredRoute>\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/advance-request\">\n        <ProtectedRoute>\n          <CompanyRequiredRoute>\n            <AdvanceRequestPage />\n          </CompanyRequiredRoute>\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/employee/advance-request\">\n        <ProtectedRoute>\n          <CompanyRequiredRoute>\n            <AdvanceRequestPage />\n          </CompanyRequiredRoute>\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/leave-management\">\n        <ProtectedRoute>\n          <AdminLeaveManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/advance-management\">\n        <ProtectedRoute>\n          <AdminAdvanceManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/client-compliances\">\n        <ProtectedRoute>\n          <ClientCompliances />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/client-compliances\">\n        <ProtectedRoute>\n          <ClientCompliances />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":7483},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(248, 50%, 98%);\n  --foreground: hsl(210, 44%, 12%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 20%, 45%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 44%, 12%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 44%, 12%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(155, 64%, 39%);\n  --secondary-foreground: hsl(211, 100%, 99%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(210, 44%, 12%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n  \n  /* Custom HR System Colors */\n  --hr-primary: hsl(207, 90%, 54%);\n  --hr-secondary: hsl(155, 64%, 39%);\n  --hr-background: hsl(210, 40%, 98%);\n  --hr-text-primary: hsl(210, 44%, 12%);\n  --hr-accent: hsl(0, 84%, 60%);\n  --hr-neutral: hsl(215, 20%, 45%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .hr-primary {\n    color: var(--hr-primary);\n  }\n  \n  .hr-secondary {\n    color: var(--hr-secondary);\n  }\n  \n  .hr-background {\n    background-color: var(--hr-background);\n  }\n  \n  .hr-text-primary {\n    color: var(--hr-text-primary);\n  }\n  \n  .hr-accent {\n    color: var(--hr-accent);\n  }\n  \n  .hr-neutral {\n    color: var(--hr-neutral);\n  }\n  \n  .bg-hr-primary {\n    background-color: var(--hr-primary);\n  }\n  \n  .bg-hr-secondary {\n    background-color: var(--hr-secondary);\n  }\n  \n  .bg-hr-background {\n    background-color: var(--hr-background);\n  }\n  \n  .bg-hr-accent {\n    background-color: var(--hr-accent);\n  }\n  \n  .border-hr-primary {\n    border-color: var(--hr-primary);\n  }\n}\n\n/* Custom scrollbar styles */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(210, 40%, 96%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(215, 20%, 65%);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(215, 20%, 55%);\n}\n","size_bytes":3019},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/aadhar-verification-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Shield, CheckCircle } from \"lucide-react\";\n\ninterface AadharVerificationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AadharVerificationModal({\n  isOpen,\n  onClose,\n}: AadharVerificationModalProps) {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [aadharNumber, setAadharNumber] = useState(\"\");\n  const [isVerified, setIsVerified] = useState(false);\n\n  // Format Aadhar number with spaces (XXXX XXXX XXXX)\n  const formatAadhar = (value: string) => {\n    const cleaned = value.replace(/\\s/g, \"\");\n    const formatted = cleaned.replace(/(.{4})/g, \"$1 \").trim();\n    return formatted.substring(0, 14); // Limit to 12 digits + 2 spaces\n  };\n\n  const validateAadhar = (aadhar: string) => {\n    const cleaned = aadhar.replace(/\\s/g, \"\");\n    return /^\\d{12}$/.test(cleaned);\n  };\n\n  // Mock Aadhar verification API\n  const verifyAadharMutation = useMutation({\n    mutationFn: async (aadharNo: string) => {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mock verification logic - in real implementation, this would call government API\n      const cleaned = aadharNo.replace(/\\s/g, \"\");\n      \n      // For demo: accept any 12-digit number, reject invalid formats\n      if (!validateAadhar(aadharNo)) {\n        throw new Error(\"Invalid Aadhar number format\");\n      }\n      \n      // Mock some random verification failures for demo\n      if (cleaned === \"000000000000\" || cleaned === \"111111111111\") {\n        throw new Error(\"Aadhar number not found in government database\");\n      }\n      \n      return {\n        verified: true,\n        name: \"John Doe\", // Mock name from Aadhar\n        address: \"Mock Address from Aadhar Database\",\n        dateOfBirth: \"1990-01-01\"\n      };\n    },\n    onSuccess: (data) => {\n      setIsVerified(true);\n      toast({\n        title: \"Aadhar Verified Successfully\",\n        description: `Welcome ${data.name}! You can now proceed with employee registration.`,\n      });\n      \n      // Auto-redirect after 2 seconds\n      setTimeout(() => {\n        onClose();\n        setLocation('/admin/add-employee');\n      }, 2000);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateAadhar(aadharNumber)) {\n      toast({\n        title: \"Invalid Aadhar Number\",\n        description: \"Please enter a valid 12-digit Aadhar number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    verifyAadharMutation.mutate(aadharNumber);\n  };\n\n  const handleAadharChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatAadhar(e.target.value);\n    setAadharNumber(formatted);\n  };\n\n  const handleClose = () => {\n    setAadharNumber(\"\");\n    setIsVerified(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            {isVerified ? (\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            ) : (\n              <Shield className=\"h-5 w-5 text-blue-600\" />\n            )}\n            Aadhar Verification\n          </DialogTitle>\n          <DialogDescription>\n            {isVerified\n              ? \"Your Aadhar has been successfully verified. Redirecting to employee registration...\"\n              : \"Enter your 12-digit Aadhar number to verify your identity before creating an employee profile.\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        {!isVerified && (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"aadhar\">Aadhar Number *</Label>\n              <Input\n                id=\"aadhar\"\n                value={aadharNumber}\n                onChange={handleAadharChange}\n                placeholder=\"XXXX XXXX XXXX\"\n                maxLength={14}\n                className=\"text-center text-lg tracking-wider font-mono\"\n                disabled={verifyAadharMutation.isPending}\n                required\n              />\n              <p className=\"text-xs text-gray-500\">\n                Enter your 12-digit Aadhar number (spaces will be added automatically)\n              </p>\n            </div>\n\n            <DialogFooter className=\"flex gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={verifyAadharMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={verifyAadharMutation.isPending || !validateAadhar(aadharNumber)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {verifyAadharMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Verifying...\n                  </>\n                ) : (\n                  \"Verify Aadhar\"\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        )}\n\n        {isVerified && (\n          <div className=\"text-center py-6\">\n            <CheckCircle className=\"h-16 w-16 text-green-600 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-green-700 mb-2\">\n              Verification Successful!\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              Your identity has been verified. You will be redirected to the employee registration form shortly.\n            </p>\n            <div className=\"flex justify-center\">\n              <Loader2 className=\"h-5 w-5 animate-spin text-blue-600\" />\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6521},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport { type LoginData, type User } from \"@shared/schema\";\nimport { useState, useEffect } from \"react\";\n\ninterface AuthResponse {\n  user: User;\n  token: string;\n}\n\ninterface AuthUser {\n  id: number;\n  email: string;\n  username: string;\n  role: 'system_admin' | 'admin' | 'employee';\n  companyId: number | null;\n}\n\nclass AuthService {\n  private tokenKey = 'token';\n  private userKey = 'user';\n\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  getUser(): AuthUser | null {\n    const userData = localStorage.getItem(this.userKey);\n    return userData ? JSON.parse(userData) : null;\n  }\n\n  setAuth(response: AuthResponse): void {\n    localStorage.setItem(this.tokenKey, response.token);\n    localStorage.setItem(this.userKey, JSON.stringify(response.user));\n  }\n\n  clearAuth(): void {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n  }\n\n  async login(credentials: LoginData): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/auth/login', credentials);\n    const data = await response.json();\n    this.setAuth(data);\n    return data;\n  }\n\n  async logout(): Promise<void> {\n    this.clearAuth();\n  }\n\n  async getCurrentUser(): Promise<AuthUser> {\n    const response = await apiRequest('GET', '/api/auth/me');\n    const data = await response.json();\n    return data.user;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  hasRole(roles: string[]): boolean {\n    const user = this.getUser();\n    return user ? roles.includes(user.role) : false;\n  }\n\n  canAccessCompany(companyId: number): boolean {\n    const user = this.getUser();\n    if (!user) return false;\n    if (user.role === 'system_admin') return true;\n    return user.companyId === companyId;\n  }\n\n  // Check if user has specific permission (checking user_permissions table)\n  async hasPermission(permissionType: string): Promise<boolean> {\n    const user = this.getUser();\n    if (!user) return false;\n    \n    // System admins have all permissions\n    if (user.role === 'system_admin') return true;\n    \n    try {\n      // Check user_permissions table for granted and active permissions\n      const response = await fetch(`/api/user-permissions/${user.id}/check/${permissionType}`, {\n        headers: {\n          'Authorization': `Bearer ${this.getToken()}`,\n        },\n      });\n      \n      if (!response.ok) return false;\n      \n      const result = await response.json();\n      return result.hasPermission || false;\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      return false;\n    }\n  }\n}\n\nexport const authService = new AuthService();\n\n// Add authorization header to requests\nconst originalApiRequest = apiRequest;\nexport const apiRequestWithAuth = async (method: string, url: string, data?: unknown): Promise<Response> => {\n  const token = authService.getToken();\n  const headers: HeadersInit = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (token) {\n    // Clean the token to ensure it doesn't have any extra characters\n    const cleanToken = token.trim();\n    headers[\"Authorization\"] = `Bearer ${cleanToken}`;\n    \n    // Debug logging for job creation\n    if (url.includes('/api/jobs') && method === 'POST') {\n      console.log('Job creation request - Token length:', cleanToken.length);\n      console.log('Job creation request - Token starts with:', cleanToken.substring(0, 20));\n    }\n  }\n\n  const response = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // Try to refresh token on auth failure for critical operations\n  if (response.status === 401 && !response.url.includes('/login')) {\n    console.log('Authentication failed for:', method, url);\n    \n    // For job creation, try to refresh current user and retry once\n    if (url.includes('/api/jobs') && method === 'POST') {\n      try {\n        console.log('Attempting to refresh user session...');\n        const refreshResponse = await fetch('/api/auth/me', {\n          headers: { \"Authorization\": `Bearer ${authService.getToken()}` }\n        });\n        \n        if (refreshResponse.ok) {\n          console.log('Session refresh successful, retrying job creation...');\n          // Retry the original request once\n          const retryResponse = await fetch(url, {\n            method,\n            headers,\n            body: data ? JSON.stringify(data) : undefined,\n            credentials: \"include\",\n          });\n          \n          if (retryResponse.ok) {\n            return retryResponse;\n          }\n        }\n      } catch (refreshError) {\n        console.error('Session refresh failed:', refreshError);\n      }\n    }\n    \n    console.log('Final authentication failure, clearing auth');\n    authService.clearAuth();\n    window.location.href = '/login';\n    return response;\n  }\n\n  if (!response.ok) {\n    const text = (await response.text()) || response.statusText;\n    throw new Error(`${response.status}: ${text}`);\n  }\n\n  return response;\n};\n\n\n\n// Hook for React components\nexport const useAuth = () => {\n  const user = authService.getUser();\n  const token = authService.getToken();\n  const isAuthenticated = !!user && !!token;\n  \n  return {\n    user,\n    token,\n    isAuthenticated,\n    login: authService.login,\n    logout: authService.logout,\n    hasPermission: authService.hasPermission,\n  };\n};\n\n// Permission checking hook for React components\nexport const usePermission = (permissionType: string) => {\n  const [hasPermission, setHasPermission] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const { user } = useAuth();\n  \n  useEffect(() => {\n    const checkPermission = async () => {\n      if (!user) {\n        setHasPermission(false);\n        setLoading(false);\n        return;\n      }\n      \n      try {\n        const permission = await authService.hasPermission(permissionType);\n        setHasPermission(permission);\n      } catch (error) {\n        console.error('Permission check failed:', error);\n        setHasPermission(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkPermission();\n  }, [permissionType, user]);\n  \n  return { hasPermission, loading };\n};\n","size_bytes":6285},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nfunction getAuthHeaders(): HeadersInit {\n  const token = localStorage.getItem('token');\n  const headers: HeadersInit = {};\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: HeadersInit = {\n    ...getAuthHeaders(),\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // Only logout on authentication errors, not permission errors\n  if (res.status === 401 && !res.url.includes('/login')) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers = getAuthHeaders();\n    const url = queryKey.join(\"/\") as string;\n    console.log('Fetching URL:', url);\n    \n    const res = await fetch(url, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    // Only logout on authentication errors, not permission errors  \n    if (res.status === 401 && !res.url.includes('/login')) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2283},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/aadhaar-verification.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AlertTriangle, Shield, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequestWithAuth } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function AadhaarVerification() {\n  const [aadhaarNumber, setAadhaarNumber] = useState(\"\");\n  const [isVerified, setIsVerified] = useState(false);\n  const { toast } = useToast();\n\n  // Format Aadhaar number with spaces\n  const formatAadhaar = (value: string) => {\n    const cleaned = value.replace(/\\D/g, '');\n    const formatted = cleaned.replace(/(\\d{4})(\\d{4})(\\d{4})/, '$1 $2 $3');\n    return formatted.slice(0, 14); // Limit to 12 digits + 2 spaces\n  };\n\n  const handleAadhaarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatAadhaar(e.target.value);\n    setAadhaarNumber(formatted);\n  };\n\n  const verifyAadhaarMutation = useMutation({\n    mutationFn: async (aadhaar: string) => {\n      // Simulate UIDAI API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mock verification - in real implementation, call UIDAI API\n      const cleanAadhaar = aadhaar.replace(/\\s/g, '');\n      if (cleanAadhaar.length !== 12) {\n        throw new Error(\"Invalid Aadhaar number\");\n      }\n      \n      // Update KYC details with verified Aadhaar\n      const response = await apiRequestWithAuth('PUT', '/api/employee/kyc', {\n        aadharNo: cleanAadhaar,\n        isAadhaarVerified: true\n      });\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      setIsVerified(true);\n      toast({\n        title: \"Aadhaar Verified Successfully!\",\n        description: \"Profile information has been loaded. You can now access all application features.\",\n      });\n      // Invalidate all related queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/employee/profile'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/employee/kyc'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/employee/aadhaar-status'] });\n      \n      // Redirect to profile to see loaded information\n      setTimeout(() => {\n        window.location.href = '/profile';\n      }, 2000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Please check your Aadhaar number and try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleVerify = () => {\n    const cleanAadhaar = aadhaarNumber.replace(/\\s/g, '');\n    if (cleanAadhaar.length !== 12) {\n      toast({\n        title: \"Invalid Aadhaar Number\",\n        description: \"Please enter a valid 12-digit Aadhaar number.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    verifyAadhaarMutation.mutate(aadhaarNumber);\n  };\n\n  if (isVerified) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n              <CheckCircle className=\"w-6 h-6 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-green-700\">Verification Complete!</CardTitle>\n            <CardDescription>\n              Your Aadhaar has been successfully verified. Redirecting to dashboard...\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mb-4\">\n            <Shield className=\"w-6 h-6 text-orange-600\" />\n          </div>\n          <CardTitle className=\"text-orange-700\">Aadhaar Verification Required</CardTitle>\n          <CardDescription>\n            You must verify your Aadhaar number to access the application\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n            <div className=\"flex items-start\">\n              <AlertTriangle className=\"w-5 h-5 text-orange-600 mt-0.5 mr-3 flex-shrink-0\" />\n              <div className=\"text-sm text-orange-800\">\n                <p className=\"font-medium mb-1\">Mandatory Verification</p>\n                <p>As per company policy, all employees must verify their Aadhaar number before accessing any application features.</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"aadhaar\">Aadhaar Number</Label>\n            <Input\n              id=\"aadhaar\"\n              type=\"text\"\n              placeholder=\"1234 5678 9012\"\n              value={aadhaarNumber}\n              onChange={handleAadhaarChange}\n              maxLength={14}\n              className=\"text-center text-lg tracking-wider\"\n            />\n            <p className=\"text-xs text-gray-500 text-center\">\n              Enter your 12-digit Aadhaar number\n            </p>\n          </div>\n\n          <Button \n            onClick={handleVerify}\n            disabled={verifyAadhaarMutation.isPending || aadhaarNumber.replace(/\\s/g, '').length !== 12}\n            className=\"w-full\"\n          >\n            {verifyAadhaarMutation.isPending ? \"Verifying...\" : \"Verify Aadhaar\"}\n          </Button>\n\n          <div className=\"text-xs text-gray-500 text-center space-y-1\">\n            <p>🔒 Your Aadhaar data is secure and encrypted</p>\n            <p>This verification is done through official UIDAI services</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6176},"client/src/pages/add-employee.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { authService, apiRequestWithAuth, usePermission } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, User, Home, FileText, Clock, DollarSign, Users, Building2, CreditCard, Shield, Calendar, CheckCircle, XCircle, IdCard } from \"lucide-react\";\n\ninterface EmployeeFormData {\n  // Basic Information\n  employeeName: string;\n  fatherName: string;\n  isHusbandName: boolean;\n  dateOfBirth: string;\n  dateOfJoin: string;\n  gender: string;\n  \n  // Work Information\n  departmentId: string;\n  designation: string;\n  branchId: string;\n  costCenterId: string;\n  locationId: string;\n  \n  // Address Information\n  presentAddress: string;\n  permanentAddress: string;\n  \n  // Identity Documents\n  aadharNo: string;\n  panNo: string;\n  \n  // Banking Information\n  bankAccountNo: string;\n  ifscCode: string;\n  \n  // Compliance Information\n  uanNo: string;\n  esicNo: string;\n  \n  // Payroll Information\n  payCode: string;\n  payrollSetting: string;\n  \n  // Time Office Policy Information\n  dutyStartTime: string;\n  dutyEndTime: string;\n  permissibleLateArrival: string;\n  permissibleEarlyDeparture: string;\n  firstWeeklyOffDay: string;\n  secondWeeklyOffDay: string;\n  overtimeApplicable: boolean;\n  presentMarkingDuration: string;\n  \n  // Family Details\n  familyDetails: string;\n}\n\nfunction AddEmployeeContent() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"personal\");\n  const user = authService.getUser();\n  const companyId = user?.companyId;\n\n  const [formData, setFormData] = useState<EmployeeFormData>({\n    employeeName: '',\n    fatherName: '',\n    isHusbandName: false,\n    dateOfBirth: '',\n    dateOfJoin: '',\n    gender: '',\n    departmentId: '',\n    designation: '',\n    branchId: '',\n    costCenterId: '',\n    locationId: '',\n    presentAddress: '',\n    permanentAddress: '',\n    aadharNo: '',\n    panNo: '',\n    bankAccountNo: '',\n    ifscCode: '',\n    uanNo: '',\n    esicNo: '',\n    payCode: '',\n    payrollSetting: '',\n    dutyStartTime: '',\n    dutyEndTime: '',\n    permissibleLateArrival: '',\n    permissibleEarlyDeparture: '',\n    firstWeeklyOffDay: '',\n    secondWeeklyOffDay: '',\n    overtimeApplicable: false,\n    presentMarkingDuration: '',\n    familyDetails: ''\n  });\n\n  const [isLookingUp, setIsLookingUp] = useState(false);\n  const [lookupMessage, setLookupMessage] = useState('');\n  const [showAadhaarPopup, setShowAadhaarPopup] = useState(false);\n  const [aadhaarData, setAadhaarData] = useState<any>(null);\n\n  // Aadhaar lookup mutation\n  const aadhaarLookupMutation = useMutation({\n    mutationFn: async (aadhaarNo: string) => {\n      console.log('🔍 Starting Aadhaar lookup for:', aadhaarNo);\n      try {\n        const response = await apiRequestWithAuth('POST', '/api/admin/lookup-employee-by-aadhaar', {\n          aadhaarNo: aadhaarNo\n        });\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('❌ API Error:', response.status, errorText);\n          throw new Error(`API Error: ${response.status} - ${errorText}`);\n        }\n        \n        const data = await response.json();\n        console.log('✅ Lookup response:', data);\n        return data;\n      } catch (error) {\n        console.error('❌ Lookup failed:', error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      if (data.found) {\n        const { employeeProfile, kycDetails } = data;\n        // Store the fetched data and show approval popup\n        setAadhaarData({\n          employeeProfile,\n          kycDetails,\n          employeeName: `${employeeProfile.firstName} ${employeeProfile.lastName}`.trim(),\n          fatherName: employeeProfile.fatherName || 'Not Available',\n          dateOfBirth: employeeProfile.dateOfBirth ? \n            new Date(employeeProfile.dateOfBirth).toLocaleDateString('en-IN') : \n            'Not Available'\n        });\n        setShowAadhaarPopup(true);\n        setLookupMessage('✅ Employee data found - Please review and approve');\n      } else {\n        setLookupMessage('ℹ️ No existing profile found - proceed with new entry');\n        toast({\n          title: \"New Employee\",\n          description: \"No existing profile found. Please fill in all details.\",\n        });\n      }\n      setIsLookingUp(false);\n    },\n    onError: (error: any) => {\n      setLookupMessage('❌ Error looking up employee data');\n      setIsLookingUp(false);\n      toast({\n        title: \"Lookup Failed\",\n        description: error.message || \"Failed to lookup employee data\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Handle Aadhaar input and trigger lookup\n  const handleAadhaarChange = (value: string) => {\n    console.log('🆔 Aadhaar input changed:', value);\n    \n    // Format Aadhaar as user types (1234 5678 9012)\n    const cleanValue = value.replace(/\\s/g, '');\n    const formattedValue = cleanValue.replace(/(\\d{4})(\\d{4})(\\d{4})/, '$1 $2 $3');\n    \n    console.log('🔢 Clean value:', cleanValue, 'Length:', cleanValue.length);\n    \n    setFormData(prev => ({ ...prev, aadharNo: formattedValue }));\n    \n    // If 12 digits entered, automatically lookup\n    if (cleanValue.length === 12) {\n      console.log('✅ 12 digits entered, triggering lookup...');\n      setIsLookingUp(true);\n      setLookupMessage('🔍 Looking up employee data...');\n      aadhaarLookupMutation.mutate(cleanValue);\n    } else if (cleanValue.length > 12) {\n      // Prevent more than 12 digits\n      const truncated = cleanValue.substring(0, 12);\n      const formattedTruncated = truncated.replace(/(\\d{4})(\\d{4})(\\d{4})/, '$1 $2 $3');\n      setFormData(prev => ({ ...prev, aadharNo: formattedTruncated }));\n      console.log('✂️ Truncated to 12 digits');\n    } else {\n      setLookupMessage('');\n      console.log('⏳ Waiting for 12 digits...');\n    }\n  };\n\n  // Generic input handler for other fields\n  const handleInputChange = (field: keyof EmployeeFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Copy present address to permanent address\n  const copyPresentToPermanent = () => {\n    setFormData(prev => ({\n      ...prev,\n      permanentAddress: prev.presentAddress\n    }));\n  };\n\n  // Handle Aadhaar approval - populate form with fetched data\n  const handleAadhaarApproval = () => {\n    if (aadhaarData) {\n      const { employeeProfile, kycDetails } = aadhaarData;\n      setFormData(prev => ({\n        ...prev,\n        employeeName: `${employeeProfile.firstName} ${employeeProfile.lastName}`.trim(),\n        fatherName: employeeProfile.fatherName || '',\n        presentAddress: employeeProfile.presentAddress || '',\n        permanentAddress: employeeProfile.permanentAddress || '',\n        aadharNo: kycDetails.aadharNo || prev.aadharNo,\n        panNo: kycDetails.panNo || '',\n        bankAccountNo: kycDetails.bankAccountNo || '',\n        ifscCode: kycDetails.ifscCode || '',\n        uanNo: kycDetails.uanNo || '',\n        esicNo: kycDetails.esicNo || ''\n      }));\n      setShowAadhaarPopup(false);\n      setActiveTab('personal'); // Switch to first tab\n      toast({\n        title: \"Data Loaded Successfully\",\n        description: `Employee profile for ${employeeProfile.firstName} ${employeeProfile.lastName} has been loaded. You can modify any information before saving.`,\n      });\n    }\n  };\n\n  // Handle Aadhaar cancellation\n  const handleAadhaarCancellation = () => {\n    setShowAadhaarPopup(false);\n    setAadhaarData(null);\n    setLookupMessage('');\n    // Clear the Aadhaar field to allow new entry\n    setFormData(prev => ({ ...prev, aadharNo: '' }));\n  };\n\n  // Fetch departments\n  const { data: departments = [] } = useQuery<any[]>({\n    queryKey: [`/api/departments/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  // Mock data for other dropdowns (you can replace with real API calls)\n  const designations = [\n    { id: '1', title: 'Software Engineer' },\n    { id: '2', title: 'Senior Software Engineer' },\n    { id: '3', title: 'Team Lead' },\n    { id: '4', title: 'Manager' },\n    { id: '5', title: 'HR Executive' },\n    { id: '6', title: 'Accountant' },\n  ];\n\n  const branches = [\n    { id: '1', name: 'Headquarters' },\n    { id: '2', name: 'West Coast Office' },\n    { id: '3', name: 'Regional Branch' },\n  ];\n\n  const costCenters = [\n    { id: '1', name: 'IT Department', code: 'CC001' },\n    { id: '2', name: 'HR Department', code: 'CC002' },\n    { id: '3', name: 'Finance Department', code: 'CC003' },\n  ];\n\n  const locations = [\n    { id: '1', name: 'Floor 1 - Reception' },\n    { id: '2', name: 'Floor 3 - Development' },\n    { id: '3', name: 'Floor 2 - Administration' },\n  ];\n\n  const payrollSettings = [\n    { id: 'monthly', name: 'Monthly Salary' },\n    { id: 'hourly', name: 'Hourly Wages' },\n    { id: 'contract', name: 'Contract Based' },\n  ];\n\n  const timeOfficePolicies = [\n    { id: 'standard', name: 'Standard 9-5' },\n    { id: 'flexible', name: 'Flexible Hours' },\n    { id: 'shift', name: 'Shift Based' },\n    { id: 'remote', name: 'Remote Work' },\n  ];\n\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: EmployeeFormData) => {\n      // Map form data to database schema\n      const [firstName, ...lastNameParts] = data.employeeName.split(' ');\n      const lastName = lastNameParts.join(' ') || firstName;\n      \n      // Create simplified employee data matching the actual database schema\n      const employeeData = {\n        companyId: companyId,\n        userId: user?.id || 1, // Use current user ID\n        employeeId: data.payCode || `EMP${Date.now()}`,\n        firstName: firstName,\n        lastName: lastName,\n        email: data.employeeName.toLowerCase().replace(/\\s+/g, '.') + '@company.com',\n        phone: data.aadharNo || '',\n        departmentId: data.departmentId ? parseInt(data.departmentId) : undefined,\n        position: data.designation || '',\n        address: data.presentAddress || data.permanentAddress || '',\n        status: 'active' as const,\n      };\n\n      console.log('Sending employee data:', employeeData);\n      \n      const response = await apiRequestWithAuth('POST', '/api/employees', employeeData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/employees/${companyId}`] });\n      toast({\n        title: \"Success\",\n        description: \"Employee created successfully\",\n      });\n      setLocation('/admin/employees');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation\n    if (!formData.employeeName || !formData.dateOfJoin || !formData.gender) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEmployeeMutation.mutate(formData);\n  };\n\n\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setLocation('/admin/employees')}\n          className=\"flex items-center gap-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Employees\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Add New Employee</h1>\n          <p className=\"text-muted-foreground\">Complete employee information form</p>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-7 bg-gray-100 p-1 rounded-lg\">\n            <TabsTrigger \n              value=\"personal\" \n              className=\"flex items-center gap-1 text-xs px-1 py-3 data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n            >\n              <User className=\"h-4 w-4\" />\n              Personal\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"employment\" \n              className=\"flex items-center gap-1 text-xs px-1 py-3 data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n            >\n              <Building2 className=\"h-4 w-4\" />\n              Employment\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"address\" \n              className=\"flex items-center gap-1 text-xs px-1 py-3 data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n            >\n              <Home className=\"h-4 w-4\" />\n              Address\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"identity\" \n              className=\"flex items-center gap-1 text-xs px-1 py-3 data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n            >\n              <Shield className=\"h-4 w-4\" />\n              Identity\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"payroll\" \n              className=\"flex items-center gap-1 text-xs px-1 py-3 data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n            >\n              <DollarSign className=\"h-4 w-4\" />\n              Payroll\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"timeoffice\" \n              className=\"flex items-center gap-1 text-xs px-1 py-3 data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n            >\n              <Clock className=\"h-4 w-4\" />\n              Time Office\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"family\" \n              className=\"flex items-center gap-1 text-xs px-1 py-3 data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n            >\n              <Users className=\"h-4 w-4\" />\n              Family\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Personal Information Tab */}\n          <TabsContent value=\"personal\" className=\"space-y-6\">\n            <Card className=\"border-l-4 border-l-hr-primary\">\n              <CardHeader className=\"bg-gradient-to-r from-hr-primary/5 to-transparent\">\n                <CardTitle className=\"flex items-center gap-3 text-hr-primary\">\n                  <User className=\"h-6 w-6\" />\n                  Personal Information\n                </CardTitle>\n                <CardDescription className=\"text-gray-600\">Basic personal details and identification</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-1 space-y-6\">\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"employeeName\" className=\"text-sm font-semibold text-gray-700\">\n                    Employee Full Name *\n                  </Label>\n                  <Input\n                    id=\"employeeName\"\n                    value={formData.employeeName}\n                    onChange={(e) => handleInputChange('employeeName', e.target.value)}\n                    placeholder=\"Enter complete full name\"\n                    className=\"h-12 border-2 focus:border-hr-primary\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-semibold text-gray-700\">\n                      {formData.isHusbandName ? \"Husband Name\" : \"Father Name\"}\n                    </Label>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"isHusbandName\"\n                        checked={formData.isHusbandName}\n                        onCheckedChange={(checked) => handleInputChange('isHusbandName', checked as boolean)}\n                      />\n                      <Label htmlFor=\"isHusbandName\" className=\"text-xs text-gray-600\">Use Husband Name</Label>\n                    </div>\n                  </div>\n                  <Input\n                    id=\"fatherName\"\n                    value={formData.fatherName}\n                    onChange={(e) => handleInputChange('fatherName', e.target.value)}\n                    placeholder={formData.isHusbandName ? \"Enter husband's name\" : \"Enter father's name\"}\n                    className=\"h-12 border-2 focus:border-hr-primary\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"lg:col-span-1 space-y-6\">\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"dateOfBirth\" className=\"text-sm font-semibold text-gray-700\">\n                    Date of Birth\n                  </Label>\n                  <Input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    value={formData.dateOfBirth}\n                    onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}\n                    className=\"h-12 border-2 focus:border-hr-primary\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"dateOfJoin\" className=\"text-sm font-semibold text-gray-700\">\n                    Date of Joining *\n                  </Label>\n                  <Input\n                    id=\"dateOfJoin\"\n                    type=\"date\"\n                    value={formData.dateOfJoin}\n                    onChange={(e) => handleInputChange('dateOfJoin', e.target.value)}\n                    className=\"h-12 border-2 focus:border-hr-primary\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"lg:col-span-1 space-y-6\">\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"gender\" className=\"text-sm font-semibold text-gray-700\">\n                    Gender *\n                  </Label>\n                  <Select value={formData.gender} onValueChange={(value) => handleInputChange('gender', value)}>\n                    <SelectTrigger className=\"h-12 border-2 focus:border-hr-primary\">\n                      <SelectValue placeholder=\"Choose gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                      <SelectItem value=\"other\">Prefer not to say</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"payCode\" className=\"text-sm font-semibold text-gray-700\">\n                    Employee Pay Code *\n                  </Label>\n                  <Input\n                    id=\"payCode\"\n                    value={formData.payCode}\n                    onChange={(e) => handleInputChange('payCode', e.target.value)}\n                    placeholder=\"Enter employee pay code\"\n                    className=\"h-12 border-2 focus:border-hr-primary\"\n                    required\n                  />\n                  <p className=\"text-xs text-gray-500\">Unique identifier for payroll processing</p>\n                </div>\n              </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Employment Details Tab */}\n          <TabsContent value=\"employment\" className=\"space-y-6\">\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardHeader className=\"bg-gradient-to-r from-blue-50 to-transparent\">\n                <CardTitle className=\"flex items-center gap-3 text-blue-700\">\n                  <Building2 className=\"h-6 w-6\" />\n                  Employment Details\n                </CardTitle>\n                <CardDescription className=\"text-gray-600\">Department, position, and workplace assignment</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"departmentId\" className=\"text-sm font-semibold text-gray-700\">\n                    Department\n                  </Label>\n                  <Select value={formData.departmentId} onValueChange={(value) => handleInputChange('departmentId', value)}>\n                    <SelectTrigger className=\"h-12 border-2 focus:border-blue-500\">\n                      <SelectValue placeholder=\"Choose department\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {departments.map((dept: any) => (\n                        <SelectItem key={dept.id} value={dept.id.toString()}>{dept.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"designation\" className=\"text-sm font-semibold text-gray-700\">\n                    Designation\n                  </Label>\n                  <Select value={formData.designation} onValueChange={(value) => handleInputChange('designation', value)}>\n                    <SelectTrigger className=\"h-12 border-2 focus:border-blue-500\">\n                      <SelectValue placeholder=\"Select job title\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {designations.map((designation) => (\n                        <SelectItem key={designation.id} value={designation.id}>{designation.title}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"branchId\" className=\"text-sm font-semibold text-gray-700\">\n                    Branch/Office\n                  </Label>\n                  <Select value={formData.branchId} onValueChange={(value) => handleInputChange('branchId', value)}>\n                    <SelectTrigger className=\"h-12 border-2 focus:border-blue-500\">\n                      <SelectValue placeholder=\"Select office branch\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {branches.map((branch) => (\n                        <SelectItem key={branch.id} value={branch.id}>{branch.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"costCenterId\" className=\"text-sm font-semibold text-gray-700\">\n                    Cost Center\n                  </Label>\n                  <Select value={formData.costCenterId} onValueChange={(value) => handleInputChange('costCenterId', value)}>\n                    <SelectTrigger className=\"h-12 border-2 focus:border-blue-500\">\n                      <SelectValue placeholder=\"Select cost center\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {costCenters.map((center) => (\n                        <SelectItem key={center.id} value={center.id}>\n                          {center.code} - {center.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"locationId\" className=\"text-sm font-semibold text-gray-700\">\n                    Work Location\n                  </Label>\n                  <Select value={formData.locationId} onValueChange={(value) => handleInputChange('locationId', value)}>\n                    <SelectTrigger className=\"h-12 border-2 focus:border-blue-500\">\n                      <SelectValue placeholder=\"Select work location\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {locations.map((location) => (\n                        <SelectItem key={location.id} value={location.id}>{location.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              </div>\n            </CardContent>\n          </Card>\n          </TabsContent>\n\n          {/* Address Information Tab */}\n          <TabsContent value=\"address\" className=\"space-y-6\">\n            <Card className=\"border-l-4 border-l-green-500\">\n              <CardHeader className=\"bg-gradient-to-r from-green-50 to-transparent\">\n                <CardTitle className=\"flex items-center gap-3 text-green-700\">\n                  <Home className=\"h-6 w-6\" />\n                  Address Information\n                </CardTitle>\n                <CardDescription className=\"text-gray-600\">Current and permanent residential addresses</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"presentAddress\" className=\"text-sm font-semibold text-gray-700\">\n                    Present Address\n                  </Label>\n                  <Textarea\n                    id=\"presentAddress\"\n                    value={formData.presentAddress}\n                    onChange={(e) => handleInputChange('presentAddress', e.target.value)}\n                    placeholder=\"Enter complete current residential address with landmark\"\n                    className=\"min-h-[120px] border-2 focus:border-green-500 resize-none\"\n                    rows={5}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"permanentAddress\" className=\"text-sm font-semibold text-gray-700\">\n                      Permanent Address\n                    </Label>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={copyPresentToPermanent}\n                      className=\"text-xs border-green-500 text-green-600 hover:bg-green-50\"\n                    >\n                      Copy from Present\n                    </Button>\n                  </div>\n                  <Textarea\n                    id=\"permanentAddress\"\n                    value={formData.permanentAddress}\n                    onChange={(e) => handleInputChange('permanentAddress', e.target.value)}\n                    placeholder=\"Enter permanent address (if different from present)\"\n                    className=\"min-h-[120px] border-2 focus:border-green-500 resize-none\"\n                    rows={5}\n                  />\n                </div>\n              </div>\n              </div>\n            </CardContent>\n          </Card>\n          </TabsContent>\n\n          {/* Identity & Financial Information Tab */}\n          <TabsContent value=\"identity\" className=\"space-y-6\">\n            <Card className=\"border-l-4 border-l-purple-500\">\n              <CardHeader className=\"bg-gradient-to-r from-purple-50 to-transparent\">\n                <CardTitle className=\"flex items-center gap-3 text-purple-700\">\n                  <Shield className=\"h-6 w-6\" />\n                  Identity & Financial Information\n                </CardTitle>\n                <CardDescription className=\"text-gray-600\">Government documents, banking details, and compliance information</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n            <div className=\"space-y-8\">\n              {/* Identity Documents */}\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-200\">Identity Documents</h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"aadharNo\" className=\"text-sm font-semibold text-gray-700\">\n                      Aadhar Number <span className=\"text-xs text-blue-600\">(Auto-lookup enabled)</span>\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"aadharNo\"\n                        value={formData.aadharNo}\n                        onChange={(e) => handleAadhaarChange(e.target.value)}\n                        placeholder=\"1234 5678 9012\"\n                        maxLength={14}\n                        className=\"h-12 border-2 focus:border-purple-500 font-mono tracking-wider\"\n                        disabled={isLookingUp}\n                      />\n                      {isLookingUp && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600\"></div>\n                        </div>\n                      )}\n                    </div>\n                    {lookupMessage && (\n                      <p className={`text-xs mt-2 ${\n                        lookupMessage.includes('✅') ? 'text-green-600' : \n                        lookupMessage.includes('❌') ? 'text-red-600' : \n                        lookupMessage.includes('🔍') ? 'text-blue-600' : 'text-gray-600'\n                      }`}>\n                        {lookupMessage}\n                      </p>\n                    )}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        console.log('🧪 Test button clicked');\n                        if (formData.aadharNo.replace(/\\s/g, '').length === 12) {\n                          aadhaarLookupMutation.mutate(formData.aadharNo.replace(/\\s/g, ''));\n                        } else {\n                          console.log('⚠️ Need exactly 12 digits for test');\n                        }\n                      }}\n                      className=\"mt-2 text-xs\"\n                    >\n                      🧪 Test Lookup\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"panNo\" className=\"text-sm font-semibold text-gray-700\">\n                      PAN Number\n                    </Label>\n                    <Input\n                      id=\"panNo\"\n                      value={formData.panNo}\n                      onChange={(e) => handleInputChange('panNo', e.target.value.toUpperCase())}\n                      placeholder=\"ABCDE1234F\"\n                      maxLength={10}\n                      className=\"h-12 border-2 focus:border-purple-500 font-mono tracking-wider uppercase\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Banking Details */}\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-200\">Banking Details</h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"bankAccountNo\" className=\"text-sm font-semibold text-gray-700\">\n                      Bank Account Number\n                    </Label>\n                    <Input\n                      id=\"bankAccountNo\"\n                      value={formData.bankAccountNo}\n                      onChange={(e) => handleInputChange('bankAccountNo', e.target.value)}\n                      placeholder=\"Enter account number\"\n                      className=\"h-12 border-2 focus:border-purple-500 font-mono\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"ifscCode\" className=\"text-sm font-semibold text-gray-700\">\n                      IFSC Code\n                    </Label>\n                    <Input\n                      id=\"ifscCode\"\n                      value={formData.ifscCode}\n                      onChange={(e) => handleInputChange('ifscCode', e.target.value.toUpperCase())}\n                      placeholder=\"ABCD0123456\"\n                      maxLength={11}\n                      className=\"h-12 border-2 focus:border-purple-500 font-mono tracking-wider uppercase\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Compliance Information */}\n              <div>\n                <h4 className=\"font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-200\">Compliance Information</h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"uanNo\" className=\"text-sm font-semibold text-gray-700\">\n                      UAN Number (Provident Fund)\n                    </Label>\n                    <Input\n                      id=\"uanNo\"\n                      value={formData.uanNo}\n                      onChange={(e) => handleInputChange('uanNo', e.target.value.replace(/\\D/g, ''))}\n                      placeholder=\"123456789012\"\n                      maxLength={12}\n                      className=\"h-12 border-2 focus:border-purple-500 font-mono\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"esicNo\" className=\"text-sm font-semibold text-gray-700\">\n                      ESIC Number\n                    </Label>\n                    <Input\n                      id=\"esicNo\"\n                      value={formData.esicNo}\n                      onChange={(e) => handleInputChange('esicNo', e.target.value)}\n                      placeholder=\"1234567890\"\n                      className=\"h-12 border-2 focus:border-purple-500 font-mono\"\n                    />\n                  </div>\n                </div>\n              </div>\n              </div>\n            </CardContent>\n          </Card>\n          </TabsContent>\n\n          {/* Payroll Information Tab */}\n          <TabsContent value=\"payroll\" className=\"space-y-6\">\n            <Card className=\"border-l-4 border-l-orange-500\">\n              <CardHeader className=\"bg-gradient-to-r from-orange-50 to-transparent\">\n                <CardTitle className=\"flex items-center gap-3 text-orange-700\">\n                  <DollarSign className=\"h-6 w-6\" />\n                  Payroll Settings\n                </CardTitle>\n                <CardDescription className=\"text-gray-600\">Compensation structure and payroll configuration</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  <div className=\"space-y-3\">\n                    <Label htmlFor=\"payrollSetting\" className=\"text-sm font-semibold text-gray-700\">\n                      Payroll Setting *\n                    </Label>\n                    <Select value={formData.payrollSetting} onValueChange={(value) => handleInputChange('payrollSetting', value)}>\n                      <SelectTrigger className=\"h-12 border-2 focus:border-orange-500\">\n                        <SelectValue placeholder=\"Choose payroll type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {payrollSettings.map((setting) => (\n                          <SelectItem key={setting.id} value={setting.id}>{setting.name}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Time Office Policy Tab */}\n          <TabsContent value=\"timeoffice\" className=\"space-y-6\">\n            <Card className=\"border-l-4 border-l-indigo-500\">\n              <CardHeader className=\"bg-gradient-to-r from-indigo-50 to-transparent\">\n                <CardTitle className=\"flex items-center gap-3 text-indigo-700\">\n                  <Clock className=\"h-6 w-6\" />\n                  Time Office Policy\n                </CardTitle>\n                <CardDescription className=\"text-gray-600\">Work schedule, attendance rules, and time management policies</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                  {/* Duty Timing */}\n                  <div className=\"space-y-6\">\n                    <h4 className=\"font-semibold text-indigo-700 border-b border-indigo-200 pb-2\">Work Timing</h4>\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"dutyStartTime\" className=\"text-sm font-semibold text-gray-700\">\n                        Duty Start Time *\n                      </Label>\n                      <Input\n                        id=\"dutyStartTime\"\n                        type=\"time\"\n                        value={formData.dutyStartTime}\n                        onChange={(e) => handleInputChange('dutyStartTime', e.target.value)}\n                        className=\"h-12 border-2 focus:border-indigo-500\"\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"dutyEndTime\" className=\"text-sm font-semibold text-gray-700\">\n                        Duty End Time *\n                      </Label>\n                      <Input\n                        id=\"dutyEndTime\"\n                        type=\"time\"\n                        value={formData.dutyEndTime}\n                        onChange={(e) => handleInputChange('dutyEndTime', e.target.value)}\n                        className=\"h-12 border-2 focus:border-indigo-500\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  {/* Permissible Timing */}\n                  <div className=\"space-y-6\">\n                    <h4 className=\"font-semibold text-indigo-700 border-b border-indigo-200 pb-2\">Flexibility Rules</h4>\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"permissibleLateArrival\" className=\"text-sm font-semibold text-gray-700\">\n                        Permissible Late Arrival (minutes)\n                      </Label>\n                      <Input\n                        id=\"permissibleLateArrival\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"120\"\n                        value={formData.permissibleLateArrival}\n                        onChange={(e) => handleInputChange('permissibleLateArrival', e.target.value)}\n                        placeholder=\"30\"\n                        className=\"h-12 border-2 focus:border-indigo-500\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"permissibleEarlyDeparture\" className=\"text-sm font-semibold text-gray-700\">\n                        Permissible Early Departure (minutes)\n                      </Label>\n                      <Input\n                        id=\"permissibleEarlyDeparture\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"120\"\n                        value={formData.permissibleEarlyDeparture}\n                        onChange={(e) => handleInputChange('permissibleEarlyDeparture', e.target.value)}\n                        placeholder=\"15\"\n                        className=\"h-12 border-2 focus:border-indigo-500\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"presentMarkingDuration\" className=\"text-sm font-semibold text-gray-700\">\n                        Present Marking Duration (hours)\n                      </Label>\n                      <Input\n                        id=\"presentMarkingDuration\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"12\"\n                        step=\"0.5\"\n                        value={formData.presentMarkingDuration}\n                        onChange={(e) => handleInputChange('presentMarkingDuration', e.target.value)}\n                        placeholder=\"4\"\n                        className=\"h-12 border-2 focus:border-indigo-500\"\n                      />\n                      <p className=\"text-xs text-gray-500\">Minimum hours for half-day marking</p>\n                    </div>\n                  </div>\n\n                  {/* Weekly Offs & OT */}\n                  <div className=\"space-y-6\">\n                    <h4 className=\"font-semibold text-indigo-700 border-b border-indigo-200 pb-2\">Weekly Offs & Overtime</h4>\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"firstWeeklyOffDay\" className=\"text-sm font-semibold text-gray-700\">\n                        First Weekly Off Day *\n                      </Label>\n                      <Select value={formData.firstWeeklyOffDay} onValueChange={(value) => handleInputChange('firstWeeklyOffDay', value)}>\n                        <SelectTrigger className=\"h-12 border-2 focus:border-indigo-500\">\n                          <SelectValue placeholder=\"Select day\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"sunday\">Sunday</SelectItem>\n                          <SelectItem value=\"monday\">Monday</SelectItem>\n                          <SelectItem value=\"tuesday\">Tuesday</SelectItem>\n                          <SelectItem value=\"wednesday\">Wednesday</SelectItem>\n                          <SelectItem value=\"thursday\">Thursday</SelectItem>\n                          <SelectItem value=\"friday\">Friday</SelectItem>\n                          <SelectItem value=\"saturday\">Saturday</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label htmlFor=\"secondWeeklyOffDay\" className=\"text-sm font-semibold text-gray-700\">\n                        Second Weekly Off Day\n                      </Label>\n                      <Select value={formData.secondWeeklyOffDay} onValueChange={(value) => handleInputChange('secondWeeklyOffDay', value)}>\n                        <SelectTrigger className=\"h-12 border-2 focus:border-indigo-500\">\n                          <SelectValue placeholder=\"Select day (optional)\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">None</SelectItem>\n                          <SelectItem value=\"sunday\">Sunday</SelectItem>\n                          <SelectItem value=\"monday\">Monday</SelectItem>\n                          <SelectItem value=\"tuesday\">Tuesday</SelectItem>\n                          <SelectItem value=\"wednesday\">Wednesday</SelectItem>\n                          <SelectItem value=\"thursday\">Thursday</SelectItem>\n                          <SelectItem value=\"friday\">Friday</SelectItem>\n                          <SelectItem value=\"saturday\">Saturday</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Checkbox\n                          id=\"overtimeApplicable\"\n                          checked={formData.overtimeApplicable}\n                          onCheckedChange={(checked) => handleInputChange('overtimeApplicable', checked as boolean)}\n                          className=\"border-2 border-indigo-500\"\n                        />\n                        <Label htmlFor=\"overtimeApplicable\" className=\"text-sm font-semibold text-gray-700\">\n                          Overtime Applicable\n                        </Label>\n                      </div>\n                      <p className=\"text-xs text-gray-500 pl-7\">\n                        Enable overtime calculation for extra working hours\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Family & Emergency Contact Tab */}\n          <TabsContent value=\"family\" className=\"space-y-6\">\n            <Card className=\"border-l-4 border-l-pink-500\">\n              <CardHeader className=\"bg-gradient-to-r from-pink-50 to-transparent\">\n                <CardTitle className=\"flex items-center gap-3 text-pink-700\">\n                  <Users className=\"h-6 w-6\" />\n                  Family & Emergency Contact\n                </CardTitle>\n                <CardDescription className=\"text-gray-600\">Family member information and emergency contact details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-8\">\n            <div className=\"space-y-3\">\n              <Label htmlFor=\"familyDetails\" className=\"text-sm font-semibold text-gray-700\">\n                Family Details & Emergency Contact\n              </Label>\n              <Textarea\n                id=\"familyDetails\"\n                value={formData.familyDetails}\n                onChange={(e) => handleInputChange('familyDetails', e.target.value)}\n                placeholder=\"Enter family member details, emergency contact person name, relationship, phone number, address, etc.\"\n                className=\"min-h-[150px] border-2 focus:border-pink-500 resize-none\"\n                rows={6}\n              />\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Include: Emergency contact name, relationship, phone number, alternate contact details, family member information for benefits/insurance purposes\n              </p>\n              </div>\n            </CardContent>\n          </Card>\n          </TabsContent>\n\n          {/* Submit Actions - Always visible */}\n          <div className=\"bg-gray-50 p-8 rounded-lg border border-gray-200 mt-8\">\n            <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n              <div className=\"text-sm text-gray-600\">\n                <p className=\"font-medium\">Ready to create employee profile?</p>\n                <p>All information will be saved securely in the system.</p>\n              </div>\n              <div className=\"flex space-x-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation('/admin/employees')}\n                  className=\"px-8 py-3 border-2 hover:bg-gray-100\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"px-8 py-3 bg-hr-primary hover:bg-hr-primary/90 text-white font-semibold shadow-lg\"\n                  disabled={createEmployeeMutation.isPending}\n                >\n                  {createEmployeeMutation.isPending ? (\n                    <>\n                      <Clock className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Creating Employee...\n                    </>\n                  ) : (\n                    <>\n                      <User className=\"mr-2 h-4 w-4\" />\n                      Create Employee Profile\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Tabs>\n      </form>\n\n      {/* Aadhaar Verification Popup */}\n      <Dialog open={showAadhaarPopup} onOpenChange={setShowAadhaarPopup}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-3 text-blue-700\">\n              <IdCard className=\"h-6 w-6\" />\n              Aadhaar Verification - Employee Found\n            </DialogTitle>\n            <DialogDescription>\n              Employee profile found in the system. Please review the details below and approve to proceed.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {aadhaarData && (\n            <div className=\"space-y-4 py-4\">\n              <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                <h4 className=\"font-semibold text-blue-800 mb-3\">Employee Details from Aadhaar</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">Employee Name:</span>\n                    <span className=\"font-semibold text-gray-900\">{aadhaarData.employeeName}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">Father's Name:</span>\n                    <span className=\"font-semibold text-gray-900\">{aadhaarData.fatherName}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-600\">Date of Birth:</span>\n                    <span className=\"font-semibold text-gray-900\">{aadhaarData.dateOfBirth}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-amber-50 p-4 rounded-lg border border-amber-200\">\n                <p className=\"text-sm text-amber-800\">\n                  <strong>Note:</strong> Clicking \"Approve\" will load this employee's existing profile data into the registration form. You can modify any information before saving.\n                </p>\n              </div>\n            </div>\n          )}\n\n          <DialogFooter className=\"gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={handleAadhaarCancellation}\n              className=\"px-6 py-2 border-2 border-gray-300 hover:bg-gray-100\"\n            >\n              <XCircle className=\"mr-2 h-4 w-4\" />\n              Cancel\n            </Button>\n            <Button\n              onClick={handleAadhaarApproval}\n              className=\"px-6 py-2 bg-green-600 hover:bg-green-700 text-white\"\n            >\n              <CheckCircle className=\"mr-2 h-4 w-4\" />\n              Approve & Load Data\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default function AddEmployee() {\n  const { hasPermission: canCreateEmployee, loading: permissionLoading } = usePermission('employee_create');\n  \n  if (permissionLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Checking permissions...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!canCreateEmployee) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <Shield className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-red-600 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-4\">You don't have permission to create employees.</p>\n          <p className=\"text-sm text-gray-500\">Request 'employee_create' permission from your administrator.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <AddEmployeeContent />;\n}","size_bytes":52860},"client/src/pages/admin-advance-management.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CreditCard, Clock, CheckCircle, XCircle, Eye, Filter, Search, Users, DollarSign, AlertCircle } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AdvanceRequest {\n  id: number;\n  employeeId: number;\n  companyId: number;\n  amount: string;\n  reason: string;\n  repaymentPeriod: string;\n  status: string;\n  requestedAt: string;\n  level1ApprovedAt?: string;\n  level2ApprovedAt?: string;\n  finalApprovedAt?: string;\n  rejectedAt?: string;\n  rejectionReason?: string;\n  paidAt?: string;\n  paidAmount?: string;\n  paymentMethod?: string;\n  paymentReference?: string;\n  employee?: {\n    firstName: string;\n    lastName: string;\n    department?: string;\n  };\n}\n\nconst StatusBadges = {\n  pending: { color: \"bg-yellow-100 text-yellow-800\", label: \"Pending\" },\n  approved: { color: \"bg-green-100 text-green-800\", label: \"Approved\" },\n  rejected: { color: \"bg-red-100 text-red-800\", label: \"Rejected\" },\n  cancelled: { color: \"bg-gray-100 text-gray-800\", label: \"Cancelled\" },\n  paid: { color: \"bg-blue-100 text-blue-800\", label: \"Paid\" }\n};\n\nexport default function AdminAdvanceManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAdvance, setSelectedAdvance] = useState<AdvanceRequest | null>(null);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [approvalDialogOpen, setApprovalDialogOpen] = useState(false);\n  const [rejectionDialogOpen, setRejectionDialogOpen] = useState(false);\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [comments, setComments] = useState(\"\");\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\n  const [paymentReference, setPaymentReference] = useState(\"\");\n\n  const user = authService.getUser();\n  const companyId = user?.companyId;\n\n  const { data: advanceRequests = [], isLoading } = useQuery<AdvanceRequest[]>({\n    queryKey: [`/api/advance-requests/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ id, level, comments }: { id: number; level: 1 | 2 | 3; comments?: string }) => {\n      return await apiRequest(`/api/advance-requests/${id}/approve`, 'PUT', { level, comments });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/advance-requests/${companyId}`] });\n      setApprovalDialogOpen(false);\n      setComments(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Advance request approved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve advance request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ id, reason }: { id: number; reason: string }) => {\n      return await apiRequest(`/api/advance-requests/${id}/reject`, 'PUT', { reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/advance-requests/${companyId}`] });\n      setRejectionDialogOpen(false);\n      setRejectionReason(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Advance request rejected\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject advance request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const markPaidMutation = useMutation({\n    mutationFn: async ({ id, amount, method, reference }: { id: number; amount: string; method: string; reference?: string }) => {\n      return await apiRequest(`/api/advance-requests/${id}/mark-paid`, 'PUT', { paidAmount: amount, paymentMethod: method, reference });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/advance-requests/${companyId}`] });\n      setPaymentDialogOpen(false);\n      setPaymentAmount(\"\");\n      setPaymentMethod(\"\");\n      setPaymentReference(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Advance payment recorded successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to record payment\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN');\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR'\n    }).format(parseFloat(amount));\n  };\n\n  const getApprovalStatus = (advance: AdvanceRequest) => {\n    if (advance.status === 'rejected') return 'Rejected';\n    if (advance.status === 'paid') return 'Paid';\n    if (advance.status === 'approved') return 'Fully Approved';\n    \n    if (advance.finalApprovedAt) return 'Final Approved';\n    if (advance.level2ApprovedAt) return 'Level 2 Approved';\n    if (advance.level1ApprovedAt) return 'Level 1 Approved';\n    \n    return 'Pending Approval';\n  };\n\n  const getNextApprovalLevel = (advance: AdvanceRequest): 1 | 2 | 3 => {\n    if (!advance.level1ApprovedAt) return 1;\n    if (!advance.level2ApprovedAt) return 2;\n    return 3;\n  };\n\n  const filteredRequests = advanceRequests.filter(request => {\n    const matchesStatus = filterStatus === \"all\" || request.status === filterStatus;\n    const matchesSearch = !searchTerm || \n      `${request.employee?.firstName} ${request.employee?.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      request.reason.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesStatus && matchesSearch;\n  });\n\n  const stats = {\n    total: advanceRequests.length,\n    pending: advanceRequests.filter(req => req.status === 'pending').length,\n    approved: advanceRequests.filter(req => req.status === 'approved').length,\n    rejected: advanceRequests.filter(req => req.status === 'rejected').length,\n    paid: advanceRequests.filter(req => req.status === 'paid').length,\n    totalAmount: advanceRequests.reduce((sum, req) => sum + parseFloat(req.amount), 0),\n    approvedAmount: advanceRequests\n      .filter(req => req.status === 'approved' || req.status === 'paid')\n      .reduce((sum, req) => sum + parseFloat(req.amount), 0),\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Loading advance requests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Advance Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and approve employee advance requests\n          </p>\n        </div>\n      </div>\n\n      {/* Advance Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n            <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.total}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{stats.pending}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.approved}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Paid</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.paid}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Amount</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-bold\">{formatCurrency(stats.totalAmount.toString())}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved Amount</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-bold text-green-600\">{formatCurrency(stats.approvedAmount.toString())}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filter and Search</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex space-x-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"search\">Search Employee or Reason</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by employee name or advance reason...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"w-48\">\n              <Label htmlFor=\"status\">Filter by Status</Label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Advance Requests List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Advance Requests</CardTitle>\n          <CardDescription>Review and manage employee advance applications</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {filteredRequests.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500 mb-2\">No advance requests found</p>\n              <p className=\"text-sm text-gray-400\">Try adjusting your filters</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredRequests.map((advance) => (\n                <div key={advance.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">\n                            {advance.employee?.firstName} {advance.employee?.lastName}\n                          </h3>\n                          <p className=\"text-sm text-gray-600\">\n                            Amount: {formatCurrency(advance.amount)} • Repayment: {advance.repaymentPeriod} months\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-700 mt-2 line-clamp-2\">{advance.reason}</p>\n                      <div className=\"mt-2 flex items-center space-x-4\">\n                        <Badge className={StatusBadges[advance.status as keyof typeof StatusBadges].color}>\n                          {StatusBadges[advance.status as keyof typeof StatusBadges].label}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">\n                          Requested: {formatDate(advance.requestedAt)}\n                        </span>\n                        <span className=\"text-sm text-gray-600\">\n                          Status: {getApprovalStatus(advance)}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedAdvance(advance);\n                          setViewDialogOpen(true);\n                        }}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        View\n                      </Button>\n                      {advance.status === 'pending' && (\n                        <>\n                          <Button\n                            variant=\"default\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedAdvance(advance);\n                              setApprovalDialogOpen(true);\n                            }}\n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedAdvance(advance);\n                              setRejectionDialogOpen(true);\n                            }}\n                          >\n                            <XCircle className=\"w-4 h-4 mr-1\" />\n                            Reject\n                          </Button>\n                        </>\n                      )}\n                      {advance.status === 'approved' && (\n                        <Button\n                          variant=\"default\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedAdvance(advance);\n                            setPaymentAmount(advance.amount);\n                            setPaymentDialogOpen(true);\n                          }}\n                          className=\"bg-blue-600 hover:bg-blue-700\"\n                        >\n                          <DollarSign className=\"w-4 h-4 mr-1\" />\n                          Mark Paid\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* View Advance Details Dialog */}\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Advance Request Details</DialogTitle>\n            <DialogDescription>Complete information about the advance request</DialogDescription>\n          </DialogHeader>\n          {selectedAdvance && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Employee</Label>\n                  <p className=\"text-sm\">{selectedAdvance.employee?.firstName} {selectedAdvance.employee?.lastName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Amount</Label>\n                  <p className=\"text-sm font-semibold\">{formatCurrency(selectedAdvance.amount)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Repayment Period</Label>\n                  <p className=\"text-sm\">{selectedAdvance.repaymentPeriod} months</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Status</Label>\n                  <Badge className={StatusBadges[selectedAdvance.status as keyof typeof StatusBadges].color}>\n                    {StatusBadges[selectedAdvance.status as keyof typeof StatusBadges].label}\n                  </Badge>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Requested Date</Label>\n                  <p className=\"text-sm\">{formatDate(selectedAdvance.requestedAt)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Approval Status</Label>\n                  <p className=\"text-sm\">{getApprovalStatus(selectedAdvance)}</p>\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Reason</Label>\n                <p className=\"text-sm mt-1 p-2 bg-gray-50 rounded\">{selectedAdvance.reason}</p>\n              </div>\n              {selectedAdvance.rejectionReason && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Rejection Reason</Label>\n                  <p className=\"text-sm mt-1 p-2 bg-red-50 rounded\">{selectedAdvance.rejectionReason}</p>\n                </div>\n              )}\n              {selectedAdvance.status === 'paid' && (\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium mb-2\">Payment Details</h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-500\">Paid Amount</Label>\n                      <p className=\"text-sm\">{formatCurrency(selectedAdvance.paidAmount || selectedAdvance.amount)}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-500\">Payment Method</Label>\n                      <p className=\"text-sm\">{selectedAdvance.paymentMethod}</p>\n                    </div>\n                    {selectedAdvance.paymentReference && (\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-500\">Reference</Label>\n                        <p className=\"text-sm\">{selectedAdvance.paymentReference}</p>\n                      </div>\n                    )}\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-500\">Paid Date</Label>\n                      <p className=\"text-sm\">{selectedAdvance.paidAt ? formatDate(selectedAdvance.paidAt) : 'N/A'}</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Approval Dialog */}\n      <Dialog open={approvalDialogOpen} onOpenChange={setApprovalDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Approve Advance Request</DialogTitle>\n            <DialogDescription>\n              Add comments and approve this advance request (Level {selectedAdvance ? getNextApprovalLevel(selectedAdvance) : 1})\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"comments\">Comments (Optional)</Label>\n              <Textarea\n                id=\"comments\"\n                value={comments}\n                onChange={(e) => setComments(e.target.value)}\n                placeholder=\"Add any comments for this approval...\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setApprovalDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedAdvance) {\n                    approveMutation.mutate({\n                      id: selectedAdvance.id,\n                      level: getNextApprovalLevel(selectedAdvance),\n                      comments\n                    });\n                  }\n                }}\n                disabled={approveMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                {approveMutation.isPending ? \"Approving...\" : \"Approve\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rejection Dialog */}\n      <Dialog open={rejectionDialogOpen} onOpenChange={setRejectionDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Advance Request</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejecting this advance request\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"rejectionReason\">Rejection Reason *</Label>\n              <Textarea\n                id=\"rejectionReason\"\n                value={rejectionReason}\n                onChange={(e) => setRejectionReason(e.target.value)}\n                placeholder=\"Explain why this advance request is being rejected...\"\n                className=\"mt-1\"\n                required\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setRejectionDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedAdvance && rejectionReason.trim()) {\n                    rejectMutation.mutate({\n                      id: selectedAdvance.id,\n                      reason: rejectionReason\n                    });\n                  }\n                }}\n                disabled={rejectMutation.isPending || !rejectionReason.trim()}\n                variant=\"destructive\"\n              >\n                {rejectMutation.isPending ? \"Rejecting...\" : \"Reject\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Payment Dialog */}\n      <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n            <DialogDescription>\n              Record the payment details for this approved advance request\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"paymentAmount\">Payment Amount *</Label>\n              <Input\n                id=\"paymentAmount\"\n                value={paymentAmount}\n                onChange={(e) => setPaymentAmount(e.target.value)}\n                placeholder=\"Enter paid amount\"\n                type=\"number\"\n                className=\"mt-1\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"paymentMethod\">Payment Method *</Label>\n              <Select value={paymentMethod} onValueChange={setPaymentMethod} required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select payment method\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                  <SelectItem value=\"cash\">Cash</SelectItem>\n                  <SelectItem value=\"cheque\">Cheque</SelectItem>\n                  <SelectItem value=\"online\">Online Payment</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"paymentReference\">Payment Reference (Optional)</Label>\n              <Input\n                id=\"paymentReference\"\n                value={paymentReference}\n                onChange={(e) => setPaymentReference(e.target.value)}\n                placeholder=\"Transaction ID, cheque number, etc.\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setPaymentDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedAdvance && paymentAmount && paymentMethod) {\n                    markPaidMutation.mutate({\n                      id: selectedAdvance.id,\n                      amount: paymentAmount,\n                      method: paymentMethod,\n                      reference: paymentReference\n                    });\n                  }\n                }}\n                disabled={markPaidMutation.isPending || !paymentAmount || !paymentMethod}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {markPaidMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":27339},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Link } from \"wouter\";\nimport { Users, Briefcase, Calendar, TrendingUp, UserPlus, FileText, Shield, Building, Search, Download, UserCheck, Clock, CheckCircle, XCircle, Eye, Plus } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const { data: company } = useQuery({\n    queryKey: [`/api/companies/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  // Redirect to appropriate page based on company status\n  useEffect(() => {\n    if (company) {\n      if (!company.profileComplete) {\n        setLocation('/company-profile-setup');\n      } else if (company.status === 'pending' || company.status === 'rejected') {\n        setLocation('/company-approval-pending');\n      }\n    }\n  }, [company, setLocation]);\n\n  const { data: stats } = useQuery({\n    queryKey: [`/api/dashboard/stats/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: employees = [] } = useQuery({\n    queryKey: [`/api/employees/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: [`/api/jobs/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: companyUsers = [] } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  const { data: permissionRequests = [] } = useQuery({\n    queryKey: ['/api/permission-requests'],\n  });\n\n  const { data: jobApplications = [] } = useQuery({\n    queryKey: [`/api/job-applications/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: interviews = [] } = useQuery({\n    queryKey: [`/api/interviews/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const recentEmployees = employees.slice(0, 5);\n  const activeJobs = jobs.filter((job: any) => job.status === 'active');\n  const pendingPermissions = permissionRequests.filter((req: any) => req.status === 'pending').length;\n\n  // Show loading while checking company profile\n  if (!company) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Manage {company?.name} - Complete HR administration\n          </p>\n          {company?.status === 'approved' && (\n            <div className=\"flex items-center gap-2 mt-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-sm text-green-700 font-medium\">Company Status Verified</span>\n            </div>\n          )}\n        </div>\n        <div className=\"flex gap-2\">\n          <Link href=\"/employees\">\n            <Button>\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Add Employee\n            </Button>\n          </Link>\n          <Link href=\"/jobs\">\n            <Button variant=\"outline\">\n              <Briefcase className=\"mr-2 h-4 w-4\" />\n              Post Job\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Recruitment Hub - Improved Design */}\n      <Card className=\"mb-6 border-l-4 border-l-hr-primary\">\n        <CardHeader className=\"bg-gradient-to-r from-hr-primary/5 to-transparent\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2 text-xl\">\n                <UserCheck className=\"h-6 w-6 text-hr-primary\" />\n                Recruitment Management\n              </CardTitle>\n              <CardDescription className=\"mt-1\">\n                Complete hiring solution - Post jobs, manage applications, conduct interviews, and make offers\n              </CardDescription>\n            </div>\n            <Link href=\"/recruitment\">\n              <Button size=\"lg\" className=\"bg-hr-primary hover:bg-hr-primary/90\">\n                <Eye className=\"mr-2 h-5 w-5\" />\n                Open Recruitment Center\n              </Button>\n            </Link>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          <div className=\"grid gap-6 md:grid-cols-4\">\n            {/* Active Jobs */}\n            <div className=\"text-center p-4 rounded-lg bg-blue-50 dark:bg-blue-950/20\">\n              <div className=\"text-2xl font-bold text-blue-600\">{activeJobs.length}</div>\n              <p className=\"text-sm font-medium text-blue-600\">Active Jobs</p>\n              <p className=\"text-xs text-muted-foreground\">Ready for applications</p>\n            </div>\n\n            {/* New Applications */}\n            <div className=\"text-center p-4 rounded-lg bg-green-50 dark:bg-green-950/20\">\n              <div className=\"text-2xl font-bold text-green-600\">{jobApplications.filter((app: any) => app.status === 'applied').length}</div>\n              <p className=\"text-sm font-medium text-green-600\">New Applications</p>\n              <p className=\"text-xs text-muted-foreground\">Awaiting review</p>\n            </div>\n\n            {/* Today's Interviews */}\n            <div className=\"text-center p-4 rounded-lg bg-yellow-50 dark:bg-yellow-950/20\">\n              <div className=\"text-2xl font-bold text-yellow-600\">{interviews.filter((int: any) => new Date(int.scheduledAt).toDateString() === new Date().toDateString()).length}</div>\n              <p className=\"text-sm font-medium text-yellow-600\">Today's Interviews</p>\n              <p className=\"text-xs text-muted-foreground\">Scheduled meetings</p>\n            </div>\n\n            {/* Pending Offers */}\n            <div className=\"text-center p-4 rounded-lg bg-purple-50 dark:bg-purple-950/20\">\n              <div className=\"text-2xl font-bold text-purple-600\">{jobApplications.filter((app: any) => app.status === 'offered').length}</div>\n              <p className=\"text-sm font-medium text-purple-600\">Pending Offers</p>\n              <p className=\"text-xs text-muted-foreground\">Awaiting response</p>\n            </div>\n          </div>\n\n          <div className=\"mt-6 pt-4 border-t\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"grid grid-cols-3 gap-8 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Post & Manage Jobs</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-blue-500\" />\n                  <span>Schedule Interviews</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Download className=\"h-4 w-4 text-purple-500\" />\n                  <span>Download Resumes</span>\n                </div>\n              </div>\n              <Link href=\"/recruitment\">\n                <Button variant=\"outline\">\n                  View Full Dashboard →\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Key Metrics */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalEmployees || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +{employees.filter((e: any) => new Date(e.createdAt) > new Date(Date.now() - 30*24*60*60*1000)).length} this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Jobs</CardTitle>\n            <Briefcase className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.activeJobs || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {jobs.filter((j: any) => j.status === 'draft').length} in draft\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Applications</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.pendingApplications || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Pending review\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Attendance Rate</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {stats?.totalEmployees ? Math.round((stats.todayAttendance / stats.totalEmployees) * 100) : 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.todayAttendance || 0} present today\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Management Quick Actions */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              User Management\n            </CardTitle>\n            <CardDescription>\n              Manage user accounts and permissions\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span>Total Users</span>\n              <Badge>{companyUsers.length}</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Pending Requests</span>\n              <Badge variant=\"secondary\">{pendingPermissions}</Badge>\n            </div>\n            <div className=\"flex gap-2 pt-2\">\n              <Link href=\"/admin/users\">\n                <Button size=\"sm\" className=\"flex-1\">Manage Users</Button>\n              </Link>\n              <Link href=\"/admin/permissions\">\n                <Button size=\"sm\" variant=\"outline\">Permissions</Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building className=\"h-5 w-5\" />\n              Company Settings\n            </CardTitle>\n            <CardDescription>\n              Configure company information and policies\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span>Company Status</span>\n              <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Subscription</span>\n              <Badge variant=\"outline\">{company?.subscriptionPlan || 'Basic'}</Badge>\n            </div>\n            <Link href=\"/admin/company-settings\">\n              <Button size=\"sm\" className=\"w-full\">Configure Settings</Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Performance Overview\n            </CardTitle>\n            <CardDescription>\n              Company metrics and insights\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Employee Satisfaction</span>\n                <span>85%</span>\n              </div>\n              <Progress value={85} className=\"h-2\" />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Recruitment Progress</span>\n                <span>72%</span>\n              </div>\n              <Progress value={72} className=\"h-2\" />\n            </div>\n            <Link href=\"/admin/reports\">\n              <Button size=\"sm\" variant=\"outline\" className=\"w-full\">View Reports</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Employees</CardTitle>\n            <CardDescription>\n              Latest team members added to your company\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {recentEmployees.length > 0 ? (\n              recentEmployees.map((employee: any) => (\n                <div key={employee.id} className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">{employee.firstName} {employee.lastName}</p>\n                    <p className=\"text-sm text-muted-foreground\">{employee.position}</p>\n                  </div>\n                  <Badge variant={\n                    employee.status === 'active' ? 'default' : \n                    employee.status === 'probation' ? 'secondary' : 'destructive'\n                  }>\n                    {employee.status}\n                  </Badge>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-4\">\n                No employees found\n              </p>\n            )}\n            <div className=\"text-center pt-2\">\n              <Link href=\"/employees\">\n                <Button variant=\"outline\" size=\"sm\">\n                  View All Employees\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Active Job Postings</CardTitle>\n            <CardDescription>\n              Current open positions in your company\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {activeJobs.length > 0 ? (\n              activeJobs.slice(0, 5).map((job: any) => (\n                <div key={job.id} className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">{job.title}</p>\n                    <p className=\"text-sm text-muted-foreground\">{job.location}</p>\n                  </div>\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    {job.employmentType}\n                  </Badge>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-4\">\n                No active job postings\n              </p>\n            )}\n            <div className=\"text-center pt-2\">\n              <Link href=\"/jobs\">\n                <Button variant=\"outline\" size=\"sm\">\n                  Manage Jobs\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16138},"client/src/pages/admin-leave-management.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, Clock, CheckCircle, XCircle, Eye, Filter, Search, Users, FileText } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface LeaveRequest {\n  id: number;\n  employeeId: number;\n  companyId: number;\n  leaveType: string;\n  startDate: string;\n  endDate: string;\n  totalDays: string;\n  reason: string;\n  status: string;\n  appliedAt: string;\n  level1ApprovedAt?: string;\n  level2ApprovedAt?: string;\n  finalApprovedAt?: string;\n  rejectedAt?: string;\n  rejectionReason?: string;\n  employee?: {\n    firstName: string;\n    lastName: string;\n    department?: string;\n  };\n}\n\nconst StatusBadges = {\n  pending: { color: \"bg-yellow-100 text-yellow-800\", label: \"Pending\" },\n  approved: { color: \"bg-green-100 text-green-800\", label: \"Approved\" },\n  rejected: { color: \"bg-red-100 text-red-800\", label: \"Rejected\" },\n  cancelled: { color: \"bg-gray-100 text-gray-800\", label: \"Cancelled\" }\n};\n\nconst LeaveTypeLabels = {\n  casual: \"Casual Leave\",\n  sick: \"Sick Leave\",\n  annual: \"Annual Leave\",\n  maternity: \"Maternity Leave\",\n  paternity: \"Paternity Leave\",\n  emergency: \"Emergency Leave\"\n};\n\nexport default function AdminLeaveManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedLeave, setSelectedLeave] = useState<LeaveRequest | null>(null);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [approvalDialogOpen, setApprovalDialogOpen] = useState(false);\n  const [rejectionDialogOpen, setRejectionDialogOpen] = useState(false);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [comments, setComments] = useState(\"\");\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n\n  const user = authService.getUser();\n  const companyId = user?.companyId;\n\n  const { data: leaveRequests = [], isLoading } = useQuery<LeaveRequest[]>({\n    queryKey: [`/api/leave-requests/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ id, level, comments }: { id: number; level: 1 | 2 | 3; comments?: string }) => {\n      return await apiRequest(`/api/leave-requests/${id}/approve`, 'PUT', { level, comments });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/leave-requests/${companyId}`] });\n      setApprovalDialogOpen(false);\n      setComments(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Leave request approved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve leave request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ id, reason }: { id: number; reason: string }) => {\n      return await apiRequest(`/api/leave-requests/${id}/reject`, 'PUT', { reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/leave-requests/${companyId}`] });\n      setRejectionDialogOpen(false);\n      setRejectionReason(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Leave request rejected\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject leave request\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN');\n  };\n\n  const getApprovalStatus = (leave: LeaveRequest) => {\n    if (leave.status === 'rejected') return 'Rejected';\n    if (leave.status === 'approved') return 'Fully Approved';\n    \n    if (leave.finalApprovedAt) return 'Final Approved';\n    if (leave.level2ApprovedAt) return 'Level 2 Approved';\n    if (leave.level1ApprovedAt) return 'Level 1 Approved';\n    \n    return 'Pending Approval';\n  };\n\n  const getNextApprovalLevel = (leave: LeaveRequest): 1 | 2 | 3 => {\n    if (!leave.level1ApprovedAt) return 1;\n    if (!leave.level2ApprovedAt) return 2;\n    return 3;\n  };\n\n  const filteredRequests = leaveRequests.filter(request => {\n    const matchesStatus = filterStatus === \"all\" || request.status === filterStatus;\n    const matchesSearch = !searchTerm || \n      `${request.employee?.firstName} ${request.employee?.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      request.leaveType.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesStatus && matchesSearch;\n  });\n\n  const stats = {\n    total: leaveRequests.length,\n    pending: leaveRequests.filter(req => req.status === 'pending').length,\n    approved: leaveRequests.filter(req => req.status === 'approved').length,\n    rejected: leaveRequests.filter(req => req.status === 'rejected').length,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Loading leave requests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Leave Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and approve employee leave requests\n          </p>\n        </div>\n      </div>\n\n      {/* Leave Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.total}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{stats.pending}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.approved}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{stats.rejected}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filter and Search</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex space-x-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"search\">Search Employee or Leave Type</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by employee name or leave type...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"w-48\">\n              <Label htmlFor=\"status\">Filter by Status</Label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Leave Requests List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Leave Requests</CardTitle>\n          <CardDescription>Review and manage employee leave applications</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {filteredRequests.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500 mb-2\">No leave requests found</p>\n              <p className=\"text-sm text-gray-400\">Try adjusting your filters</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredRequests.map((leave) => (\n                <div key={leave.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">\n                            {leave.employee?.firstName} {leave.employee?.lastName}\n                          </h3>\n                          <p className=\"text-sm text-gray-600\">\n                            {LeaveTypeLabels[leave.leaveType as keyof typeof LeaveTypeLabels]} • \n                            {formatDate(leave.startDate)} to {formatDate(leave.endDate)} • {leave.totalDays} day(s)\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-700 mt-2 line-clamp-2\">{leave.reason}</p>\n                      <div className=\"mt-2 flex items-center space-x-4\">\n                        <Badge className={StatusBadges[leave.status as keyof typeof StatusBadges].color}>\n                          {StatusBadges[leave.status as keyof typeof StatusBadges].label}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">\n                          Applied: {formatDate(leave.appliedAt)}\n                        </span>\n                        <span className=\"text-sm text-gray-600\">\n                          Status: {getApprovalStatus(leave)}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedLeave(leave);\n                          setViewDialogOpen(true);\n                        }}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        View\n                      </Button>\n                      {leave.status === 'pending' && (\n                        <>\n                          <Button\n                            variant=\"default\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedLeave(leave);\n                              setApprovalDialogOpen(true);\n                            }}\n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedLeave(leave);\n                              setRejectionDialogOpen(true);\n                            }}\n                          >\n                            <XCircle className=\"w-4 h-4 mr-1\" />\n                            Reject\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* View Leave Details Dialog */}\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Leave Request Details</DialogTitle>\n            <DialogDescription>Complete information about the leave request</DialogDescription>\n          </DialogHeader>\n          {selectedLeave && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Employee</Label>\n                  <p className=\"text-sm\">{selectedLeave.employee?.firstName} {selectedLeave.employee?.lastName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Leave Type</Label>\n                  <p className=\"text-sm\">{LeaveTypeLabels[selectedLeave.leaveType as keyof typeof LeaveTypeLabels]}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Start Date</Label>\n                  <p className=\"text-sm\">{formatDate(selectedLeave.startDate)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">End Date</Label>\n                  <p className=\"text-sm\">{formatDate(selectedLeave.endDate)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Total Days</Label>\n                  <p className=\"text-sm\">{selectedLeave.totalDays}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Status</Label>\n                  <Badge className={StatusBadges[selectedLeave.status as keyof typeof StatusBadges].color}>\n                    {StatusBadges[selectedLeave.status as keyof typeof StatusBadges].label}\n                  </Badge>\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Reason</Label>\n                <p className=\"text-sm mt-1 p-2 bg-gray-50 rounded\">{selectedLeave.reason}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Approval Status</Label>\n                <p className=\"text-sm\">{getApprovalStatus(selectedLeave)}</p>\n              </div>\n              {selectedLeave.rejectionReason && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Rejection Reason</Label>\n                  <p className=\"text-sm mt-1 p-2 bg-red-50 rounded\">{selectedLeave.rejectionReason}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Approval Dialog */}\n      <Dialog open={approvalDialogOpen} onOpenChange={setApprovalDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Approve Leave Request</DialogTitle>\n            <DialogDescription>\n              Add comments and approve this leave request (Level {selectedLeave ? getNextApprovalLevel(selectedLeave) : 1})\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"comments\">Comments (Optional)</Label>\n              <Textarea\n                id=\"comments\"\n                value={comments}\n                onChange={(e) => setComments(e.target.value)}\n                placeholder=\"Add any comments for this approval...\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setApprovalDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedLeave) {\n                    approveMutation.mutate({\n                      id: selectedLeave.id,\n                      level: getNextApprovalLevel(selectedLeave),\n                      comments\n                    });\n                  }\n                }}\n                disabled={approveMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                {approveMutation.isPending ? \"Approving...\" : \"Approve\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rejection Dialog */}\n      <Dialog open={rejectionDialogOpen} onOpenChange={setRejectionDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Leave Request</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejecting this leave request\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"rejectionReason\">Rejection Reason *</Label>\n              <Textarea\n                id=\"rejectionReason\"\n                value={rejectionReason}\n                onChange={(e) => setRejectionReason(e.target.value)}\n                placeholder=\"Explain why this leave request is being rejected...\"\n                className=\"mt-1\"\n                required\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setRejectionDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedLeave && rejectionReason.trim()) {\n                    rejectMutation.mutate({\n                      id: selectedLeave.id,\n                      reason: rejectionReason\n                    });\n                  }\n                }}\n                disabled={rejectMutation.isPending || !rejectionReason.trim()}\n                variant=\"destructive\"\n              >\n                {rejectMutation.isPending ? \"Rejecting...\" : \"Reject\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19945},"client/src/pages/advance-request.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, DollarSign, Clock, User, CheckCircle, XCircle, Eye, CreditCard, ShieldAlert } from \"lucide-react\";\nimport { usePermission } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { AdvanceRequest, InsertAdvanceRequest } from \"@shared/schema\";\n\nconst advanceRequestSchema = z.object({\n  amount: z.string().min(1, \"Amount is required\").refine(\n    (val) => !isNaN(Number(val)) && Number(val) > 0,\n    \"Amount must be a positive number\"\n  ),\n  reason: z.string().min(10, \"Reason must be at least 10 characters\"),\n  repaymentPeriod: z.string().min(1, \"Repayment period is required\").refine(\n    (val) => !isNaN(Number(val)) && Number(val) > 0 && Number(val) <= 24,\n    \"Repayment period must be between 1-24 months\"\n  ),\n});\n\ntype AdvanceRequestForm = z.infer<typeof advanceRequestSchema>;\n\nconst StatusBadges = {\n  pending: { color: \"bg-yellow-100 text-yellow-800\", label: \"Pending\" },\n  approved: { color: \"bg-green-100 text-green-800\", label: \"Approved\" },\n  rejected: { color: \"bg-red-100 text-red-800\", label: \"Rejected\" },\n  cancelled: { color: \"bg-gray-100 text-gray-800\", label: \"Cancelled\" },\n  paid: { color: \"bg-blue-100 text-blue-800\", label: \"Paid\" }\n};\n\nexport default function AdvanceRequest() {\n  const { toast } = useToast();\n  const [requestDialogOpen, setRequestDialogOpen] = useState(false);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [selectedAdvance, setSelectedAdvance] = useState<AdvanceRequest | null>(null);\n  \n  // Check for advance permission\n  const { hasPermission: canRequestAdvance, loading: permissionLoading } = usePermission('advance_request_submit');\n\n  const form = useForm<AdvanceRequestForm>({\n    resolver: zodResolver(advanceRequestSchema),\n    defaultValues: {\n      amount: '',\n      reason: '',\n      repaymentPeriod: '6',\n    },\n  });\n\n  // Get current user\n  const { data: user } = useQuery<{ id: number; companyId: number; role: string }>({\n    queryKey: ['/api/auth/me'],\n  });\n\n  const companyId = user?.companyId;\n\n  // Fetch advance requests\n  const { data: advanceRequests = [], isLoading } = useQuery<AdvanceRequest[]>({\n    queryKey: ['advance-requests', companyId],\n    queryFn: async () => {\n      if (!companyId) throw new Error('No company ID');\n      \n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/advance-requests/${companyId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    enabled: !!companyId,\n  });\n\n  // Submit advance request\n  const submitMutation = useMutation({\n    mutationFn: async (data: AdvanceRequestForm) => {\n      const advanceData: InsertAdvanceRequest = {\n        ...data,\n        amount: data.amount,\n        repaymentPeriod: parseInt(data.repaymentPeriod),\n        companyId: companyId!,\n        employeeId: user!.id,\n      };\n\n      const response = await apiRequest('POST', '/api/advance-requests', advanceData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Advance request submitted successfully\",\n      });\n      setRequestDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['advance-requests', companyId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit advance request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: AdvanceRequestForm) => {\n    submitMutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(numAmount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getApprovalStatus = (advance: AdvanceRequest) => {\n    if (advance.status === 'rejected') return 'Rejected';\n    if (advance.status === 'paid') return 'Paid';\n    if (advance.status === 'approved') return 'Fully Approved';\n    \n    // Check approval levels\n    if (advance.finalApprovedAt) return 'Final Approved';\n    if (advance.level2ApprovedAt) return 'Level 2 Approved';\n    if (advance.level1ApprovedAt) return 'Level 1 Approved';\n    \n    return 'Pending Approval';\n  };\n\n  // Permission guard - show access denied if user doesn't have permission\n  if (permissionLoading) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto\"></div>\n            <p className=\"mt-2 text-gray-600\">Checking permissions...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!canRequestAdvance && user?.role === 'employee') {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <ShieldAlert className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n            <p className=\"text-gray-600 mb-4\">You don't have permission to access advance requests.</p>\n            <p className=\"text-sm text-gray-500\">Please request the \"advance_request_submit\" permission from your administrator.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Loading advance requests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const totalRequested = advanceRequests.reduce((sum, req) => sum + parseFloat(req.amount), 0);\n  const totalApproved = advanceRequests\n    .filter(req => req.status === 'approved' || req.status === 'paid')\n    .reduce((sum, req) => sum + parseFloat(req.amount), 0);\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Advance Requests</h1>\n          <p className=\"text-gray-600\">Request salary advance and track approval status</p>\n        </div>\n        <Dialog open={requestDialogOpen} onOpenChange={setRequestDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Request Advance\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request Salary Advance</DialogTitle>\n              <DialogDescription>\n                Submit your advance request for approval\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"amount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Amount (₹)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"Enter amount\"\n                          step=\"0.01\"\n                          min=\"1\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"repaymentPeriod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Repayment Period</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select repayment period\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Array.from({ length: 24 }, (_, i) => i + 1).map((month) => (\n                            <SelectItem key={month} value={month.toString()}>\n                              {month} month{month > 1 ? 's' : ''}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"reason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reason</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Please provide reason for advance request...\" \n                          className=\"min-h-[80px]\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setRequestDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={submitMutation.isPending}>\n                    {submitMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Advance Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{advanceRequests.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {advanceRequests.filter(req => req.status === 'pending').length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {advanceRequests.filter(req => req.status === 'approved' || req.status === 'paid').length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Requested</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-bold text-blue-600\">\n              {formatCurrency(totalRequested)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Approved</CardTitle>\n            <CreditCard className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg font-bold text-green-600\">\n              {formatCurrency(totalApproved)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Advance Requests List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>My Advance Requests</CardTitle>\n          <CardDescription>Track your advance request status and approval progress</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {advanceRequests.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <DollarSign className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500 mb-2\">No advance requests found</p>\n              <p className=\"text-sm text-gray-400\">Submit your first advance request to get started</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {advanceRequests.map((advance) => (\n                <div key={advance.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">\n                            {formatCurrency(advance.amount)}\n                          </h3>\n                          <p className=\"text-sm text-gray-600\">\n                            Repayment: {advance.repaymentPeriod} month{advance.repaymentPeriod > 1 ? 's' : ''}\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-700 mt-2 line-clamp-2\">{advance.reason}</p>\n                      <div className=\"mt-2 flex items-center space-x-4\">\n                        <Badge className={StatusBadges[advance.status as keyof typeof StatusBadges].color}>\n                          {StatusBadges[advance.status as keyof typeof StatusBadges].label}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">\n                          Applied: {formatDate(advance.appliedAt.toString())}\n                        </span>\n                        <span className=\"text-sm text-gray-600\">\n                          Status: {getApprovalStatus(advance)}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedAdvance(advance);\n                          setViewDialogOpen(true);\n                        }}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        View Details\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* View Advance Details Dialog */}\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Advance Request Details</DialogTitle>\n          </DialogHeader>\n          {selectedAdvance && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Amount</label>\n                  <p className=\"text-lg font-semibold\">{formatCurrency(selectedAdvance.amount)}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Repayment Period</label>\n                  <p>{selectedAdvance.repaymentPeriod} month{selectedAdvance.repaymentPeriod > 1 ? 's' : ''}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Monthly Deduction</label>\n                  <p>{formatCurrency(parseFloat(selectedAdvance.amount) / selectedAdvance.repaymentPeriod)}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Applied Date</label>\n                  <p>{formatDate(selectedAdvance.appliedAt.toString())}</p>\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Reason</label>\n                <p className=\"mt-1 p-3 bg-gray-50 rounded-md\">{selectedAdvance.reason}</p>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Approval Status</label>\n                <div className=\"mt-2 space-y-2\">\n                  <div className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span>Level 1 Approval</span>\n                    <Badge className={selectedAdvance.level1ApprovedAt ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                      {selectedAdvance.level1ApprovedAt ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span>Level 2 Approval</span>\n                    <Badge className={selectedAdvance.level2ApprovedAt ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                      {selectedAdvance.level2ApprovedAt ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span>Final Approval</span>\n                    <Badge className={selectedAdvance.finalApprovedAt ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                      {selectedAdvance.finalApprovedAt ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {selectedAdvance.status === 'paid' && selectedAdvance.paidAt && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Payment Details</label>\n                  <div className=\"mt-2 p-3 bg-green-50 border border-green-200 rounded-md\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Paid Amount:</span>\n                      <span className=\"font-semibold\">{formatCurrency(selectedAdvance.paidAmount || selectedAdvance.amount)}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center mt-1\">\n                      <span>Payment Date:</span>\n                      <span>{formatDate(selectedAdvance.paidAt.toString())}</span>\n                    </div>\n                    {selectedAdvance.paymentMethod && (\n                      <div className=\"flex justify-between items-center mt-1\">\n                        <span>Payment Method:</span>\n                        <span className=\"capitalize\">{selectedAdvance.paymentMethod}</span>\n                      </div>\n                    )}\n                    {selectedAdvance.paymentReference && (\n                      <div className=\"flex justify-between items-center mt-1\">\n                        <span>Reference:</span>\n                        <span>{selectedAdvance.paymentReference}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {selectedAdvance.rejectionReason && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Rejection Reason</label>\n                  <p className=\"mt-1 p-3 bg-red-50 border border-red-200 rounded-md text-red-800\">\n                    {selectedAdvance.rejectionReason}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21928},"client/src/pages/attendance.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Users, UserCheck, UserX, Coffee, AlertTriangle, Search, Plus, Edit, Trash2, Calendar, Filter, Download, ShieldAlert } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { authService, usePermission } from \"@/lib/auth\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical, Eye, FileText } from \"lucide-react\";\n\ninterface AttendanceSummary {\n  todayPresent: number;\n  todayAbsent: number;\n  todayLeave: number;\n  todayWeeklyOff: number;\n  continuouslyAbsent: number;\n}\n\ninterface EmployeeAttendanceData {\n  id: number;\n  payCode: string;\n  employeeName: string;\n  department: string;\n  present: number;\n  weeklyOff: number;\n  leave: number;\n  holidays: number;\n  payDays: number;\n  otHours: number;\n}\n\nexport default function AttendancePage() {\n  const user = authService.getUser();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Check for attendance permission (using correct permission names)\n  const { hasPermission: canViewAttendance, loading: permissionLoading } = usePermission('attendance_view_all');\n  const { hasPermission: canEditAttendance } = usePermission('attendance_edit');\n  \n  // State for filters and search\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isQuickEntryOpen, setIsQuickEntryOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(\"\");\n  const [payDays, setPayDays] = useState(\"\");\n  const [otHours, setOtHours] = useState(\"\");\n  \n  // Edit dialog state\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingEmployee, setEditingEmployee] = useState<EmployeeAttendanceData | null>(null);\n  const [editPayDays, setEditPayDays] = useState(\"\");\n  const [editOtHours, setEditOtHours] = useState(\"\");\n  \n  // View dialog state\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [viewingEmployee, setViewingEmployee] = useState<EmployeeAttendanceData | null>(null);\n\n  // Get employees for the company\n  const { data: employees = [] } = useQuery({\n    queryKey: [`/api/employees/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  // Get departments\n  const { data: departments = [] } = useQuery({\n    queryKey: [`/api/departments/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  // Get attendance summary data from API\n  const { data: summaryData } = useQuery<AttendanceSummary>({\n    queryKey: ['/api/attendance/summary/today'],\n    enabled: !!user?.companyId,\n  });\n\n  const defaultSummary: AttendanceSummary = {\n    todayPresent: 0,\n    todayAbsent: 0,\n    todayLeave: 0,\n    todayWeeklyOff: 0,\n    continuouslyAbsent: 0\n  };\n\n  // Get real employee attendance data from API\n  const { data: attendanceData = [] } = useQuery<EmployeeAttendanceData[]>({\n    queryKey: [`/api/attendance/employee-data/${user?.companyId}/${selectedYear}/${selectedMonth}`],\n    enabled: !!user?.companyId,\n  });\n\n  // Filter employees based on search term\n  const filteredData = attendanceData.filter(emp =>\n    emp.employeeName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    emp.payCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    emp.department.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Quick Entry mutation\n  const quickEntryMutation = useMutation({\n    mutationFn: async (data: { employeeId: string; payDays: string; otHours: string }) => {\n      const token = authService.getToken();\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch('/api/attendance/quick-entry', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          employeeId: parseInt(data.employeeId),\n          payDays: parseInt(data.payDays),\n          otHours: parseFloat(data.otHours),\n          month: selectedMonth,\n          year: selectedYear\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update attendance');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Attendance data updated successfully\",\n      });\n      setIsQuickEntryOpen(false);\n      setSelectedEmployee(\"\");\n      setPayDays(\"\");\n      setOtHours(\"\");\n      queryClient.invalidateQueries({ queryKey: [`/api/employees/${user?.companyId}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance/summary/today'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/attendance/employee-data/${user?.companyId}/${selectedYear}/${selectedMonth}`] });\n    },\n    onError: (error: any) => {\n      console.error('Quick entry error:', error);\n      if (error.message?.includes('Invalid or expired token') || error.message?.includes('401') || error.message?.includes('403')) {\n        toast({\n          title: \"Session Expired\",\n          description: \"Please refresh the page and log in again\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to update attendance data\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleQuickEntry = () => {\n    if (!selectedEmployee || !payDays || !otHours) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    quickEntryMutation.mutate({ employeeId: selectedEmployee, payDays, otHours });\n  };\n\n  // Edit Employee mutation\n  const editEmployeeMutation = useMutation({\n    mutationFn: async (data: { employeeId: number; payDays: string; otHours: string }) => {\n      const token = authService.getToken();\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch('/api/attendance/quick-entry', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          employeeId: data.employeeId,\n          payDays: parseInt(data.payDays),\n          otHours: parseFloat(data.otHours),\n          month: selectedMonth,\n          year: selectedYear\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update attendance');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Employee attendance updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditingEmployee(null);\n      setEditPayDays(\"\");\n      setEditOtHours(\"\");\n      queryClient.invalidateQueries({ queryKey: [`/api/attendance/employee-data/${user?.companyId}/${selectedYear}/${selectedMonth}`] });\n    },\n    onError: (error: any) => {\n      console.error('Edit employee error:', error);\n      if (error.message?.includes('Invalid or expired token') || error.message?.includes('401') || error.message?.includes('403')) {\n        toast({\n          title: \"Session Expired\",\n          description: \"Please refresh the page and log in again\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to update attendance data\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Delete Employee mutation\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: number) => {\n      const token = authService.getToken();\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/attendance/delete/${employeeId}/${selectedYear}/${selectedMonth}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete attendance record');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Attendance record deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/attendance/employee-data/${user?.companyId}/${selectedYear}/${selectedMonth}`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete attendance record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditEmployee = (employee: EmployeeAttendanceData) => {\n    setEditingEmployee(employee);\n    setEditPayDays(employee.payDays.toString());\n    setEditOtHours(employee.otHours.toString());\n    setIsEditDialogOpen(true);\n  };\n\n  const handleViewEmployee = (employee: EmployeeAttendanceData) => {\n    setViewingEmployee(employee);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleDeleteEmployee = (employee: EmployeeAttendanceData) => {\n    if (window.confirm(`Are you sure you want to delete attendance record for ${employee.employeeName}?`)) {\n      deleteEmployeeMutation.mutate(employee.id);\n    }\n  };\n\n  const submitQuickEntry = () => {\n    if (!selectedEmployee || !payDays || !otHours) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    quickEntryMutation.mutate({ employeeId: selectedEmployee, payDays, otHours });\n  };\n\n  const submitEdit = () => {\n    if (!editingEmployee || !editPayDays || !editOtHours) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    editEmployeeMutation.mutate({ \n      employeeId: editingEmployee.id, \n      payDays: editPayDays, \n      otHours: editOtHours \n    });\n  };\n\n  const handleExportToExcel = () => {\n    const token = localStorage.getItem('token');\n    const url = `/api/attendance/export/${user?.companyId}/${selectedYear}/${selectedMonth}`;\n    \n    // Create a temporary link with auth header\n    fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    })\n    .then(response => response.blob())\n    .then(blob => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `attendance_${selectedYear}_${selectedMonth}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    })\n    .catch(error => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export attendance data\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const months = [\n    { value: 1, label: \"January\" },\n    { value: 2, label: \"February\" },\n    { value: 3, label: \"March\" },\n    { value: 4, label: \"April\" },\n    { value: 5, label: \"May\" },\n    { value: 6, label: \"June\" },\n    { value: 7, label: \"July\" },\n    { value: 8, label: \"August\" },\n    { value: 9, label: \"September\" },\n    { value: 10, label: \"October\" },\n    { value: 11, label: \"November\" },\n    { value: 12, label: \"December\" },\n  ];\n\n  const years = Array.from({ length: 5 }, (_, i) => new Date().getFullYear() - 2 + i);\n\n  // Permission guard - show access denied if user doesn't have permission\n  if (permissionLoading) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6 max-w-7xl\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto\"></div>\n            <p className=\"mt-2 text-gray-600\">Checking permissions...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!canViewAttendance && user?.role === 'employee') {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6 max-w-7xl\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <ShieldAlert className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n            <p className=\"text-gray-600 mb-4\">You don't have permission to access attendance management.</p>\n            <p className=\"text-sm text-gray-500\">Please request the \"attendance_view_all\" permission from your administrator.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6 max-w-7xl\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Attendance Management</h1>\n          <p className=\"text-muted-foreground\">Monitor and manage employee attendance records</p>\n        </div>\n        <div className=\"flex gap-4 items-center\">\n          <Button \n            onClick={handleExportToExcel} \n            variant=\"outline\"\n            className=\"flex items-center gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export to Excel\n          </Button>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">Today</p>\n            <p className=\"text-lg font-semibold\">{format(new Date(), 'EEEE, MMM dd, yyyy')}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n        <Card className=\"border-2 border-green-200 bg-gradient-to-br from-green-50 to-green-100\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-green-700\">Today Present</CardTitle>\n            <UserCheck className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-800\">{summaryData?.todayPresent || defaultSummary.todayPresent}</div>\n            <p className=\"text-xs text-green-600\">Active employees</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-red-200 bg-gradient-to-br from-red-50 to-red-100\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-red-700\">Today Absent</CardTitle>\n            <UserX className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-800\">{summaryData?.todayAbsent || defaultSummary.todayAbsent}</div>\n            <p className=\"text-xs text-red-600\">Missing today</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-blue-100\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-blue-700\">Today Leave</CardTitle>\n            <Coffee className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-800\">{summaryData?.todayLeave || defaultSummary.todayLeave}</div>\n            <p className=\"text-xs text-blue-600\">On planned leave</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-purple-200 bg-gradient-to-br from-purple-50 to-purple-100\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-purple-700\">Today Weekly Off</CardTitle>\n            <Calendar className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-800\">{summaryData?.todayWeeklyOff || defaultSummary.todayWeeklyOff}</div>\n            <p className=\"text-xs text-purple-600\">Weekly off day</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-2 border-orange-200 bg-gradient-to-br from-orange-50 to-orange-100\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-orange-700\">Continuously Absent</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-800\">{summaryData?.continuouslyAbsent || defaultSummary.continuouslyAbsent}</div>\n            <p className=\"text-xs text-orange-600\">Since last 7 days</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Quick Entry */}\n      <div className=\"flex flex-col sm:flex-row gap-4 items-center justify-between bg-gray-50 p-4 rounded-lg\">\n        <div className=\"flex flex-col sm:flex-row gap-4 items-center\">\n          {/* Month Selection */}\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4 text-gray-600\" />\n            <Select value={selectedMonth.toString()} onValueChange={(value) => setSelectedMonth(parseInt(value))}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Month\" />\n              </SelectTrigger>\n              <SelectContent>\n                {months.map((month) => (\n                  <SelectItem key={month.value} value={month.value.toString()}>\n                    {month.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Year Selection */}\n          <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>\n            <SelectTrigger className=\"w-24\">\n              <SelectValue placeholder=\"Year\" />\n            </SelectTrigger>\n            <SelectContent>\n              {years.map((year) => (\n                <SelectItem key={year} value={year.toString()}>\n                  {year}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          {/* Search Filter */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search employees...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 w-64\"\n            />\n          </div>\n        </div>\n\n        {/* Quick Entry Button */}\n        <Dialog open={isQuickEntryOpen} onOpenChange={setIsQuickEntryOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Quick Entry\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Quick Attendance Entry</DialogTitle>\n              <DialogDescription>\n                Add attendance data for an employee quickly\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"employee\">Employee</Label>\n                <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select employee...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {employees.map((emp: any) => (\n                      <SelectItem key={emp.id} value={emp.id.toString()}>\n                        {emp.firstName} {emp.lastName} ({emp.employeeId})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"payDays\">Pay Days</Label>\n                <Input\n                  id=\"payDays\"\n                  type=\"number\"\n                  placeholder=\"Enter pay days\"\n                  value={payDays}\n                  onChange={(e) => setPayDays(e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"otHours\">OT Hours</Label>\n                <Input\n                  id=\"otHours\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  placeholder=\"Enter OT hours\"\n                  value={otHours}\n                  onChange={(e) => setOtHours(e.target.value)}\n                />\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setIsQuickEntryOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleQuickEntry} disabled={quickEntryMutation.isPending}>\n                  {quickEntryMutation.isPending ? \"Saving...\" : \"Save\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Employee Attendance Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5 text-blue-600\" />\n            Employee Attendance Data - {months.find(m => m.value === selectedMonth)?.label} {selectedYear}\n          </CardTitle>\n          <CardDescription>\n            Detailed attendance information for all employees\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Pay Code</TableHead>\n                  <TableHead>Employee Name</TableHead>\n                  <TableHead>Department</TableHead>\n                  <TableHead className=\"text-center\">Present</TableHead>\n                  <TableHead className=\"text-center\">Weekly Off</TableHead>\n                  <TableHead className=\"text-center\">Leave</TableHead>\n                  <TableHead className=\"text-center\">Holidays</TableHead>\n                  <TableHead className=\"text-center\">Pay Days</TableHead>\n                  <TableHead className=\"text-center\">OT Hours</TableHead>\n                  <TableHead className=\"text-center\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredData.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={10} className=\"text-center py-8 text-muted-foreground\">\n                      No employees found matching your search criteria\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredData.map((employee) => (\n                    <TableRow key={employee.id}>\n                      <TableCell className=\"font-medium\">{employee.payCode}</TableCell>\n                      <TableCell>{employee.employeeName}</TableCell>\n                      <TableCell>{employee.department}</TableCell>\n                      <TableCell className=\"text-center\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                          {employee.present}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n                          {employee.weeklyOff}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                          {employee.leave}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\">\n                          {employee.holidays}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 font-semibold\">\n                          {employee.payDays}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800\">\n                          {employee.otHours}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleViewEmployee(employee)}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => handleEditEmployee(employee)}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit Record\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => window.open(`/admin/attendance/daily-log/${employee.id}/${selectedYear}/${selectedMonth}`, '_blank')}>\n                              <FileText className=\"h-4 w-4 mr-2\" />\n                              Daily Log\n                            </DropdownMenuItem>\n                            <DropdownMenuSeparator />\n                            <DropdownMenuItem \n                              className=\"text-red-600\"\n                              onClick={() => handleDeleteEmployee(employee)}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete Record\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Entry Dialog */}\n      <Dialog open={isQuickEntryOpen} onOpenChange={setIsQuickEntryOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Quick Entry</DialogTitle>\n            <DialogDescription>\n              Add attendance data for an employee\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"employee\">Employee</Label>\n              <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select employee\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {employees.map((emp: any) => (\n                    <SelectItem key={emp.id} value={emp.id.toString()}>\n                      {emp.firstName} {emp.lastName} ({emp.employeeId})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"payDays\">Pay Days</Label>\n              <Input\n                id=\"payDays\"\n                type=\"number\"\n                placeholder=\"Enter pay days\"\n                value={payDays}\n                onChange={(e) => setPayDays(e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"otHours\">OT Hours</Label>\n              <Input\n                id=\"otHours\"\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"Enter OT hours\"\n                value={otHours}\n                onChange={(e) => setOtHours(e.target.value)}\n              />\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsQuickEntryOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={submitQuickEntry} disabled={quickEntryMutation.isPending}>\n                {quickEntryMutation.isPending ? \"Saving...\" : \"Save\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Employee Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Attendance Record</DialogTitle>\n            <DialogDescription>\n              Update attendance data for {editingEmployee?.employeeName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"editPayDays\">Pay Days</Label>\n              <Input\n                id=\"editPayDays\"\n                type=\"number\"\n                placeholder=\"Enter pay days\"\n                value={editPayDays}\n                onChange={(e) => setEditPayDays(e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editOtHours\">OT Hours</Label>\n              <Input\n                id=\"editOtHours\"\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"Enter OT hours\"\n                value={editOtHours}\n                onChange={(e) => setEditOtHours(e.target.value)}\n              />\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={submitEdit} disabled={editEmployeeMutation.isPending}>\n                {editEmployeeMutation.isPending ? \"Saving...\" : \"Update\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Employee Details Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Employee Attendance Details</DialogTitle>\n            <DialogDescription>\n              Detailed view for {viewingEmployee?.employeeName} - {months.find(m => m.value === selectedMonth)?.label} {selectedYear}\n            </DialogDescription>\n          </DialogHeader>\n          {viewingEmployee && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Pay Code</Label>\n                  <p className=\"text-lg font-semibold\">{viewingEmployee.payCode}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Department</Label>\n                  <p className=\"text-lg font-semibold\">{viewingEmployee.department}</p>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Present Days</Label>\n                  <p className=\"text-2xl font-bold text-green-600\">{viewingEmployee.present}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Weekly Off</Label>\n                  <p className=\"text-2xl font-bold text-purple-600\">{viewingEmployee.weeklyOff}</p>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Leave Days</Label>\n                  <p className=\"text-2xl font-bold text-blue-600\">{viewingEmployee.leave}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Holidays</Label>\n                  <p className=\"text-2xl font-bold text-orange-600\">{viewingEmployee.holidays}</p>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Total Pay Days</Label>\n                  <p className=\"text-2xl font-bold text-gray-800\">{viewingEmployee.payDays}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium text-gray-600\">OT Hours</Label>\n                  <p className=\"text-2xl font-bold text-indigo-600\">{viewingEmployee.otHours}</p>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end pt-4\">\n                <Button onClick={() => setIsViewDialogOpen(false)}>Close</Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":35260},"client/src/pages/client-compliances.tsx":{"content":"import React, { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { FileText, CheckSquare, Database } from 'lucide-react';\nimport ClientList from './client-list';\nimport EmployeeCompliancesSetup from './employee-compliances-setup';\nimport CompliancesData from './compliances-data';\n\nexport default function ClientCompliances() {\n  const [activeTab, setActiveTab] = useState('client-list');\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Client Compliances Management</h1>\n        <p className=\"text-gray-600 mt-2\">Comprehensive compliance management system for client projects and employee setup</p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"client-list\" className=\"flex items-center space-x-2\">\n            <FileText className=\"w-4 h-4\" />\n            <span>Client List</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"employee-setup\" className=\"flex items-center space-x-2\">\n            <CheckSquare className=\"w-4 h-4\" />\n            <span>Employee Setup</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"compliances-data\" className=\"flex items-center space-x-2\">\n            <Database className=\"w-4 h-4\" />\n            <span>Compliances Data</span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"client-list\" className=\"space-y-4\">\n          <div className=\"bg-white rounded-lg border shadow-sm\">\n            <ClientList />\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"employee-setup\" className=\"space-y-4\">\n          <div className=\"bg-white rounded-lg border shadow-sm\">\n            <EmployeeCompliancesSetup />\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"compliances-data\" className=\"space-y-4\">\n          <div className=\"bg-white rounded-lg border shadow-sm\">\n            <CompliancesData />\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":2141},"client/src/pages/client-list.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Plus, MoreHorizontal, Edit, Users, Calendar, DollarSign } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/lib/auth';\nimport { useLocation } from 'wouter';\n\nconst clientSchema = z.object({\n  projectName: z.string().min(1, 'Project name is required'),\n  projectCost: z.string().min(1, 'Project cost is required'),\n  startDate: z.string().min(1, 'Start date is required'),\n  principalEmployer: z.string().optional(),\n  clientName: z.string().optional(),\n  natureAndLocationOfWork: z.string().optional(),\n});\n\ntype ClientFormData = z.infer<typeof clientSchema>;\n\nexport default function ClientList() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingClient, setEditingClient] = useState<any>(null);\n\n  const { data: clients = [], isLoading } = useQuery<any[]>({\n    queryKey: ['/api/clients', user?.companyId],\n    enabled: !!user?.companyId,\n  });\n\n  const form = useForm<ClientFormData>({\n    resolver: zodResolver(clientSchema),\n    defaultValues: {\n      projectName: '',\n      projectCost: '',\n      startDate: '',\n      principalEmployer: '',\n      clientName: '',\n      natureAndLocationOfWork: '',\n    },\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (data: ClientFormData) => {\n      const response = await apiRequest('POST', '/api/clients', {\n        ...data,\n        companyId: user?.companyId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Client project created successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create client project',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateClientMutation = useMutation({\n    mutationFn: async (data: ClientFormData & { id: number }) => {\n      const response = await apiRequest('PUT', `/api/clients/${data.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      setIsDialogOpen(false);\n      setEditingClient(null);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Client project updated successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to update client project',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ClientFormData) => {\n    if (editingClient) {\n      updateClientMutation.mutate({ ...data, id: editingClient.id });\n    } else {\n      createClientMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (client: any) => {\n    setEditingClient(client);\n    form.reset({\n      projectName: client.projectName,\n      projectCost: client.projectCost,\n      startDate: client.startDate?.split('T')[0] || '',\n      principalEmployer: client.principalEmployer || '',\n      clientName: client.clientName || '',\n      natureAndLocationOfWork: client.natureAndLocationOfWork || '',\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleAddNew = () => {\n    setEditingClient(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  const handleManageEmployee = (client: any) => {\n    // Navigate to manage employee page with client project context\n    setLocation(`/admin/manage-employee?projectId=${client.id}&projectName=${encodeURIComponent(client.projectName)}`);\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex justify-between items-center\">\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleAddNew}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Client Project\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-lg max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingClient ? 'Edit Client Project' : 'Add New Client Project'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"projectName\">Project Name</Label>\n                <Input\n                  id=\"projectName\"\n                  {...form.register('projectName')}\n                  placeholder=\"Enter project name\"\n                />\n                {form.formState.errors.projectName && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.projectName.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"projectCost\">Project Cost</Label>\n                <Input\n                  id=\"projectCost\"\n                  {...form.register('projectCost')}\n                  placeholder=\"Enter project cost\"\n                />\n                {form.formState.errors.projectCost && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.projectCost.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"startDate\">Start Date</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  {...form.register('startDate')}\n                />\n                {form.formState.errors.startDate && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.startDate.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"principalEmployer\">Principal Employer</Label>\n                <Input\n                  id=\"principalEmployer\"\n                  {...form.register('principalEmployer')}\n                  placeholder=\"Enter principal employer\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"clientName\">Client Name</Label>\n                <Input\n                  id=\"clientName\"\n                  {...form.register('clientName')}\n                  placeholder=\"Enter client name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"natureAndLocationOfWork\">Nature & Location of Work</Label>\n                <Input\n                  id=\"natureAndLocationOfWork\"\n                  {...form.register('natureAndLocationOfWork')}\n                  placeholder=\"Enter nature and location of work\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createClientMutation.isPending || updateClientMutation.isPending}\n                >\n                  {createClientMutation.isPending || updateClientMutation.isPending\n                    ? 'Saving...'\n                    : editingClient\n                    ? 'Update'\n                    : 'Create'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <DollarSign className=\"w-5 h-5 mr-2 text-blue-600\" />\n            Client Projects Overview\n          </CardTitle>\n          <CardDescription>\n            Manage and track all your client projects in one place\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Project Name</TableHead>\n                <TableHead>Project Cost</TableHead>\n                <TableHead>Start Date</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {clients.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={4} className=\"text-center py-8 text-gray-500\">\n                    No client projects found. Create your first project to get started.\n                  </TableCell>\n                </TableRow>\n              ) : (\n                clients.map((client: any) => (\n                  <TableRow key={client.id}>\n                    <TableCell className=\"font-medium\">{client.projectName}</TableCell>\n                    <TableCell>₹{client.projectCost}</TableCell>\n                    <TableCell>\n                      {client.startDate\n                        ? new Date(client.startDate).toLocaleDateString()\n                        : 'Not set'}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleEdit(client)}>\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleManageEmployee(client)}>\n                            <Users className=\"w-4 h-4 mr-2\" />\n                            Manage Employee\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11329},"client/src/pages/company-approval-pending.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, CheckCircle, Building2, Mail, Phone, MapPin } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Link } from \"wouter\";\n\nexport default function CompanyApprovalPending() {\n  const { user } = useAuth();\n\n  const { data: company } = useQuery({\n    queryKey: [`/api/companies/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\"><Clock className=\"w-3 h-3 mr-1\" />Pending Approval</Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  if (!company) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-hr-background to-hr-background/80 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-hr-primary/10 p-4 rounded-full\">\n              <Building2 className=\"h-12 w-12 text-hr-primary\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-hr-text-primary\">\n            Company Registration Status\n          </h1>\n          <p className=\"text-hr-text-secondary max-w-2xl mx-auto\">\n            Your company registration has been submitted and is currently under review by our system administrators.\n          </p>\n        </div>\n\n        {/* Status Card */}\n        <Card className=\"shadow-lg border-0\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl\">Company Details</CardTitle>\n              {getStatusBadge(company.status)}\n            </div>\n            <CardDescription>\n              Review your submitted company information below\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Company Information */}\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-hr-text-primary mb-3\">Basic Information</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Building2 className=\"w-4 h-4 text-hr-text-secondary\" />\n                      <div>\n                        <p className=\"text-sm text-hr-text-secondary\">Company Name</p>\n                        <p className=\"font-medium\">{company.name}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <Mail className=\"w-4 h-4 text-hr-text-secondary\" />\n                      <div>\n                        <p className=\"text-sm text-hr-text-secondary\">Email</p>\n                        <p className=\"font-medium\">{company.email}</p>\n                      </div>\n                    </div>\n                    {company.phone && (\n                      <div className=\"flex items-center gap-3\">\n                        <Phone className=\"w-4 h-4 text-hr-text-secondary\" />\n                        <div>\n                          <p className=\"text-sm text-hr-text-secondary\">Phone</p>\n                          <p className=\"font-medium\">{company.phone}</p>\n                        </div>\n                      </div>\n                    )}\n                    {company.address && (\n                      <div className=\"flex items-center gap-3\">\n                        <MapPin className=\"w-4 h-4 text-hr-text-secondary\" />\n                        <div>\n                          <p className=\"text-sm text-hr-text-secondary\">Address</p>\n                          <p className=\"font-medium\">{company.address}</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-hr-text-primary mb-3\">Legal Information</h3>\n                  <div className=\"space-y-3\">\n                    {company.type && (\n                      <div>\n                        <p className=\"text-sm text-hr-text-secondary\">Company Type</p>\n                        <p className=\"font-medium capitalize\">{company.type.replace('_', ' ')}</p>\n                      </div>\n                    )}\n                    {company.gstPan && (\n                      <div>\n                        <p className=\"text-sm text-hr-text-secondary\">GST/PAN</p>\n                        <p className=\"font-medium\">{company.gstPan}</p>\n                      </div>\n                    )}\n                    {company.pfNo && (\n                      <div>\n                        <p className=\"text-sm text-hr-text-secondary\">PF Number</p>\n                        <p className=\"font-medium\">{company.pfNo}</p>\n                      </div>\n                    )}\n                    {company.esicNo && (\n                      <div>\n                        <p className=\"text-sm text-hr-text-secondary\">ESIC Number</p>\n                        <p className=\"font-medium\">{company.esicNo}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Status Message */}\n            {company.status === 'pending' && (\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Clock className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-yellow-800\">Approval Pending</h4>\n                    <p className=\"text-sm text-yellow-700 mt-1\">\n                      Your company registration is currently being reviewed by our system administrators. \n                      This process typically takes 1-2 business days. You will receive an email notification once approved.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {company.status === 'approved' && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-green-800\">Company Approved!</h4>\n                    <p className=\"text-sm text-green-700 mt-1\">\n                      Congratulations! Your company has been approved and verified. You can now access all administrative features.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {company.status === 'rejected' && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-5 h-5 bg-red-600 rounded-full flex items-center justify-center mt-0.5\">\n                    <span className=\"text-white text-xs\">✗</span>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-red-800\">Registration Rejected</h4>\n                    <p className=\"text-sm text-red-700 mt-1\">\n                      Unfortunately, your company registration has been rejected. Please contact support for more information.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Actions */}\n            <div className=\"flex gap-4 pt-4\">\n              {company.profileComplete && company.status === 'pending' && (\n                <Button disabled variant=\"outline\" className=\"flex-1\">\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  Waiting for Approval\n                </Button>\n              )}\n              \n              {company.status === 'approved' && (\n                <Link href=\"/\" className=\"flex-1\">\n                  <Button className=\"w-full bg-hr-primary hover:bg-hr-primary/90\">\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Access Dashboard\n                  </Button>\n                </Link>\n              )}\n\n              {!company.profileComplete && (\n                <Link href=\"/company-profile-setup\" className=\"flex-1\">\n                  <Button className=\"w-full bg-hr-primary hover:bg-hr-primary/90\">\n                    Complete Profile\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9499},"client/src/pages/company-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Building2, Plus, Edit, Search, CheckCircle, XCircle, Clock, Trash2 } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CompanyManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingCompany, setEditingCompany] = useState<any>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n\n  const { data: companies = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/companies'],\n  });\n\n  const createCompanyMutation = useMutation({\n    mutationFn: (companyData: any) => apiRequest('POST', '/api/admin/companies', companyData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/companies'] });\n      setIsCreateDialogOpen(false);\n      toast({ title: \"Company created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create company\", variant: \"destructive\" });\n    },\n  });\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/admin/companies/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/companies'] });\n      toast({ title: \"Company updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update company\", variant: \"destructive\" });\n    },\n  });\n\n  const approveCompanyMutation = useMutation({\n    mutationFn: ({ id, action }: { id: number; action: 'approve' | 'reject' }) => \n      apiRequest('PUT', `/api/admin/companies/${id}/approve`, { action }),\n    onSuccess: (_, { action }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/companies'] });\n      toast({ \n        title: `Company ${action === 'approve' ? 'approved' : 'rejected'} successfully`,\n        variant: action === 'approve' ? 'default' : 'destructive'\n      });\n    },\n    onError: () => {\n      toast({ title: \"Failed to process approval\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteCompanyMutation = useMutation({\n    mutationFn: (id: number) => apiRequest('DELETE', `/api/admin/companies/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/companies'] });\n      toast({ title: \"Company deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete company\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredCompanies = companies.filter((c: any) =>\n    c.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    c.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleCreateCompany = (formData: FormData) => {\n    const companyData = {\n      name: formData.get('name'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      address: formData.get('address'),\n      status: 'approved',\n    };\n    createCompanyMutation.mutate(companyData);\n  };\n\n  const handleEditCompany = (formData: FormData) => {\n    const companyData = {\n      id: editingCompany.id,\n      name: formData.get('name'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      address: formData.get('address'),\n      status: formData.get('status'),\n    };\n    updateCompanyMutation.mutate(companyData);\n    setIsEditDialogOpen(false);\n    setEditingCompany(null);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\"><Clock className=\"w-3 h-3 mr-1\" />Pending</Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      case 'suspended':\n        return <Badge variant=\"secondary\">Suspended</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  if (user?.role !== 'system_admin') {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-muted-foreground\">System admin access required</p>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return <div>Loading companies...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Company Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage all companies in the system\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Company\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Company</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={(e) => {\n              e.preventDefault();\n              handleCreateCompany(new FormData(e.currentTarget));\n            }} className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Company Name</label>\n                <Input name=\"name\" required />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Email</label>\n                <Input name=\"email\" type=\"email\" required />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Phone</label>\n                <Input name=\"phone\" />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Address</label>\n                <Input name=\"address\" />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\" disabled={createCompanyMutation.isPending}>\n                  {createCompanyMutation.isPending ? 'Creating...' : 'Create Company'}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Company Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Company</DialogTitle>\n            </DialogHeader>\n            {editingCompany && (\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                handleEditCompany(new FormData(e.currentTarget));\n              }} className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Company Name</Label>\n                  <Input name=\"name\" defaultValue={editingCompany.name} required />\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Email</Label>\n                  <Input name=\"email\" type=\"email\" defaultValue={editingCompany.email} required />\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Phone</Label>\n                  <Input name=\"phone\" defaultValue={editingCompany.phone || ''} />\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Address</Label>\n                  <Input name=\"address\" defaultValue={editingCompany.address || ''} />\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <Select name=\"status\" defaultValue={editingCompany.status}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"approved\">Approved</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                      <SelectItem value=\"suspended\">Suspended</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button type=\"submit\" disabled={updateCompanyMutation.isPending}>\n                    {updateCompanyMutation.isPending ? 'Updating...' : 'Update Company'}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => {\n                    setIsEditDialogOpen(false);\n                    setEditingCompany(null);\n                  }}>\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Companies</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search companies...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Company</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Profile</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCompanies.map((company: any) => (\n                <TableRow key={company.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{company.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{company.address}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <div className=\"text-sm\">{company.email}</div>\n                      <div className=\"text-sm text-muted-foreground\">{company.phone}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={company.profileComplete ? 'default' : 'outline'}>\n                      {company.profileComplete ? 'Complete' : 'Incomplete'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {getStatusBadge(company.status)}\n                  </TableCell>\n                  <TableCell>\n                    {new Date(company.createdAt).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      {company.status === 'pending' ? (\n                        <>\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-green-600 hover:bg-green-700 text-white\"\n                            onClick={() => approveCompanyMutation.mutate({ id: company.id, action: 'approve' })}\n                            disabled={approveCompanyMutation.isPending}\n                          >\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"destructive\"\n                            onClick={() => approveCompanyMutation.mutate({ id: company.id, action: 'reject' })}\n                            disabled={approveCompanyMutation.isPending}\n                          >\n                            <XCircle className=\"h-3 w-3 mr-1\" />\n                            Reject\n                          </Button>\n                        </>\n                      ) : (\n                        <>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => {\n                              setEditingCompany(company);\n                              setIsEditDialogOpen(true);\n                            }}\n                          >\n                            <Edit className=\"h-3 w-3 mr-1\" />\n                            Edit\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"destructive\">\n                                <Trash2 className=\"h-3 w-3 mr-1\" />\n                                Delete\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Company</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete \"{company.name}\"? This action cannot be undone and will also delete all associated employees, jobs, and data.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => deleteCompanyMutation.mutate(company.id)}\n                                  className=\"bg-red-600 hover:bg-red-700\"\n                                >\n                                  Delete Company\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15539},"client/src/pages/company-profile-setup.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Building2 } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\n\nconst companyProfileSchema = z.object({\n  name: z.string().min(2, \"Company name must be at least 2 characters\"),\n  address: z.string().min(5, \"Company address is required\"),\n  type: z.enum([\"proprietorship\", \"partnership\", \"private_limited\", \"limited\"], {\n    required_error: \"Please select company type\",\n  }),\n  gstPan: z.string().min(10, \"GST/PAN number is required\"),\n  pfNo: z.string().min(1, \"PF number is required\"),\n  esicNo: z.string().min(1, \"ESIC number is required\"),\n  cinNo: z.string().min(1, \"CIN number is required\"),\n  authorizedPersonName: z.string().min(2, \"Authorized person name is required\"),\n  authorizedPersonContact: z.string().min(10, \"Contact number must be at least 10 digits\"),\n});\n\ntype CompanyProfileData = z.infer<typeof companyProfileSchema>;\n\nexport default function CompanyProfileSetup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: company, isLoading: companyLoading } = useQuery({\n    queryKey: [`/api/companies/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const form = useForm<CompanyProfileData>({\n    resolver: zodResolver(companyProfileSchema),\n    defaultValues: {\n      name: '',\n      address: '',\n      type: undefined,\n      gstPan: '',\n      pfNo: '',\n      esicNo: '',\n      cinNo: '',\n      authorizedPersonName: '',\n      authorizedPersonContact: '',\n    },\n  });\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: async (data: CompanyProfileData) => {\n      const response = await apiRequest('PUT', `/api/companies/${user?.companyId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      toast({ title: \"Company profile completed successfully! Waiting for approval.\" });\n      setLocation('/company-approval-pending');\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update company profile\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmit = (data: CompanyProfileData) => {\n    updateCompanyMutation.mutate(data);\n  };\n\n  const isLoading = updateCompanyMutation.isPending || companyLoading;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-hr-background to-hr-background/80 p-4\">\n      <Card className=\"w-full max-w-4xl shadow-2xl border-0\">\n        <CardHeader className=\"text-center space-y-2 pb-6\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-hr-primary/10 p-3 rounded-full\">\n              <Building2 className=\"h-8 w-8 text-hr-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-hr-text-primary\">\n            Complete Company Profile\n          </CardTitle>\n          <CardDescription className=\"text-hr-text-secondary\">\n            Please provide your company details to continue using the HR management system\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Company Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-hr-text-primary border-b pb-2\">\n                Company Information\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Company Name</Label>\n                  <Input\n                    id=\"name\"\n                    {...form.register(\"name\")}\n                    disabled={isLoading}\n                    placeholder=\"Enter company name\"\n                  />\n                  {form.formState.errors.name && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"type\">Company Type</Label>\n                  <Select\n                    value={form.watch(\"type\")}\n                    onValueChange={(value) => form.setValue(\"type\", value as any)}\n                    disabled={isLoading}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select company type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"proprietorship\">Proprietorship</SelectItem>\n                      <SelectItem value=\"partnership\">Partnership</SelectItem>\n                      <SelectItem value=\"private_limited\">Private Limited</SelectItem>\n                      <SelectItem value=\"limited\">Limited</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.type && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.type.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Company Address</Label>\n                <Input\n                  id=\"address\"\n                  {...form.register(\"address\")}\n                  disabled={isLoading}\n                  placeholder=\"Enter complete company address\"\n                />\n                {form.formState.errors.address && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.address.message}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Legal & Registration Details */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-hr-text-primary border-b pb-2\">\n                Legal & Registration Details\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"gstPan\">Company GST/PAN</Label>\n                  <Input\n                    id=\"gstPan\"\n                    {...form.register(\"gstPan\")}\n                    disabled={isLoading}\n                    placeholder=\"GST or PAN number\"\n                  />\n                  {form.formState.errors.gstPan && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.gstPan.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"pfNo\">Company PF No.</Label>\n                  <Input\n                    id=\"pfNo\"\n                    {...form.register(\"pfNo\")}\n                    disabled={isLoading}\n                    placeholder=\"Provident Fund number\"\n                  />\n                  {form.formState.errors.pfNo && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.pfNo.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"esicNo\">Company ESIC No.</Label>\n                  <Input\n                    id=\"esicNo\"\n                    {...form.register(\"esicNo\")}\n                    disabled={isLoading}\n                    placeholder=\"ESIC registration number\"\n                  />\n                  {form.formState.errors.esicNo && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.esicNo.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"cinNo\">Company CIN No.</Label>\n                  <Input\n                    id=\"cinNo\"\n                    {...form.register(\"cinNo\")}\n                    disabled={isLoading}\n                    placeholder=\"Corporate Identification Number\"\n                  />\n                  {form.formState.errors.cinNo && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.cinNo.message}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Authorized Person Details */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-hr-text-primary border-b pb-2\">\n                Authorized Person Details\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"authorizedPersonName\">Authorized Person Name</Label>\n                  <Input\n                    id=\"authorizedPersonName\"\n                    {...form.register(\"authorizedPersonName\")}\n                    disabled={isLoading}\n                    placeholder=\"Full name of authorized person\"\n                  />\n                  {form.formState.errors.authorizedPersonName && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.authorizedPersonName.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"authorizedPersonContact\">Contact Number</Label>\n                  <Input\n                    id=\"authorizedPersonContact\"\n                    {...form.register(\"authorizedPersonContact\")}\n                    disabled={isLoading}\n                    placeholder=\"Contact number\"\n                  />\n                  {form.formState.errors.authorizedPersonContact && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.authorizedPersonContact.message}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-hr-primary hover:bg-hr-primary/90\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Saving Company Profile...\" : \"Complete Setup & Continue\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10728},"client/src/pages/company-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { authService, apiRequestWithAuth, usePermission } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Building2, \n  Users, \n  MapPin, \n  Clock, \n  DollarSign, \n  Fingerprint, \n  Calendar, \n  FileText,\n  Plus,\n  Edit,\n  Trash2,\n  MoreVertical\n} from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\n\ninterface Department {\n  id: number;\n  name: string;\n  description: string;\n  headOfDepartment: string;\n  createdAt: Date;\n}\n\ninterface Designation {\n  id: number;\n  title: string;\n  departmentId: number;\n  level: string;\n  description: string;\n}\n\ninterface Branch {\n  id: number;\n  name: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  phone: string;\n  manager: string;\n}\n\ninterface Location {\n  id: number;\n  name: string;\n  address: string;\n  branchId: number;\n  capacity: number;\n}\n\ninterface CostCenter {\n  id: number;\n  code: string;\n  name: string;\n  description: string;\n  budget: string;\n  manager: string;\n}\n\ninterface BiometricMachine {\n  id: number;\n  serialNumber: string;\n  ipAddress: string;\n  port: number;\n  location: string;\n  model: string;\n  status: 'active' | 'inactive' | 'maintenance';\n  lastSync: Date;\n}\n\ninterface Holiday {\n  id: number;\n  name: string;\n  date: Date;\n  type: 'national' | 'regional' | 'company';\n  description: string;\n  mandatory: boolean;\n}\n\ninterface LeavePolicy {\n  id: number;\n  name: string;\n  type: 'annual' | 'sick' | 'maternity' | 'paternity' | 'personal' | 'emergency';\n  allowedDays: number;\n  carryForward: boolean;\n  description: string;\n}\n\nexport default function CompanySettings() {\n  const { toast } = useToast();\n  const user = authService.getUser();\n  const companyId = user?.companyId;\n  \n  // State for active tab and dialogs\n  const [activeTab, setActiveTab] = useState(\"departments\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [dialogType, setDialogType] = useState(\"\");\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n\n  // Form states\n  const [formData, setFormData] = useState<any>({});\n\n  // Permission check for company settings access\n  const { hasPermission: canAccessSettings, loading: permissionLoading } = usePermission('company_settings');\n\n  // Fetch company data\n  const { data: company } = useQuery({\n    queryKey: [`/api/companies/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  // Fetch departments\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [`/api/departments/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  // Fetch all company settings data\n  const { data: designations = [] } = useQuery<Designation[]>({\n    queryKey: [`/api/designations/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [`/api/branches/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const { data: locations = [] } = useQuery<Location[]>({\n    queryKey: [`/api/locations/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const { data: costCenters = [] } = useQuery<CostCenter[]>({\n    queryKey: [`/api/cost-centers/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const { data: biometricMachines = [] } = useQuery<BiometricMachine[]>({\n    queryKey: [`/api/biometric-machines/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const { data: holidays = [] } = useQuery<Holiday[]>({\n    queryKey: [`/api/holidays/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const { data: leavePolicies = [] } = useQuery<LeavePolicy[]>({\n    queryKey: [`/api/leave-policies/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  // Department mutation\n  const departmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const method = selectedItem ? 'PUT' : 'POST';\n      const url = selectedItem ? `/api/departments/${selectedItem.id}` : '/api/departments';\n      const response = await apiRequestWithAuth(method, url, { ...data, companyId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/departments/${companyId}`] });\n      setShowDialog(false);\n      setFormData({});\n      toast({\n        title: \"Success\",\n        description: `Department ${selectedItem ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save department\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Designation mutation\n  const designationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const method = selectedItem ? 'PUT' : 'POST';\n      const url = selectedItem ? `/api/designations/${selectedItem.id}` : '/api/designations';\n      const response = await apiRequestWithAuth(method, url, { ...data, companyId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/designations/${companyId}`] });\n      setShowDialog(false);\n      setFormData({});\n      toast({\n        title: \"Success\",\n        description: `Designation ${selectedItem ? 'updated' : 'created'} successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save designation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Permission checks after all hooks\n  if (permissionLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Checking permissions...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!canAccessSettings) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <Building2 className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-red-600 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-4\">You don't have permission to access company settings.</p>\n          <p className=\"text-sm text-gray-500\">Request 'company_settings' permission from your administrator.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleOpenDialog = (type: string, item?: any) => {\n    setDialogType(type);\n    setSelectedItem(item);\n    setFormData(item || {});\n    setShowDialog(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    switch (dialogType) {\n      case 'department':\n        departmentMutation.mutate(formData);\n        break;\n      case 'designation':\n        designationMutation.mutate(formData);\n        break;\n      // Add other cases as needed\n      default:\n        toast({\n          title: \"Success\",\n          description: `${dialogType} ${selectedItem ? 'updated' : 'created'} successfully`,\n        });\n        setShowDialog(false);\n    }\n  };\n\n  const formatDate = (date: Date | string) => {\n    return new Date(date).toLocaleDateString();\n  };\n\n  const renderDepartments = () => (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <div>\n          <CardTitle>Departments</CardTitle>\n          <CardDescription>Manage organizational departments</CardDescription>\n        </div>\n        <Button onClick={() => handleOpenDialog('department')} className=\"bg-hr-primary hover:bg-hr-primary/90\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Department\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {departments.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Building2 className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <p className=\"mt-4 text-gray-600\">No departments found</p>\n            <Button onClick={() => handleOpenDialog('department')} className=\"mt-4\">\n              Create First Department\n            </Button>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Department Name</TableHead>\n                <TableHead>Description</TableHead>\n                <TableHead>Head of Department</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {departments.map((dept) => (\n                <TableRow key={dept.id}>\n                  <TableCell className=\"font-medium\">{dept.name}</TableCell>\n                  <TableCell>{dept.description}</TableCell>\n                  <TableCell>{dept.headOfDepartment}</TableCell>\n                  <TableCell>{formatDate(dept.createdAt)}</TableCell>\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => handleOpenDialog('department', dept)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-red-600\">\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const renderGenericTable = (\n    title: string, \n    description: string, \n    data: any[], \n    columns: { key: string, label: string, render?: (value: any, item: any) => React.ReactNode }[],\n    type: string,\n    icon: React.ReactNode\n  ) => (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <div>\n          <CardTitle className=\"flex items-center gap-2\">\n            {icon}\n            {title}\n          </CardTitle>\n          <CardDescription>{description}</CardDescription>\n        </div>\n        <Button onClick={() => handleOpenDialog(type)} className=\"bg-hr-primary hover:bg-hr-primary/90\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add {title.slice(0, -1)}\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {data.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"mx-auto h-12 w-12 text-gray-400 mb-4\">{icon}</div>\n            <p className=\"text-gray-600\">No {title.toLowerCase()} found</p>\n            <Button onClick={() => handleOpenDialog(type)} className=\"mt-4\">\n              Create First {title.slice(0, -1)}\n            </Button>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((col) => (\n                  <TableHead key={col.key}>{col.label}</TableHead>\n                ))}\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((item) => (\n                <TableRow key={item.id}>\n                  {columns.map((col) => (\n                    <TableCell key={col.key}>\n                      {col.render ? col.render(item[col.key], item) : item[col.key]}\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => handleOpenDialog(type, item)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-red-600\">\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const renderFormFields = () => {\n    switch (dialogType) {\n      case 'department':\n        return (\n          <>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Department Name</Label>\n              <Input\n                id=\"name\"\n                value={formData.name || ''}\n                onChange={(e) => setFormData({...formData, name: e.target.value})}\n                placeholder=\"Enter department name\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || ''}\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\n                placeholder=\"Enter department description\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"headOfDepartment\">Head of Department</Label>\n              <Input\n                id=\"headOfDepartment\"\n                value={formData.headOfDepartment || ''}\n                onChange={(e) => setFormData({...formData, headOfDepartment: e.target.value})}\n                placeholder=\"Enter head of department\"\n              />\n            </div>\n          </>\n        );\n      \n      case 'designation':\n        return (\n          <>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Job Title</Label>\n              <Input\n                id=\"title\"\n                value={formData.title || ''}\n                onChange={(e) => setFormData({...formData, title: e.target.value})}\n                placeholder=\"Enter job title\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"departmentId\">Department</Label>\n              <Select value={formData.departmentId?.toString()} onValueChange={(value) => setFormData({...formData, departmentId: parseInt(value)})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select department\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {departments.map((dept) => (\n                    <SelectItem key={dept.id} value={dept.id.toString()}>{dept.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"level\">Level</Label>\n              <Select value={formData.level} onValueChange={(value) => setFormData({...formData, level: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Junior\">Junior</SelectItem>\n                  <SelectItem value=\"Mid\">Mid</SelectItem>\n                  <SelectItem value=\"Senior\">Senior</SelectItem>\n                  <SelectItem value=\"Lead\">Lead</SelectItem>\n                  <SelectItem value=\"Manager\">Manager</SelectItem>\n                  <SelectItem value=\"Director\">Director</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || ''}\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\n                placeholder=\"Enter job description\"\n              />\n            </div>\n          </>\n        );\n\n      case 'branch':\n        return (\n          <>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Branch Name</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name || ''}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"Enter branch name\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"manager\">Manager</Label>\n                <Input\n                  id=\"manager\"\n                  value={formData.manager || ''}\n                  onChange={(e) => setFormData({...formData, manager: e.target.value})}\n                  placeholder=\"Enter manager name\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Input\n                id=\"address\"\n                value={formData.address || ''}\n                onChange={(e) => setFormData({...formData, address: e.target.value})}\n                placeholder=\"Enter full address\"\n              />\n            </div>\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"city\">City</Label>\n                <Input\n                  id=\"city\"\n                  value={formData.city || ''}\n                  onChange={(e) => setFormData({...formData, city: e.target.value})}\n                  placeholder=\"City\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"state\">State</Label>\n                <Input\n                  id=\"state\"\n                  value={formData.state || ''}\n                  onChange={(e) => setFormData({...formData, state: e.target.value})}\n                  placeholder=\"State\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                <Input\n                  id=\"zipCode\"\n                  value={formData.zipCode || ''}\n                  onChange={(e) => setFormData({...formData, zipCode: e.target.value})}\n                  placeholder=\"ZIP\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input\n                id=\"phone\"\n                value={formData.phone || ''}\n                onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                placeholder=\"Enter phone number\"\n              />\n            </div>\n          </>\n        );\n\n      case 'biometricMachine':\n        return (\n          <>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                <Input\n                  id=\"serialNumber\"\n                  value={formData.serialNumber || ''}\n                  onChange={(e) => setFormData({...formData, serialNumber: e.target.value})}\n                  placeholder=\"Enter serial number\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"model\">Model</Label>\n                <Input\n                  id=\"model\"\n                  value={formData.model || ''}\n                  onChange={(e) => setFormData({...formData, model: e.target.value})}\n                  placeholder=\"Enter model name\"\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"ipAddress\">IP Address</Label>\n                <Input\n                  id=\"ipAddress\"\n                  value={formData.ipAddress || ''}\n                  onChange={(e) => setFormData({...formData, ipAddress: e.target.value})}\n                  placeholder=\"192.168.1.100\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"port\">Port</Label>\n                <Input\n                  id=\"port\"\n                  type=\"number\"\n                  value={formData.port || ''}\n                  onChange={(e) => setFormData({...formData, port: parseInt(e.target.value) || ''})}\n                  placeholder=\"4370\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location\">Location</Label>\n              <Input\n                id=\"location\"\n                value={formData.location || ''}\n                onChange={(e) => setFormData({...formData, location: e.target.value})}\n                placeholder=\"Main Entrance, Floor 2, etc.\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Status</Label>\n              <Select value={formData.status} onValueChange={(value) => setFormData({...formData, status: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </>\n        );\n\n      case 'holiday':\n        return (\n          <>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Holiday Name</Label>\n              <Input\n                id=\"name\"\n                value={formData.name || ''}\n                onChange={(e) => setFormData({...formData, name: e.target.value})}\n                placeholder=\"New Year's Day, Christmas, etc.\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"date\">Date</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date || ''}\n                onChange={(e) => setFormData({...formData, date: e.target.value})}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">Type</Label>\n              <Select value={formData.type} onValueChange={(value) => setFormData({...formData, type: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"national\">National Holiday</SelectItem>\n                  <SelectItem value=\"regional\">Regional Holiday</SelectItem>\n                  <SelectItem value=\"company\">Company Holiday</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || ''}\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\n                placeholder=\"Optional description\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"mandatory\"\n                checked={formData.mandatory || false}\n                onChange={(e) => setFormData({...formData, mandatory: e.target.checked})}\n              />\n              <Label htmlFor=\"mandatory\">Mandatory Holiday</Label>\n            </div>\n          </>\n        );\n\n      case 'leavePolicy':\n        return (\n          <>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Policy Name</Label>\n              <Input\n                id=\"name\"\n                value={formData.name || ''}\n                onChange={(e) => setFormData({...formData, name: e.target.value})}\n                placeholder=\"Annual Leave, Sick Leave, etc.\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">Leave Type</Label>\n              <Select value={formData.type} onValueChange={(value) => setFormData({...formData, type: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select leave type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"annual\">Annual Leave</SelectItem>\n                  <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                  <SelectItem value=\"maternity\">Maternity Leave</SelectItem>\n                  <SelectItem value=\"paternity\">Paternity Leave</SelectItem>\n                  <SelectItem value=\"personal\">Personal Leave</SelectItem>\n                  <SelectItem value=\"emergency\">Emergency Leave</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"allowedDays\">Allowed Days per Year</Label>\n              <Input\n                id=\"allowedDays\"\n                type=\"number\"\n                value={formData.allowedDays || ''}\n                onChange={(e) => setFormData({...formData, allowedDays: parseInt(e.target.value) || ''})}\n                placeholder=\"21\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || ''}\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\n                placeholder=\"Policy description and rules\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"carryForward\"\n                checked={formData.carryForward || false}\n                onChange={(e) => setFormData({...formData, carryForward: e.target.checked})}\n              />\n              <Label htmlFor=\"carryForward\">Allow Carry Forward to Next Year</Label>\n            </div>\n          </>\n        );\n\n      case 'location':\n        return (\n          <>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Location Name</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name || ''}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"Conference Room A, Parking Lot, etc.\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"branchId\">Branch</Label>\n                <Select value={formData.branchId?.toString()} onValueChange={(value) => setFormData({...formData, branchId: parseInt(value)})}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select branch\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {branches.map((branch) => (\n                      <SelectItem key={branch.id} value={branch.id.toString()}>{branch.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Input\n                id=\"address\"\n                value={formData.address || ''}\n                onChange={(e) => setFormData({...formData, address: e.target.value})}\n                placeholder=\"Detailed address of the location\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"capacity\">Capacity</Label>\n              <Input\n                id=\"capacity\"\n                type=\"number\"\n                value={formData.capacity || ''}\n                onChange={(e) => setFormData({...formData, capacity: parseInt(e.target.value) || ''})}\n                placeholder=\"50\"\n              />\n            </div>\n          </>\n        );\n\n      case 'costCenter':\n        return (\n          <>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"code\">Cost Center Code</Label>\n                <Input\n                  id=\"code\"\n                  value={formData.code || ''}\n                  onChange={(e) => setFormData({...formData, code: e.target.value})}\n                  placeholder=\"CC001, IT-001, etc.\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name || ''}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"IT Department, Marketing, etc.\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"budget\">Budget</Label>\n                <Input\n                  id=\"budget\"\n                  value={formData.budget || ''}\n                  onChange={(e) => setFormData({...formData, budget: e.target.value})}\n                  placeholder=\"$50,000\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"manager\">Manager</Label>\n                <Input\n                  id=\"manager\"\n                  value={formData.manager || ''}\n                  onChange={(e) => setFormData({...formData, manager: e.target.value})}\n                  placeholder=\"John Doe\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || ''}\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\n                placeholder=\"Purpose and scope of this cost center\"\n              />\n            </div>\n          </>\n        );\n\n      default:\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">Form fields for {dialogType} will be implemented based on requirements.</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Company Settings</h1>\n          <p className=\"text-muted-foreground\">Manage organizational structure and configuration</p>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"departments\">Departments</TabsTrigger>\n          <TabsTrigger value=\"designations\">Designations</TabsTrigger>\n          <TabsTrigger value=\"locations\">Locations</TabsTrigger>\n          <TabsTrigger value=\"systems\">Systems</TabsTrigger>\n        </TabsList>\n\n        <div className=\"mt-6\">\n          <TabsContent value=\"departments\">\n            {renderDepartments()}\n          </TabsContent>\n\n          <TabsContent value=\"designations\">\n            <div className=\"space-y-6\">\n              {renderGenericTable(\n                \"Designations\",\n                \"Manage job titles and positions\",\n                designations,\n                [\n                  { key: \"title\", label: \"Job Title\" },\n                  { \n                    key: \"departmentId\", \n                    label: \"Department\", \n                    render: (value) => departments.find(d => d.id === value)?.name || 'N/A'\n                  },\n                  { key: \"level\", label: \"Level\", render: (value) => <Badge variant=\"outline\">{value}</Badge> },\n                  { key: \"description\", label: \"Description\" }\n                ],\n                \"designation\",\n                <Users className=\"h-5 w-5\" />\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"locations\">\n            <div className=\"space-y-6\">\n              {renderGenericTable(\n                \"Branches\",\n                \"Manage office branches and locations\",\n                branches,\n                [\n                  { key: \"name\", label: \"Branch Name\" },\n                  { key: \"city\", label: \"City\" },\n                  { key: \"state\", label: \"State\" },\n                  { key: \"manager\", label: \"Manager\" },\n                  { key: \"phone\", label: \"Contact\" }\n                ],\n                \"branch\",\n                <Building2 className=\"h-5 w-5\" />\n              )}\n              \n              {renderGenericTable(\n                \"Locations\",\n                \"Manage specific locations within branches\",\n                locations,\n                [\n                  { key: \"name\", label: \"Location Name\" },\n                  { key: \"address\", label: \"Address\" },\n                  { \n                    key: \"branchId\", \n                    label: \"Branch\", \n                    render: (value) => branches.find(b => b.id === value)?.name || 'N/A'\n                  },\n                  { key: \"capacity\", label: \"Capacity\", render: (value) => `${value} people` }\n                ],\n                \"location\",\n                <MapPin className=\"h-5 w-5\" />\n              )}\n              \n              {renderGenericTable(\n                \"Cost Centers\",\n                \"Manage budget allocation and cost tracking\",\n                costCenters,\n                [\n                  { key: \"code\", label: \"Code\", render: (value) => <Badge variant=\"secondary\">{value}</Badge> },\n                  { key: \"name\", label: \"Name\" },\n                  { key: \"budget\", label: \"Budget\" },\n                  { key: \"manager\", label: \"Manager\" },\n                  { key: \"description\", label: \"Description\" }\n                ],\n                \"costCenter\",\n                <DollarSign className=\"h-5 w-5\" />\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"systems\">\n            <div className=\"space-y-6\">\n              {renderGenericTable(\n                \"Biometric Machines\",\n                \"Manage attendance tracking devices with IP and port configuration\",\n                biometricMachines,\n                [\n                  { key: \"serialNumber\", label: \"Serial Number\", render: (value) => <Badge variant=\"outline\">{value}</Badge> },\n                  { key: \"ipAddress\", label: \"IP Address\", render: (value) => <code className=\"bg-gray-100 px-2 py-1 rounded text-sm\">{value}</code> },\n                  { key: \"port\", label: \"Port\", render: (value) => <Badge variant=\"secondary\">{value}</Badge> },\n                  { key: \"location\", label: \"Location\" },\n                  { key: \"model\", label: \"Model\" },\n                  { \n                    key: \"status\", \n                    label: \"Status\", \n                    render: (value) => (\n                      <Badge variant={value === 'active' ? 'default' : value === 'inactive' ? 'secondary' : 'destructive'}>\n                        {value}\n                      </Badge>\n                    )\n                  }\n                ],\n                \"biometricMachine\",\n                <Fingerprint className=\"h-5 w-5\" />\n              )}\n              \n              {renderGenericTable(\n                \"Holidays\",\n                \"Manage company and national holidays\",\n                holidays,\n                [\n                  { key: \"name\", label: \"Holiday Name\" },\n                  { key: \"date\", label: \"Date\", render: (value) => formatDate(value) },\n                  { \n                    key: \"type\", \n                    label: \"Type\", \n                    render: (value) => (\n                      <Badge variant={value === 'national' ? 'default' : value === 'regional' ? 'secondary' : 'outline'}>\n                        {value}\n                      </Badge>\n                    )\n                  },\n                  { \n                    key: \"mandatory\", \n                    label: \"Mandatory\", \n                    render: (value) => value ? <Badge variant=\"default\">Yes</Badge> : <Badge variant=\"secondary\">No</Badge>\n                  }\n                ],\n                \"holiday\",\n                <Calendar className=\"h-5 w-5\" />\n              )}\n              \n              {renderGenericTable(\n                \"Leave Policies\",\n                \"Manage employee leave policies and allowances\",\n                leavePolicies,\n                [\n                  { key: \"name\", label: \"Policy Name\" },\n                  { \n                    key: \"type\", \n                    label: \"Type\", \n                    render: (value) => <Badge variant=\"outline\">{value}</Badge>\n                  },\n                  { key: \"allowedDays\", label: \"Allowed Days\", render: (value) => `${value} days/year` },\n                  { \n                    key: \"carryForward\", \n                    label: \"Carry Forward\", \n                    render: (value) => value ? <Badge variant=\"default\">Yes</Badge> : <Badge variant=\"secondary\">No</Badge>\n                  }\n                ],\n                \"leavePolicy\",\n                <Clock className=\"h-5 w-5\" />\n              )}\n            </div>\n          </TabsContent>\n        </div>\n      </Tabs>\n\n      {/* Generic Dialog for Forms */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedItem ? `Edit ${dialogType}` : `Add New ${dialogType}`}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {renderFormFields()}\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setShowDialog(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"bg-hr-primary hover:bg-hr-primary/90\"\n                disabled={departmentMutation.isPending}\n              >\n                {departmentMutation.isPending ? 'Saving...' : (selectedItem ? 'Update' : 'Create')}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":40507},"client/src/pages/compliances-data.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { FileSpreadsheet, Filter, Calendar, Plus, Download } from 'lucide-react';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function CompliancesData() {\n  const { user } = useAuth();\n  const [selectedProject, setSelectedProject] = useState<string>('');\n  const [selectedMonth, setSelectedMonth] = useState<string>('');\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: projects = [] } = useQuery({\n    queryKey: ['/api/clients', user?.companyId],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: compliancesData = [] } = useQuery({\n    queryKey: [`/api/compliances-data/${user?.companyId}/${selectedProject}/${selectedMonth}`],\n    enabled: !!user?.companyId && !!selectedProject && !!selectedMonth,\n  });\n\n  // Generate sample data mutation\n  const generateSampleDataMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedProject || !selectedMonth) return;\n      \n      // Get compliance setups for sample data generation\n      const setupResponse = await apiRequest('GET', `/api/compliance-setups/${user?.companyId}`);\n      const setups = await setupResponse.json();\n      \n      if (setups.length === 0) {\n        throw new Error('No employee compliance setups found. Please set up employees first.');\n      }\n\n      // Generate compliance data for each setup\n      const sampleData = setups.map((setup: any) => ({\n        companyId: user?.companyId,\n        projectId: parseInt(selectedProject),\n        employeeId: setup.employeeId,\n        month: selectedMonth,\n        actualPayable: (Math.random() * 50000 + 30000).toFixed(2),\n        compliancesGross: (Math.random() * 45000 + 28000).toFixed(2),\n        compliancesAttendance: Math.floor(Math.random() * 8) + 20, // 20-27 days\n        compliancesOT: Math.floor(Math.random() * 20), // 0-20 hours\n        compliancesGrossEarn: (Math.random() * 48000 + 29000).toFixed(2),\n        pfDeduction: (Math.random() * 3000 + 1500).toFixed(2),\n        esicDeduction: (Math.random() * 1500 + 500).toFixed(2),\n        netPayableAmount: (Math.random() * 42000 + 25000).toFixed(2),\n        differenceAmount: ((Math.random() - 0.5) * 5000).toFixed(2),\n      }));\n\n      // Create all compliance data records\n      for (const data of sampleData) {\n        await apiRequest('POST', '/api/compliances-data', data);\n      }\n      \n      return sampleData;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: [`/api/compliances-data/${user?.companyId}/${selectedProject}/${selectedMonth}`] \n      });\n      toast({\n        title: \"Success\",\n        description: \"Sample compliance data generated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate sample data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate month options for current and previous months\n  const getMonthOptions = () => {\n    const months = [];\n    const currentDate = new Date();\n    \n    for (let i = 0; i < 12; i++) {\n      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\n      const monthYear = date.toISOString().slice(0, 7); // YYYY-MM format\n      const monthName = date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n      months.push({ value: monthYear, label: monthName });\n    }\n    \n    return months;\n  };\n\n  const monthOptions = getMonthOptions();\n\n  const formatCurrency = (amount: number | string) => {\n    return `₹${Number(amount).toLocaleString('en-IN')}`;\n  };\n\n  const handleExportToExcel = () => {\n    const token = localStorage.getItem('token');\n    const url = `/api/compliances/export/${user?.companyId}`;\n    \n    // Create a temporary link with auth header\n    fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    })\n    .then(response => response.blob())\n    .then(blob => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `compliances_${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    })\n    .catch(error => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export compliance data\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Filter className=\"w-5 h-5 mr-2 text-blue-600\" />\n            Filters\n          </CardTitle>\n          <CardDescription>\n            Select project and month to view compliance data\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Project Selection</label>\n              <Select value={selectedProject} onValueChange={setSelectedProject}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {projects.map((project: any) => (\n                    <SelectItem key={project.id} value={project.id.toString()}>\n                      {project.projectName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Month Selection</label>\n              <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select month\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {monthOptions.map((month) => (\n                    <SelectItem key={month.value} value={month.value}>\n                      {month.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compliances Data Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center\">\n                <FileSpreadsheet className=\"w-5 h-5 mr-2 text-green-600\" />\n                Employee Compliances Data\n              </CardTitle>\n              <CardDescription>\n                Detailed compliance breakdown for selected project and month\n              </CardDescription>\n            </div>\n            <Button \n              onClick={handleExportToExcel} \n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Export to Excel\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {!selectedProject || !selectedMonth ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Calendar className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p className=\"text-lg font-medium mb-2\">Select Project and Month</p>\n              <p>Please select both project and month to view compliance data.</p>\n            </div>\n          ) : compliancesData.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500\">\n              <FileSpreadsheet className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n              <p className=\"text-lg font-medium mb-2\">No Data Found</p>\n              <p className=\"mb-4\">No compliance data available for the selected project and month.</p>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-blue-600 mb-3\">\n                  💡 <strong>Automatic Generation:</strong> Compliance data is automatically created when employees are assigned to projects\n                </p>\n                <Button \n                  onClick={() => generateSampleDataMutation.mutate()}\n                  disabled={generateSampleDataMutation.isPending}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  {generateSampleDataMutation.isPending ? \"Generating...\" : \"Generate Sample Data\"}\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">S.N.</TableHead>\n                    <TableHead>Employee Name</TableHead>\n                    <TableHead>Designation</TableHead>\n                    <TableHead className=\"text-right\">Actual Payable</TableHead>\n                    <TableHead className=\"text-right\">Compliances Gross</TableHead>\n                    <TableHead className=\"text-center\">Compliances Attendance</TableHead>\n                    <TableHead className=\"text-right\">Compliances OT</TableHead>\n                    <TableHead className=\"text-right\">Compliances Gross Ern</TableHead>\n                    <TableHead className=\"text-right\">PF Deduction</TableHead>\n                    <TableHead className=\"text-right\">ESIC Deduction</TableHead>\n                    <TableHead className=\"text-right\">Net Payable Amount</TableHead>\n                    <TableHead className=\"text-right\">Difference Amount</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {compliancesData.map((item: any, index: number) => (\n                    <TableRow key={item.id}>\n                      <TableCell className=\"font-medium\">{index + 1}</TableCell>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium\">{item.employee?.firstName} {item.employee?.lastName}</p>\n                          <p className=\"text-sm text-gray-500\">{item.employee?.employeeId}</p>\n                        </div>\n                      </TableCell>\n                      <TableCell>{item.employee?.designation || 'Not Set'}</TableCell>\n                      <TableCell className=\"text-right font-medium\">\n                        {formatCurrency(item.actualPayable || 0)}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        {formatCurrency(item.compliancesGross || 0)}\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <Badge variant={item.compliancesAttendance >= 22 ? 'default' : 'secondary'}>\n                          {item.compliancesAttendance || 0} days\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        {item.compliancesOT || 0} hrs\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        {formatCurrency(item.compliancesGrossEarn || 0)}\n                      </TableCell>\n                      <TableCell className=\"text-right text-red-600\">\n                        -{formatCurrency(item.pfDeduction || 0)}\n                      </TableCell>\n                      <TableCell className=\"text-right text-red-600\">\n                        -{formatCurrency(item.esicDeduction || 0)}\n                      </TableCell>\n                      <TableCell className=\"text-right font-semibold text-green-600\">\n                        {formatCurrency(item.netPayableAmount || 0)}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Badge variant={Number(item.differenceAmount || 0) >= 0 ? 'default' : 'destructive'}>\n                          {formatCurrency(item.differenceAmount || 0)}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Summary Card */}\n      {compliancesData.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">Total Employees</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{compliancesData.length}</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">Total Payable</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {formatCurrency(\n                    compliancesData.reduce((sum: number, item: any) => \n                      sum + Number(item.actualPayable || 0), 0\n                    )\n                  )}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">Total PF Deduction</p>\n                <p className=\"text-2xl font-bold text-red-600\">\n                  {formatCurrency(\n                    compliancesData.reduce((sum: number, item: any) => \n                      sum + Number(item.pfDeduction || 0), 0\n                    )\n                  )}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">Total ESIC Deduction</p>\n                <p className=\"text-2xl font-bold text-red-600\">\n                  {formatCurrency(\n                    compliancesData.reduce((sum: number, item: any) => \n                      sum + Number(item.esicDeduction || 0), 0\n                    )\n                  )}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15048},"client/src/pages/daily-log.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Edit, Trash2, Plus } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface DailyAttendanceRecord {\n  id: number;\n  date: string;\n  day: string;\n  inTime: string;\n  outTime: string;\n  workingHours: number;\n  otHours: number;\n  status: 'Present' | 'Absent' | 'Late' | 'Half Day' | 'Leave';\n  source: 'Biometric' | 'Manual' | 'Self';\n}\n\nexport default function DailyLogPage() {\n  const [, params] = useRoute(\"/admin/attendance/daily-log/:employeeId/:year/:month\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const user = authService.getUser();\n\n  const employeeId = params?.employeeId ? parseInt(params.employeeId) : 0;\n  const year = params?.year ? parseInt(params.year) : new Date().getFullYear();\n  const month = params?.month ? parseInt(params.month) : new Date().getMonth() + 1;\n\n  // Dialog states\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<DailyAttendanceRecord | null>(null);\n  \n  // Form states\n  const [formData, setFormData] = useState({\n    date: '',\n    inTime: '',\n    outTime: '',\n    status: 'Present' as DailyAttendanceRecord['status'],\n    source: 'Manual' as DailyAttendanceRecord['source']\n  });\n\n  // Get employee details\n  const { data: employee } = useQuery({\n    queryKey: [`/api/employees/${user?.companyId}/${employeeId}`],\n    enabled: !!user?.companyId && !!employeeId,\n  });\n\n  // Get daily attendance records\n  const { data: dailyRecords = [], isLoading } = useQuery<DailyAttendanceRecord[]>({\n    queryKey: [`/api/attendance/daily-log/${employeeId}/${year}/${month}`],\n    enabled: !!employeeId,\n  });\n\n  const getMonthName = (monthNum: number) => {\n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    return months[monthNum - 1];\n  };\n\n  const calculateWorkingHours = (inTime: string, outTime: string): number => {\n    if (!inTime || !outTime) return 0;\n    const inDate = new Date(`1970-01-01T${inTime}`);\n    const outDate = new Date(`1970-01-01T${outTime}`);\n    return (outDate.getTime() - inDate.getTime()) / (1000 * 60 * 60);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Present': return 'bg-green-100 text-green-800';\n      case 'Absent': return 'bg-red-100 text-red-800';\n      case 'Late': return 'bg-yellow-100 text-yellow-800';\n      case 'Half Day': return 'bg-blue-100 text-blue-800';\n      case 'Leave': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getSourceColor = (source: string) => {\n    switch (source) {\n      case 'Biometric': return 'bg-indigo-100 text-indigo-800';\n      case 'Manual': return 'bg-orange-100 text-orange-800';\n      case 'Self': return 'bg-cyan-100 text-cyan-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Add record mutation\n  const addRecordMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const token = authService.getToken();\n      if (!token) throw new Error('Authentication required');\n      \n      const response = await fetch('/api/attendance/daily-record', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          employeeId,\n          ...data,\n          workingHours: calculateWorkingHours(data.inTime, data.outTime),\n          otHours: Math.max(0, calculateWorkingHours(data.inTime, data.outTime) - 8)\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to add record');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Daily record added successfully\" });\n      setIsAddDialogOpen(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [`/api/attendance/daily-log/${employeeId}/${year}/${month}`] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Edit record mutation\n  const editRecordMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const token = authService.getToken();\n      if (!token) throw new Error('Authentication required');\n      \n      const response = await fetch(`/api/attendance/daily-record/${editingRecord?.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...data,\n          workingHours: calculateWorkingHours(data.inTime, data.outTime),\n          otHours: Math.max(0, calculateWorkingHours(data.inTime, data.outTime) - 8)\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update record');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Daily record updated successfully\" });\n      setIsEditDialogOpen(false);\n      setEditingRecord(null);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [`/api/attendance/daily-log/${employeeId}/${year}/${month}`] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  // Delete record mutation\n  const deleteRecordMutation = useMutation({\n    mutationFn: async (recordId: number) => {\n      const token = authService.getToken();\n      if (!token) throw new Error('Authentication required');\n      \n      const response = await fetch(`/api/attendance/daily-record/${recordId}`, {\n        method: 'DELETE',\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete record');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Daily record deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [`/api/attendance/daily-log/${employeeId}/${year}/${month}`] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      date: '',\n      inTime: '',\n      outTime: '',\n      status: 'Present',\n      source: 'Manual'\n    });\n  };\n\n  const handleEdit = (record: DailyAttendanceRecord) => {\n    setEditingRecord(record);\n    setFormData({\n      date: record.date,\n      inTime: record.inTime,\n      outTime: record.outTime,\n      status: record.status,\n      source: record.source\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (record: DailyAttendanceRecord) => {\n    if (window.confirm(`Are you sure you want to delete the record for ${record.date}?`)) {\n      deleteRecordMutation.mutate(record.id);\n    }\n  };\n\n  const submitForm = () => {\n    if (!formData.date || !formData.inTime) {\n      toast({ title: \"Error\", description: \"Date and In Time are required\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (editingRecord) {\n      editRecordMutation.mutate(formData);\n    } else {\n      addRecordMutation.mutate(formData);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading daily attendance records...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const employeeName = employee ? `${employee[0]?.firstName} ${employee[0]?.lastName}` : 'Employee';\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation('/admin/attendance')}\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Attendance\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Daily Attendance Log</h1>\n            <p className=\"text-gray-600\">\n              {employeeName} - {getMonthName(month)} {year}\n            </p>\n          </div>\n        </div>\n        <Button onClick={() => setIsAddDialogOpen(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Record\n        </Button>\n      </div>\n\n      {/* Daily Records Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Daily Attendance Records</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Date</TableHead>\n                <TableHead>Day</TableHead>\n                <TableHead>In Time</TableHead>\n                <TableHead>Out Time</TableHead>\n                <TableHead>Working Hours</TableHead>\n                <TableHead>OT Hours</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Source</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {dailyRecords.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={9} className=\"text-center py-8 text-gray-500\">\n                    No daily attendance records found for this period\n                  </TableCell>\n                </TableRow>\n              ) : (\n                dailyRecords.map((record) => (\n                  <TableRow key={record.id}>\n                    <TableCell className=\"font-medium\">{record.date}</TableCell>\n                    <TableCell>{record.day}</TableCell>\n                    <TableCell>{record.inTime || '-'}</TableCell>\n                    <TableCell>{record.outTime || '-'}</TableCell>\n                    <TableCell>{record.workingHours.toFixed(1)}h</TableCell>\n                    <TableCell>{record.otHours.toFixed(1)}h</TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(record.status)}>\n                        {record.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getSourceColor(record.source)}>\n                        {record.source}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(record)}\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"text-red-600 hover:text-red-700\"\n                          onClick={() => handleDelete(record)}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Add Record Dialog */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Add Daily Record</DialogTitle>\n            <DialogDescription>Add new daily attendance record</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"date\">Date</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"inTime\">In Time</Label>\n                <Input\n                  id=\"inTime\"\n                  type=\"time\"\n                  value={formData.inTime}\n                  onChange={(e) => setFormData({ ...formData, inTime: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"outTime\">Out Time</Label>\n                <Input\n                  id=\"outTime\"\n                  type=\"time\"\n                  value={formData.outTime}\n                  onChange={(e) => setFormData({ ...formData, outTime: e.target.value })}\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select value={formData.status} onValueChange={(value: DailyAttendanceRecord['status']) => setFormData({ ...formData, status: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Present\">Present</SelectItem>\n                    <SelectItem value=\"Absent\">Absent</SelectItem>\n                    <SelectItem value=\"Late\">Late</SelectItem>\n                    <SelectItem value=\"Half Day\">Half Day</SelectItem>\n                    <SelectItem value=\"Leave\">Leave</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"source\">Source</Label>\n                <Select value={formData.source} onValueChange={(value: DailyAttendanceRecord['source']) => setFormData({ ...formData, source: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Biometric\">Biometric</SelectItem>\n                    <SelectItem value=\"Manual\">Manual</SelectItem>\n                    <SelectItem value=\"Self\">Self</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => { setIsAddDialogOpen(false); resetForm(); }}>\n                Cancel\n              </Button>\n              <Button onClick={submitForm} disabled={addRecordMutation.isPending}>\n                {addRecordMutation.isPending ? \"Adding...\" : \"Add Record\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Record Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Daily Record</DialogTitle>\n            <DialogDescription>Update daily attendance record</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"editDate\">Date</Label>\n              <Input\n                id=\"editDate\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"editInTime\">In Time</Label>\n                <Input\n                  id=\"editInTime\"\n                  type=\"time\"\n                  value={formData.inTime}\n                  onChange={(e) => setFormData({ ...formData, inTime: e.target.value })}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"editOutTime\">Out Time</Label>\n                <Input\n                  id=\"editOutTime\"\n                  type=\"time\"\n                  value={formData.outTime}\n                  onChange={(e) => setFormData({ ...formData, outTime: e.target.value })}\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"editStatus\">Status</Label>\n                <Select value={formData.status} onValueChange={(value: DailyAttendanceRecord['status']) => setFormData({ ...formData, status: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Present\">Present</SelectItem>\n                    <SelectItem value=\"Absent\">Absent</SelectItem>\n                    <SelectItem value=\"Late\">Late</SelectItem>\n                    <SelectItem value=\"Half Day\">Half Day</SelectItem>\n                    <SelectItem value=\"Leave\">Leave</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"editSource\">Source</Label>\n                <Select value={formData.source} onValueChange={(value: DailyAttendanceRecord['source']) => setFormData({ ...formData, source: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Biometric\">Biometric</SelectItem>\n                    <SelectItem value=\"Manual\">Manual</SelectItem>\n                    <SelectItem value=\"Self\">Self</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => { setIsEditDialogOpen(false); setEditingRecord(null); resetForm(); }}>\n                Cancel\n              </Button>\n              <Button onClick={submitForm} disabled={editRecordMutation.isPending}>\n                {editRecordMutation.isPending ? \"Updating...\" : \"Update Record\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19393},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from \"@/lib/auth\";\nimport SystemAdminDashboard from \"./system-admin-dashboard\";\nimport AdminDashboard from \"./admin-dashboard\";  \nimport EmployeeDashboard from \"./employee-dashboard\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  // Route to the appropriate dashboard based on user role\n  switch (user.role) {\n    case 'system_admin':\n      return <SystemAdminDashboard />;\n    case 'admin':\n      return <AdminDashboard />;\n    case 'employee':\n      return <EmployeeDashboard />;\n    default:\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <p className=\"text-muted-foreground\">Unknown user role: {user.role}</p>\n        </div>\n      );\n  }\n}","size_bytes":784},"client/src/pages/edit-employee.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { authService, apiRequestWithAuth } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download } from \"lucide-react\";\nimport { ArrowLeft, User, Briefcase, MapPin, CreditCard, Clock, Users } from \"lucide-react\";\nimport { type Employee, type Department } from \"@shared/schema\";\nimport SalaryStructureForm from \"@/components/SalaryStructureForm\";\n\ninterface EditEmployeePageProps {\n  params: { id: string };\n}\n\nexport default function EditEmployeePage({ params }: EditEmployeePageProps) {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const employeeId = parseInt(params.id);\n  \n  const user = authService.getUser();\n  const companyId = user?.companyId;\n  \n  // Month/Year selector state for salary structure\n  const currentDate = new Date();\n  const [selectedYear, setSelectedYear] = useState(currentDate.getFullYear());\n  const [selectedMonth, setSelectedMonth] = useState(currentDate.getMonth() + 1);\n  \n  // PDF download state\n  const [downloadingPDF, setDownloadingPDF] = useState(false);\n  \n  // All month names for reference\n  const allMonthOptions = [\n    { value: 1, label: 'January' },\n    { value: 2, label: 'February' },\n    { value: 3, label: 'March' },\n    { value: 4, label: 'April' },\n    { value: 5, label: 'May' },\n    { value: 6, label: 'June' },\n    { value: 7, label: 'July' },\n    { value: 8, label: 'August' },\n    { value: 9, label: 'September' },\n    { value: 10, label: 'October' },\n    { value: 11, label: 'November' },\n    { value: 12, label: 'December' }\n  ];\n  \n  // Fetch employee data with payroll\n  const { data: employee, isLoading: employeeLoading } = useQuery<any>({\n    queryKey: [`/api/employees/${companyId}/${employeeId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/employees/${companyId}/${employeeId}?_t=${Date.now()}`);\n      return response.json();\n    },\n    enabled: !!companyId && !!employeeId,\n    staleTime: 0, // Always consider data stale\n    gcTime: 0, // Don't cache the data\n  });\n\n  // Generate year and month options based on employee's joining date\n  const getPayrollPeriodOptions = () => {\n    if (!employee?.hireDate) {\n      // Fallback if no hire date available\n      return {\n        yearOptions: [currentDate.getFullYear()],\n        monthOptions: allMonthOptions\n      };\n    }\n    \n    const hireDate = new Date(employee.hireDate);\n    const hireYear = hireDate.getFullYear();\n    const hireMonth = hireDate.getMonth() + 1;\n    const currentYear = currentDate.getFullYear();\n    const currentMonth = currentDate.getMonth() + 1;\n    \n    // Generate year options from hire year to current year\n    const yearOptions = [];\n    for (let year = hireYear; year <= currentYear; year++) {\n      yearOptions.push(year);\n    }\n    \n    // Generate month options based on selected year\n    let monthOptions = [...allMonthOptions];\n    \n    if (selectedYear === hireYear && selectedYear === currentYear) {\n      // Same year as hire and current: show from hire month to current month\n      monthOptions = allMonthOptions.filter(m => m.value >= hireMonth && m.value <= currentMonth);\n    } else if (selectedYear === hireYear) {\n      // Hire year but not current: show from hire month to December\n      monthOptions = allMonthOptions.filter(m => m.value >= hireMonth);\n    } else if (selectedYear === currentYear) {\n      // Current year but not hire: show from January to current month\n      monthOptions = allMonthOptions.filter(m => m.value <= currentMonth);\n    }\n    // For other years (between hire and current), show all months\n    \n    return { yearOptions, monthOptions };\n  };\n  \n  const { yearOptions, monthOptions } = getPayrollPeriodOptions();\n  \n  // Ensure selectedMonth is valid when year changes or employee data loads\n  useEffect(() => {\n    if (monthOptions.length > 0) {\n      const validMonthValues = monthOptions.map(m => m.value);\n      if (!validMonthValues.includes(selectedMonth)) {\n        // Set to the closest valid month (first available or current month if available)\n        const currentMonth = currentDate.getMonth() + 1;\n        const preferredMonth = validMonthValues.includes(currentMonth) ? currentMonth : validMonthValues[0];\n        setSelectedMonth(preferredMonth);\n      }\n    }\n  }, [employee, selectedYear, monthOptions.length]);\n\n  // Fetch salary structure for selected month/year\n  const { data: salaryStructure, isLoading: salaryStructureLoading } = useQuery({\n    queryKey: ['/api/employee-salary-structure', employeeId, selectedYear, selectedMonth],\n    queryFn: async () => {\n      try {\n        const response = await apiRequestWithAuth('GET', `/api/employee-salary-structure/${employeeId}/${selectedYear}/${selectedMonth}`);\n        if (response.ok) {\n          return response.json();\n        }\n        return null; // No data for this month\n      } catch (error) {\n        return null; // No data for this month\n      }\n    },\n    enabled: !!employeeId && !!selectedYear && !!selectedMonth,\n    staleTime: 0,\n    gcTime: 0,\n  });\n\n  // Fetch departments\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [`/api/departments/${companyId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/departments/${companyId}`);\n      return response.json();\n    },\n    enabled: !!companyId,\n  });\n\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    employeeId: '',\n    position: '',\n    departmentId: '',\n    address: '',\n    dateOfBirth: '',\n    hireDate: '',\n    salary: '',\n    status: 'active' as 'active' | 'inactive' | 'probation' | 'terminated',\n    emergencyContact: '',\n    emergencyPhone: '',\n    // Time Office Policy fields\n    dutyTimingFrom: '',\n    dutyTimingTo: '',\n    lateArrivalAllowed: '',\n    permissibleFlexibility: '',\n    weeklyOff1: '',\n    weeklyOff2: '',\n    overtimeApplicable: false,\n    // Payroll fields\n    epfEnabled: false,\n    employeePfLimit: false,\n    employerPfLimit: false,\n    esicEnabled: false,\n    lwfEnabled: false,\n    otEnabled: false,\n    doubleOt: false,\n    vpfEnabled: false,\n    vpfAmount: '',\n    tdsEnabled: false,\n    tdsAmount: '',\n    ptEnabled: false,\n    ptAmount: '',\n    bonusEnabled: false,\n    bonusMonthlyPayment: false,\n    entryType: 'gross' as 'ctc' | 'gross' | 'earning_heads',\n    ctcValue: '',\n    grossValue: '',\n    earningHead1: '', // Basic Salary\n    earningHead2: '', // HRA\n    earningHead3: '', // Conveyance Allowance\n    earningHead4: '', // Other Allowances\n    epfEmployeeAmount: '',\n    esicEmployeeAmount: '',\n    lwfEmployeeAmount: ''\n  });\n\n  // Payroll calculation functions with corrected earning heads logic\n  const calculateEarningHeads = (grossAmount: number) => {\n    let basicSalary = 0;\n    let hra = 0;\n    let conveyanceAllowance = 0;\n    let otherAllowances = 0;\n\n    if (grossAmount < 15000) {\n      // For salaries < ₹15,000: Basic = full gross salary\n      basicSalary = grossAmount;\n      hra = 0;\n      conveyanceAllowance = 0;\n      otherAllowances = 0;\n    } else if (grossAmount < 22500) {\n      // For salaries ₹15,000 to ₹22,500: Basic = ₹15,000, HRA = remainder\n      basicSalary = 15000;\n      hra = grossAmount - 15000;\n      conveyanceAllowance = 0;\n      otherAllowances = 0;\n    } else if (grossAmount < 25000) {\n      // For salaries ₹22,500 to ₹25,000: Basic = ₹15,000, HRA = ₹7,500, Conv = Gross-Basic-HRA\n      basicSalary = 15000;              // Fixed ₹15,000\n      hra = 7500;                       // Fixed ₹7,500\n      conveyanceAllowance = grossAmount - basicSalary - hra;  // Remainder\n      otherAllowances = 0;\n    } else if (grossAmount <= 100000) {\n      // For salaries ₹25,000 to ₹1,00,000: Basic = 60%, HRA = 30%, Conveyance = 10%, Other = 0%\n      basicSalary = grossAmount * 0.6;  // 60%\n      hra = grossAmount * 0.3;          // 30%\n      conveyanceAllowance = grossAmount * 0.1;  // 10%\n      otherAllowances = 0;              // Must be 0\n    } else {\n      // For salaries > ₹1,00,000: Basic = 60%, HRA = 30%, Conveyance = 6%, Other = 4%\n      basicSalary = grossAmount * 0.6;  // 60%\n      hra = grossAmount * 0.3;          // 30%\n      conveyanceAllowance = grossAmount * 0.06; // 6%\n      otherAllowances = grossAmount * 0.04;     // 4%\n    }\n    \n    return {\n      basicSalary: Math.round(basicSalary),\n      hra: Math.round(hra),\n      conveyanceAllowance: Math.round(conveyanceAllowance),\n      otherAllowances: Math.round(otherAllowances)\n    };\n  };\n\n  // Populate form when employee data loads or month/year changes\n  useEffect(() => {\n    if (employee) {\n      console.log('Loading employee data:', employee);\n      console.log('Employee payroll data:', employee.payroll);\n      console.log('Salary structure data:', salaryStructure);\n      \n      // Prefer salary structure data for the selected month, fallback to current payroll data\n      const payrollData = salaryStructure || employee.payroll;\n      \n      setFormData({\n        firstName: employee.firstName || '',\n        lastName: employee.lastName || '',\n        email: employee.email || '',\n        phone: employee.phone || '',\n        employeeId: employee.employeeId || '',\n        position: employee.position || '',\n        departmentId: employee.departmentId?.toString() || '',\n        address: employee.address || '',\n        dateOfBirth: employee.dateOfBirth ? new Date(employee.dateOfBirth).toISOString().split('T')[0] : '',\n        hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : '',\n        salary: employee.salary || '',\n        status: employee.status || 'active',\n        emergencyContact: employee.emergencyContact || '',\n        emergencyPhone: employee.emergencyPhone || '',\n        // Time Office Policy fields (placeholder values for now)\n        dutyTimingFrom: '09:00',\n        dutyTimingTo: '18:00',\n        lateArrivalAllowed: '15',\n        permissibleFlexibility: '30',\n        weeklyOff1: 'saturday',\n        weeklyOff2: 'sunday',\n        overtimeApplicable: false,\n        // Payroll fields - load from salary structure (priority) or current payroll data (fallback)\n        epfEnabled: payrollData?.epfEnabled ?? false,\n        employeePfLimit: payrollData?.employeePfLimit ?? false,\n        employerPfLimit: payrollData?.employerPfLimit ?? false,\n        esicEnabled: payrollData?.esicEnabled ?? false,\n        lwfEnabled: payrollData?.lwfEnabled ?? false,\n        otEnabled: payrollData?.otEnabled ?? false,\n        doubleOt: payrollData?.doubleOt ?? false,\n        vpfEnabled: payrollData?.vpfEnabled ?? false,\n        vpfAmount: payrollData?.vpfAmount?.toString() || '',\n        tdsEnabled: payrollData?.tdsEnabled ?? false,\n        tdsAmount: payrollData?.tdsAmount?.toString() || '',\n        ptEnabled: payrollData?.ptEnabled ?? false,\n        ptAmount: payrollData?.ptAmount?.toString() || '',\n        bonusEnabled: payrollData?.bonusEnabled ?? false,\n        bonusMonthlyPayment: payrollData?.bonusMonthlyPayment ?? false,\n        entryType: (payrollData?.entryType as 'ctc' | 'gross' | 'earning_heads') || 'gross',\n        ctcValue: payrollData?.ctcValue?.toString() || '',\n        grossValue: payrollData?.grossValue?.toString() || employee.salary || '',\n        earningHead1: payrollData?.earningHead1?.toString() || '',\n        earningHead2: payrollData?.earningHead2?.toString() || '',\n        earningHead3: payrollData?.earningHead3?.toString() || '',\n        earningHead4: payrollData?.earningHead4?.toString() || '',\n        epfEmployeeAmount: payrollData?.epfEmployeeAmount?.toString() || '',\n        esicEmployeeAmount: payrollData?.esicEmployeeAmount?.toString() || '',\n        lwfEmployeeAmount: payrollData?.lwfEmployeeAmount?.toString() || ''\n      });\n      \n      console.log('Form data set with payroll values:', {\n        epfEnabled: employee.payroll?.epfEnabled,\n        esicEnabled: employee.payroll?.esicEnabled,\n        lwfEnabled: employee.payroll?.lwfEnabled,\n        bonusEnabled: employee.payroll?.bonusEnabled\n      });\n      \n      // Recalculate CTC when form loads with existing data\n      if (payrollData?.entryType === 'gross' || employee.salary) {\n        const grossAmount = parseFloat(payrollData?.grossValue || employee.salary || '0');\n        if (grossAmount > 0) {\n          const calculatedCTC = calculateCTC(grossAmount);\n          console.log('Recalculated CTC on form load:', {\n            gross: grossAmount,\n            calculatedCTC: calculatedCTC,\n            epfEnabled: payrollData?.epfEnabled,\n            employerPfLimit: payrollData?.employerPfLimit,\n            esicEnabled: payrollData?.esicEnabled,\n            originalCTC: payrollData?.ctcValue\n          });\n          \n          // Update form data with correct CTC\n          setTimeout(() => {\n            setFormData(prev => ({\n              ...prev,\n              ctcValue: calculatedCTC.toFixed(2)\n            }));\n          }, 200);\n        }\n      }\n      \n      // Only auto-calculate earning heads if none are saved in the database\n      const earningHeads = [\n        payrollData?.earningHead1,\n        payrollData?.earningHead2,\n        payrollData?.earningHead3,\n        payrollData?.earningHead4\n      ];\n      const hasSavedEarningHeads = earningHeads.some(v => v !== undefined && v !== null && v !== '');\n      \n      if (!hasSavedEarningHeads) {\n        setTimeout(() => {\n          const grossAmount = parseFloat(payrollData?.grossValue || employee.salary || '0');\n          if (grossAmount > 0) {\n            const earningHeads = calculateEarningHeads(grossAmount);\n            setFormData(prev => ({\n              ...prev,\n              earningHead1: earningHeads.basicSalary.toString(),\n              earningHead2: earningHeads.hra.toString(),\n              earningHead3: earningHeads.conveyanceAllowance.toString(),\n              earningHead4: earningHeads.otherAllowances.toString()\n            }));\n          }\n        }, 100);\n      }\n    }\n  }, [employee, salaryStructure, selectedYear, selectedMonth]);\n\n  // Auto-recalculate CTC when relevant fields change\n  useEffect(() => {\n    if (formData.entryType === 'gross' && formData.grossValue) {\n      const grossAmount = parseFloat(formData.grossValue);\n      if (grossAmount > 0) {\n        const calculatedCTC = calculateCTC(grossAmount);\n        const newCtcValue = calculatedCTC.toFixed(2);\n        \n        if (newCtcValue !== formData.ctcValue) {\n          console.log('Auto-recalculating CTC:', {\n            gross: grossAmount,\n            oldCTC: formData.ctcValue,\n            newCTC: newCtcValue,\n            epfEnabled: formData.epfEnabled,\n            employerPfLimit: formData.employerPfLimit,\n            esicEnabled: formData.esicEnabled,\n            lwfEnabled: formData.lwfEnabled\n          });\n          \n          setFormData(prev => ({\n            ...prev,\n            ctcValue: newCtcValue\n          }));\n        }\n      }\n    }\n  }, [\n    formData.grossValue,\n    formData.entryType,\n    formData.epfEnabled,\n    formData.employerPfLimit,\n    formData.esicEnabled,\n    formData.lwfEnabled,\n    formData.bonusEnabled,\n    formData.bonusMonthlyPayment,\n    formData.earningHead1 // Basic salary affects PF calculation\n  ]);\n\n  const updateEmployeeMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const updateData = {\n        ...data,\n        departmentId: data.departmentId ? parseInt(data.departmentId) : null,\n        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth).toISOString() : null,\n        hireDate: data.hireDate ? new Date(data.hireDate).toISOString() : null,\n      };\n      \n      const response = await apiRequestWithAuth('PUT', `/api/employees/${employeeId}`, updateData);\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      // Immediately update form state with the submitted values\n      setFormData(prev => ({\n        ...prev,\n        earningHead1: variables.earningHead1,\n        earningHead2: variables.earningHead2,\n        earningHead3: variables.earningHead3,\n        earningHead4: variables.earningHead4,\n        grossValue: variables.grossValue,\n        ctcValue: variables.ctcValue\n      }));\n      \n      // Clear all cache and force fresh data\n      queryClient.clear();\n      \n      // Refetch with cache busting\n      setTimeout(() => {\n        queryClient.refetchQueries({ queryKey: [`/api/employees/${companyId}/${employeeId}`] });\n      }, 100);\n      \n      toast({\n        title: \"Success\",\n        description: \"Employee updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Comprehensive cascading salary structure save mutation \n  const saveSalaryStructureMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const structureData = {\n        // Payroll toggles\n        epfEnabled: data.epfEnabled,\n        employeePfLimit: data.employeePfLimit,\n        employerPfLimit: data.employerPfLimit,\n        esicEnabled: data.esicEnabled,\n        lwfEnabled: data.lwfEnabled,\n        otEnabled: data.otEnabled,\n        doubleOt: data.doubleOt,\n        vpfEnabled: data.vpfEnabled,\n        vpfAmount: data.vpfAmount,\n        tdsEnabled: data.tdsEnabled,\n        tdsAmount: data.tdsAmount,\n        ptEnabled: data.ptEnabled,\n        ptAmount: data.ptAmount,\n        bonusEnabled: data.bonusEnabled,\n        bonusMonthlyPayment: data.bonusMonthlyPayment,\n        // Salary structure\n        entryType: data.entryType,\n        ctcValue: data.ctcValue,\n        grossValue: data.grossValue,\n        earningHead1: data.earningHead1,\n        earningHead2: data.earningHead2,\n        earningHead3: data.earningHead3,\n        earningHead4: data.earningHead4,\n        epfEmployeeAmount: data.epfEmployeeAmount,\n        esicEmployeeAmount: data.esicEmployeeAmount,\n        lwfEmployeeAmount: data.lwfEmployeeAmount\n      };\n      \n      // First save the current month\n      const response = await apiRequestWithAuth('PUT', `/api/employee-salary-structure/${employeeId}/${selectedYear}/${selectedMonth}`, structureData);\n      const result = await response.json();\n      \n      // Then cascade to all future months\n      try {\n        const cascadeResponse = await apiRequestWithAuth('POST', `/api/employee-salary-structure/${employeeId}/${selectedYear}/${selectedMonth}/cascade`, structureData);\n        const cascadeResult = await cascadeResponse.json();\n        \n        return {\n          ...result,\n          cascadeInfo: cascadeResult\n        };\n      } catch (cascadeError) {\n        console.warn('Cascade update failed:', cascadeError);\n        // Return the main result even if cascade fails\n        return {\n          ...result,\n          cascadeInfo: null,\n          cascadeError: cascadeError.message\n        };\n      }\n    },\n    onSuccess: (data) => {\n      // Invalidate all salary structure caches since we updated multiple months\n      queryClient.invalidateQueries({ queryKey: ['/api/employee-salary-structure'] });\n      \n      const monthName = allMonthOptions.find(m => m.value === selectedMonth)?.label;\n      let description = `Salary structure saved for ${monthName} ${selectedYear}`;\n      \n      if (data.cascadeInfo?.updatedMonths?.length > 0) {\n        description += ` and cascaded to ${data.cascadeInfo.updatedMonths.length} future months`;\n      } else if (data.cascadeError) {\n        description += ` (cascade to future months failed)`;\n      }\n      \n      toast({\n        title: \"Success\",\n        description,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save salary structure\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Handle PDF download\n  const handleDownloadSalaryHistory = async () => {\n    if (!employeeId) return;\n    \n    setDownloadingPDF(true);\n    \n    try {\n      // Get the JWT token for authentication\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Not authenticated');\n      }\n      \n      // Use direct fetch for binary PDF data (don't use apiRequestWithAuth which expects JSON)\n      const response = await fetch(`/api/employee-salary-structure/${employeeId}/pdf?limit=12`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to generate PDF');\n      }\n      \n      // Get the PDF blob\n      const blob = await response.blob();\n      \n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      \n      // Set filename from Content-Disposition header or use default\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = 'salary_history.pdf';\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n      \n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      \n      // Cleanup\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: \"Salary history PDF downloaded successfully\",\n      });\n      \n    } catch (error: any) {\n      console.error('Error downloading PDF:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to download salary history PDF\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDownloadingPDF(false);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Always recalculate earning heads based on current gross value before submitting\n    const grossAmount = parseFloat(formData.grossValue || '0');\n    let submissionData = { ...formData };\n    \n    if (grossAmount > 0) {\n      const calculatedEarnings = calculateEarningHeads(grossAmount);\n      submissionData = {\n        ...formData,\n        earningHead1: calculatedEarnings.basicSalary.toString(),\n        earningHead2: calculatedEarnings.hra.toString(),\n        earningHead3: calculatedEarnings.conveyanceAllowance.toString(),\n        earningHead4: calculatedEarnings.otherAllowances.toString()\n      };\n    }\n    \n    // Only update global employee payroll if editing current month, otherwise only save month-specific structure\n    const isCurrentMonth = selectedYear === currentDate.getFullYear() && selectedMonth === (currentDate.getMonth() + 1);\n    \n    if (isCurrentMonth) {\n      // Save to both global payroll and month-specific structure for current month\n      updateEmployeeMutation.mutate(submissionData);\n      saveSalaryStructureMutation.mutate(submissionData);\n      \n      // Auto-update future months with the same structure\n      autoUpdateFutureMonthsMutation.mutate(submissionData);\n    } else {\n      // Only save to month-specific structure for historical/future months\n      saveSalaryStructureMutation.mutate(submissionData);\n    }\n  };\n\n  const handleInputChange = (field: keyof typeof formData, value: string | boolean) => {\n    setFormData(prev => {\n      const newData = { ...prev, [field]: value };\n      \n      // Auto-calculate employee amounts when components are enabled\n      if (field === 'epfEnabled') {\n        if (value === true) {\n          // Calculate PF base: All earning heads except HRA\n          const pfBase = (parseFloat(newData.earningHead1 || '0') + \n                          parseFloat(newData.earningHead3 || '0') + \n                          parseFloat(newData.earningHead4 || '0'));\n          let epfAmount = pfBase * 0.12; // 12% of PF Base (excluding HRA)\n          \n          // Apply Employee PF Limit: Maximum deduction of 1800 when enabled\n          if (newData.employeePfLimit && epfAmount > 1800) {\n            epfAmount = 1800;\n          }\n          \n          newData.epfEmployeeAmount = epfAmount.toFixed(2);\n        } else {\n          // Clear EPF amount when EPF is disabled\n          newData.epfEmployeeAmount = '0.00';\n        }\n      } else if (field === 'esicEnabled') {\n        if (value === true) {\n          const grossAmount = parseFloat(newData.grossValue || '0');\n          \n          // Apply ESIC Ceiling: Zero ESIC when gross > 21000\n          let esicAmount = 0;\n          if (grossAmount <= 21000) {\n            esicAmount = grossAmount * 0.0075; // 0.75% of Gross\n          }\n          \n          newData.esicEmployeeAmount = esicAmount.toFixed(2);\n        } else {\n          // Clear ESIC amount when ESIC is disabled\n          newData.esicEmployeeAmount = '0.00';\n        }\n      } else if (field === 'lwfEnabled') {\n        if (value === true) {\n          newData.lwfEmployeeAmount = '10.00'; // Fixed amount for employee\n        } else {\n          // Clear LWF amount when LWF is disabled\n          newData.lwfEmployeeAmount = '0.00';\n        }\n      } else if (field === 'employeePfLimit') {\n        // Recalculate EPF amount when PF limit toggle changes\n        if (newData.epfEnabled) {\n          // Calculate PF base: All earning heads except HRA\n          const pfBase = (parseFloat(newData.earningHead1 || '0') + \n                          parseFloat(newData.earningHead3 || '0') + \n                          parseFloat(newData.earningHead4 || '0'));\n          let epfAmount = pfBase * 0.12; // 12% of PF Base (excluding HRA)\n          \n          // Apply Employee PF Limit: Maximum deduction of 1800 when enabled\n          if (value === true && epfAmount > 1800) {\n            epfAmount = 1800;\n          }\n          \n          newData.epfEmployeeAmount = epfAmount.toFixed(2);\n        }\n      }\n      \n      // Recalculate employee amounts when earning heads change (any earning head affects PF except HRA)\n      if ((field === 'earningHead1' || field === 'earningHead3' || field === 'earningHead4') && newData.epfEnabled) {\n        // Calculate PF base: All earning heads except HRA (earningHead2)\n        const pfBase = (parseFloat(newData.earningHead1 || '0') + \n                        parseFloat(newData.earningHead3 || '0') + \n                        parseFloat(newData.earningHead4 || '0'));\n        let epfAmount = pfBase * 0.12; // 12% of PF Base (excluding HRA)\n        \n        // Apply Employee PF Limit: Maximum deduction of 1800 when enabled\n        if (newData.employeePfLimit && epfAmount > 1800) {\n          epfAmount = 1800;\n        }\n        \n        newData.epfEmployeeAmount = epfAmount.toFixed(2);\n      }\n      \n      if ((field === 'grossValue' || field.startsWith('earningHead')) && newData.esicEnabled) {\n        const grossAmount = field === 'grossValue' ? parseFloat(value as string || '0') : parseFloat(newData.grossValue || '0');\n        \n        // Apply ESIC Ceiling: Zero ESIC when gross > 21000\n        let esicAmount = 0;\n        if (grossAmount <= 21000) {\n          esicAmount = grossAmount * 0.0075; // 0.75% of Gross\n        }\n        \n        newData.esicEmployeeAmount = esicAmount.toFixed(2);\n      }\n      \n      return newData;\n    });\n  };\n\n  const calculateGross = () => {\n    const earning1 = parseFloat(formData.earningHead1) || 0;\n    const earning2 = parseFloat(formData.earningHead2) || 0;\n    const earning3 = parseFloat(formData.earningHead3) || 0;\n    const earning4 = parseFloat(formData.earningHead4) || 0;\n    return earning1 + earning2 + earning3 + earning4;\n  };\n\n  // Calculate PF base: All earning heads except HRA (earningHead2)\n  const calculatePFBase = () => {\n    const earning1 = parseFloat(formData.earningHead1) || 0; // Basic Salary\n    const earning3 = parseFloat(formData.earningHead3) || 0; // Other allowances\n    const earning4 = parseFloat(formData.earningHead4) || 0; // Other allowances\n    // Note: earningHead2 (HRA) is excluded from PF calculation\n    return earning1 + earning3 + earning4;\n  };\n\n  const calculateCTC = (grossAmount: number) => {\n    // Get PF base for PF calculations - all earning heads except HRA\n    const pfBase = calculatePFBase();\n    \n    // CTC = Gross + Employer Contributions\n    let employerPF = formData.epfEnabled ? pfBase * 0.12 : 0; // 12% of PF Base (excluding HRA)\n    let adminCharges = formData.epfEnabled ? pfBase * 0.01 : 0; // 1% of PF Base (excluding HRA)\n    \n    // Apply Employer PF Limit: Maximum contribution of 1800 + fixed admin charges of 150 when enabled\n    if (formData.employerPfLimit && formData.epfEnabled) {\n      if (employerPF > 1800) {\n        employerPF = 1800;\n      }\n      adminCharges = 150; // Fixed amount when limit is enabled\n    }\n    \n    // Apply ESIC Ceiling: Zero ESIC when gross > 21000\n    let employerESIC = 0;\n    if (formData.esicEnabled && grossAmount <= 21000) {\n      employerESIC = grossAmount * 0.0325; // 3.25% of Gross\n    }\n    \n    const employerLWF = formData.lwfEnabled ? 20 : 0; // Fixed amount\n    const bonus = formData.bonusEnabled ? grossAmount * 0.0833 : 0; // 8.33% of Gross (always include when enabled)\n    \n    return grossAmount + employerPF + adminCharges + employerESIC + employerLWF + bonus;\n  };\n\n  const calculateGrossFromCTC = (ctcAmount: number) => {\n    // Reverse calculation approximation\n    const estimatedMultiplier = 1.25; // Approximate multiplier\n    return ctcAmount / estimatedMultiplier;\n  };\n\n  // Handle entry type changes and auto-calculations\n  const handleEntryTypeChange = (entryType: string) => {\n    setFormData(prev => {\n      const newData = { ...prev, entryType: entryType as 'ctc' | 'gross' | 'earning_heads' };\n      \n      if (entryType === 'ctc' && prev.ctcValue) {\n        const grossCalculated = calculateGrossFromCTC(parseFloat(prev.ctcValue));\n        newData.grossValue = grossCalculated.toFixed(2);\n      } else if (entryType === 'gross' && prev.grossValue) {\n        const ctcCalculated = calculateCTC(parseFloat(prev.grossValue));\n        newData.ctcValue = ctcCalculated.toFixed(2);\n      } else if (entryType === 'earning_heads') {\n        // Auto-calculate earning heads when switching to this mode\n        if (prev.grossValue) {\n          const grossAmount = parseFloat(prev.grossValue);\n          const earningHeads = calculateEarningHeads(grossAmount);\n          newData.earningHead1 = earningHeads.basicSalary.toString();\n          newData.earningHead2 = earningHeads.hra.toString();\n          newData.earningHead3 = earningHeads.conveyanceAllowance.toString();\n          newData.earningHead4 = earningHeads.otherAllowances.toString();\n        }\n        const grossCalculated = calculateGross();\n        const ctcCalculated = calculateCTC(grossCalculated);\n        newData.grossValue = grossCalculated.toFixed(2);\n        newData.ctcValue = ctcCalculated.toFixed(2);\n      }\n      \n      return newData;\n    });\n  };\n\n  const handleSalaryValueChange = (field: string, value: string) => {\n    setFormData(prev => {\n      const newData = { ...prev, [field]: value };\n      \n      if (field === 'ctcValue' && prev.entryType === 'ctc') {\n        const grossCalculated = calculateGrossFromCTC(parseFloat(value) || 0);\n        newData.grossValue = grossCalculated.toFixed(2);\n      } else if (field === 'grossValue' && prev.entryType === 'gross') {\n        const ctcCalculated = calculateCTC(parseFloat(value) || 0);\n        newData.ctcValue = ctcCalculated.toFixed(2);\n      } else if (field.startsWith('earningHead')) {\n        // Allow direct earning head updates regardless of entry type\n        // Only recalculate gross/CTC when entry type is earning_heads\n        if (prev.entryType === 'earning_heads') {\n          setTimeout(() => {\n            const grossCalculated = calculateGross();\n            const ctcCalculated = calculateCTC(grossCalculated);\n            setFormData(current => ({\n              ...current,\n              grossValue: grossCalculated.toFixed(2),\n              ctcValue: ctcCalculated.toFixed(2)\n            }));\n          }, 0);\n        }\n      }\n      \n      return newData;\n    });\n  };\n\n  if (employeeLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  if (!employee) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">Employee Not Found</h2>\n          <p className=\"text-gray-600 mb-4\">The employee you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation('/admin/employees')}>\n            Back to Employees\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setLocation('/admin/employees')}\n          className=\"flex items-center gap-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back to Employees\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Edit Employee</h1>\n          <p className=\"text-muted-foreground\">Update employee information</p>\n        </div>\n      </div>\n\n      {/* Form */}\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <Tabs defaultValue=\"personal\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"personal\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              Personal\n            </TabsTrigger>\n            <TabsTrigger value=\"employment\" className=\"flex items-center gap-2\">\n              <Briefcase className=\"h-4 w-4\" />\n              Employment\n            </TabsTrigger>\n            <TabsTrigger value=\"contact\" className=\"flex items-center gap-2\">\n              <MapPin className=\"h-4 w-4\" />\n              Contact\n            </TabsTrigger>\n            <TabsTrigger value=\"payroll\" className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-4 w-4\" />\n              Payroll\n            </TabsTrigger>\n            <TabsTrigger value=\"time\" className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Time Office\n            </TabsTrigger>\n            <TabsTrigger value=\"emergency\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Emergency\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Personal Information */}\n          <TabsContent value=\"personal\">\n            <Card>\n              <CardHeader className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950 dark:to-indigo-950\">\n                <CardTitle className=\"text-blue-700 dark:text-blue-300\">Personal Information</CardTitle>\n                <CardDescription>Basic employee details and identification</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6 pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name *</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      placeholder=\"Enter first name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name *</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={formData.lastName}\n                      onChange={(e) => handleInputChange('lastName', e.target.value)}\n                      placeholder=\"Enter last name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"employeeId\">Employee ID *</Label>\n                    <Input\n                      id=\"employeeId\"\n                      value={formData.employeeId}\n                      onChange={(e) => handleInputChange('employeeId', e.target.value)}\n                      placeholder=\"Enter employee ID\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      placeholder=\"Enter email address\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                      placeholder=\"Enter phone number\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                    <Input\n                      id=\"dateOfBirth\"\n                      type=\"date\"\n                      value={formData.dateOfBirth}\n                      onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Employment Information */}\n          <TabsContent value=\"employment\">\n            <Card>\n              <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950 dark:to-emerald-950\">\n                <CardTitle className=\"text-green-700 dark:text-green-300\">Employment Information</CardTitle>\n                <CardDescription>Job role and department details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6 pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"position\">Position</Label>\n                    <Input\n                      id=\"position\"\n                      value={formData.position}\n                      onChange={(e) => handleInputChange('position', e.target.value)}\n                      placeholder=\"Enter position/designation\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"departmentId\">Department</Label>\n                    <Select\n                      value={formData.departmentId}\n                      onValueChange={(value) => handleInputChange('departmentId', value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select department\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {departments.map((dept) => (\n                          <SelectItem key={dept.id} value={dept.id.toString()}>\n                            {dept.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"hireDate\">Hire Date</Label>\n                    <Input\n                      id=\"hireDate\"\n                      type=\"date\"\n                      value={formData.hireDate}\n                      onChange={(e) => handleInputChange('hireDate', e.target.value)}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select\n                      value={formData.status}\n                      onValueChange={(value) => handleInputChange('status', value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        <SelectItem value=\"probation\">Probation</SelectItem>\n                        <SelectItem value=\"terminated\">Terminated</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contact Information */}\n          <TabsContent value=\"contact\">\n            <Card>\n              <CardHeader className=\"bg-gradient-to-r from-purple-50 to-violet-50 dark:from-purple-950 dark:to-violet-950\">\n                <CardTitle className=\"text-purple-700 dark:text-purple-300\">Contact Information</CardTitle>\n                <CardDescription>Address and location details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6 pt-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    placeholder=\"Enter complete address\"\n                    rows={3}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Payroll Information */}\n          <TabsContent value=\"payroll\">\n            <div className=\"space-y-6\">\n              {/* Month/Year Selector for Historical Salary Structure */}\n              <Card>\n                <CardHeader className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950 dark:to-orange-950\">\n                  <CardTitle className=\"text-yellow-700 dark:text-yellow-300\">Payroll Information</CardTitle>\n                  <CardDescription>Complete payroll setup with automatic calculations</CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center gap-4 mb-4\">\n                    <h3 className=\"text-lg font-semibold text-blue-700 dark:text-blue-300\">Salary Structure Period</h3>\n                    {salaryStructureLoading && (\n                      <div className=\"text-sm text-gray-500\">Loading...</div>\n                    )}\n                    {salaryStructure && (\n                      <div className=\"text-sm text-green-600 font-medium\">✓ Data found for this period</div>\n                    )}\n                    {!salaryStructureLoading && !salaryStructure && (selectedYear !== currentDate.getFullYear() || selectedMonth !== (currentDate.getMonth() + 1)) && (\n                      <div className=\"text-sm text-gray-500\">No data for this period - will use current payroll as template</div>\n                    )}\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"salary-year\">Year</Label>\n                      <Select\n                        value={selectedYear.toString()}\n                        onValueChange={(value) => setSelectedYear(parseInt(value))}\n                      >\n                        <SelectTrigger id=\"salary-year\" data-testid=\"select-year\">\n                          <SelectValue placeholder=\"Select year\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {yearOptions.map(year => (\n                            <SelectItem key={year} value={year.toString()}>\n                              {year}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"salary-month\">Month</Label>\n                      <Select\n                        value={selectedMonth.toString()}\n                        onValueChange={(value) => setSelectedMonth(parseInt(value))}\n                      >\n                        <SelectTrigger id=\"salary-month\" data-testid=\"select-month\">\n                          <SelectValue placeholder=\"Select month\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {monthOptions.map(month => (\n                            <SelectItem key={month.value} value={month.value.toString()}>\n                              {month.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  {/* PDF Download Button */}\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleDownloadSalaryHistory}\n                      disabled={downloadingPDF}\n                      className=\"flex items-center gap-2\"\n                    >\n                      {downloadingPDF ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                          Generating PDF...\n                        </>\n                      ) : (\n                        <>\n                          <Download className=\"w-4 h-4\" />\n                          Download Salary History PDF\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Modern Salary Structure Form */}\n              <SalaryStructureForm\n                companyId={companyId!}\n                employeeId={employeeId}\n                initialData={salaryStructure || employee?.payroll}\n                onSave={(salaryData) => {\n                  // Update form data with new salary structure\n                  setFormData(prev => ({\n                    ...prev,\n                    ...salaryData\n                  }));\n                  \n                  // Save salary structure for the selected month\n                  const isCurrentMonth = selectedYear === currentDate.getFullYear() && selectedMonth === (currentDate.getMonth() + 1);\n                  \n                  if (isCurrentMonth) {\n                    // Save to both global payroll and month-specific structure for current month\n                    updateEmployeeMutation.mutate({ ...formData, ...salaryData });\n                    saveSalaryStructureMutation.mutate(salaryData);\n                    \n                    // Auto-update future months with the same structure\n                    autoUpdateFutureMonthsMutation.mutate(salaryData);\n                  } else {\n                    // Only save to month-specific structure for historical/future months\n                    saveSalaryStructureMutation.mutate(salaryData);\n                  }\n                }}\n              />\n            </div>\n          </TabsContent>\n\n          {/* Time Office Policy */}\n          <TabsContent value=\"time\">\n            <Card>\n              <CardHeader className=\"bg-gradient-to-r from-teal-50 to-cyan-50 dark:from-teal-950 dark:to-cyan-950\">\n                <CardTitle className=\"text-teal-700 dark:text-teal-300\">Time Office Policy</CardTitle>\n                <CardDescription>Working hours and attendance policies</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6 pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dutyTimingFrom\">Duty Timing From</Label>\n                    <Input\n                      id=\"dutyTimingFrom\"\n                      type=\"time\"\n                      value={formData.dutyTimingFrom}\n                      onChange={(e) => handleInputChange('dutyTimingFrom', e.target.value)}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dutyTimingTo\">Duty Timing To</Label>\n                    <Input\n                      id=\"dutyTimingTo\"\n                      type=\"time\"\n                      value={formData.dutyTimingTo}\n                      onChange={(e) => handleInputChange('dutyTimingTo', e.target.value)}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lateArrivalAllowed\">Late Arrival Allowed (minutes)</Label>\n                    <Input\n                      id=\"lateArrivalAllowed\"\n                      type=\"number\"\n                      value={formData.lateArrivalAllowed}\n                      onChange={(e) => handleInputChange('lateArrivalAllowed', e.target.value)}\n                      placeholder=\"Minutes\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"earlyDepartureAllowed\">Early Departure Allowed (minutes)</Label>\n                    <Input\n                      id=\"earlyDepartureAllowed\"\n                      type=\"number\"\n                      value={formData.earlyDepartureAllowed}\n                      onChange={(e) => handleInputChange('earlyDepartureAllowed', e.target.value)}\n                      placeholder=\"Minutes\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </form>\n    </div>\n  );\n}\n","size_bytes":51239},"client/src/pages/employee-compliances-setup.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Settings, Save, User } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/lib/auth';\n\nconst complianceSetupSchema = z.object({\n  employeeId: z.string().min(1, 'Employee selection is required'),\n  basicSalary: z.string().min(1, 'Basic salary is required'),\n  grossSalary: z.string().min(1, 'Gross salary is required'),\n  differenceAdjustment: z.boolean().default(false),\n  pfType: z.enum(['exempt', 'actual', 'ctc']),\n  esicType: z.enum(['exempt', 'actual', 'ctc']),\n  bonusType: z.enum(['exempt', 'actual', 'ctc']),\n});\n\ntype ComplianceSetupFormData = z.infer<typeof complianceSetupSchema>;\n\nexport default function EmployeeCompliancesSetup() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedEmployee, setSelectedEmployee] = useState<string>('');\n\n  const { data: employees = [] } = useQuery({\n    queryKey: ['/api/employees', user?.companyId],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: complianceSetups = [] } = useQuery({\n    queryKey: ['/api/compliance-setups', user?.companyId],\n    enabled: !!user?.companyId,\n  });\n\n  const form = useForm<ComplianceSetupFormData>({\n    resolver: zodResolver(complianceSetupSchema),\n    defaultValues: {\n      employeeId: '',\n      basicSalary: '',\n      grossSalary: '',\n      differenceAdjustment: false,\n      pfType: 'actual',\n      esicType: 'actual',\n      bonusType: 'actual',\n    },\n  });\n\n  const createComplianceSetupMutation = useMutation({\n    mutationFn: async (data: ComplianceSetupFormData) => {\n      const response = await apiRequest('POST', '/api/compliance-setups', {\n        ...data,\n        companyId: user?.companyId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/compliance-setups'] });\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Employee compliance setup saved successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to save compliance setup',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ComplianceSetupFormData) => {\n    createComplianceSetupMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Setup Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Settings className=\"w-5 h-5 mr-2 text-blue-600\" />\n              Compliance Configuration\n            </CardTitle>\n            <CardDescription>\n              Set up compliance parameters for individual employees\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"employeeId\">Select Employee</Label>\n                <Select \n                  value={form.watch('employeeId')} \n                  onValueChange={(value) => form.setValue('employeeId', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose employee\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {employees.map((employee: any) => (\n                      <SelectItem key={employee.id} value={employee.id.toString()}>\n                        {employee.firstName} {employee.lastName} ({employee.employeeId})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.employeeId && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {form.formState.errors.employeeId.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"basicSalary\">Basic Salary</Label>\n                  <Input\n                    id=\"basicSalary\"\n                    type=\"number\"\n                    {...form.register('basicSalary')}\n                    placeholder=\"Enter basic salary\"\n                  />\n                  {form.formState.errors.basicSalary && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.basicSalary.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"grossSalary\">Gross Salary</Label>\n                  <Input\n                    id=\"grossSalary\"\n                    type=\"number\"\n                    {...form.register('grossSalary')}\n                    placeholder=\"Enter gross salary\"\n                  />\n                  {form.formState.errors.grossSalary && (\n                    <p className=\"text-red-500 text-sm mt-1\">\n                      {form.formState.errors.grossSalary.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"differenceAdjustment\"\n                  checked={form.watch('differenceAdjustment')}\n                  onCheckedChange={(checked) => \n                    form.setValue('differenceAdjustment', checked as boolean)\n                  }\n                />\n                <Label htmlFor=\"differenceAdjustment\">Difference Adjustment</Label>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>PF Type</Label>\n                  <Select \n                    value={form.watch('pfType')} \n                    onValueChange={(value: 'exempt' | 'actual' | 'ctc') => \n                      form.setValue('pfType', value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"exempt\">Exempt</SelectItem>\n                      <SelectItem value=\"actual\">Actual</SelectItem>\n                      <SelectItem value=\"ctc\">CTC</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>ESIC Type</Label>\n                  <Select \n                    value={form.watch('esicType')} \n                    onValueChange={(value: 'exempt' | 'actual' | 'ctc') => \n                      form.setValue('esicType', value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"exempt\">Exempt</SelectItem>\n                      <SelectItem value=\"actual\">Actual</SelectItem>\n                      <SelectItem value=\"ctc\">CTC</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Bonus Type</Label>\n                  <Select \n                    value={form.watch('bonusType')} \n                    onValueChange={(value: 'exempt' | 'actual' | 'ctc') => \n                      form.setValue('bonusType', value)\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"exempt\">Exempt</SelectItem>\n                      <SelectItem value=\"actual\">Actual</SelectItem>\n                      <SelectItem value=\"ctc\">CTC</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={createComplianceSetupMutation.isPending}\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {createComplianceSetupMutation.isPending ? 'Saving...' : 'Save Setup'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Current Setups */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <User className=\"w-5 h-5 mr-2 text-green-600\" />\n              Current Compliance Setups\n            </CardTitle>\n            <CardDescription>\n              View existing compliance configurations\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {complianceSetups.length === 0 ? (\n                <p className=\"text-gray-500 text-center py-8\">\n                  No compliance setups found. Create your first setup using the form.\n                </p>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Employee</TableHead>\n                      <TableHead>Basic</TableHead>\n                      <TableHead>Gross</TableHead>\n                      <TableHead>PF</TableHead>\n                      <TableHead>ESIC</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {complianceSetups.map((setup: any) => (\n                      <TableRow key={setup.id}>\n                        <TableCell className=\"font-medium\">\n                          {setup.employee?.firstName} {setup.employee?.lastName}\n                        </TableCell>\n                        <TableCell>₹{setup.basicSalary}</TableCell>\n                        <TableCell>₹{setup.grossSalary}</TableCell>\n                        <TableCell className=\"capitalize\">{setup.pfType}</TableCell>\n                        <TableCell className=\"capitalize\">{setup.esicType}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11024},"client/src/pages/employee-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { Calendar, Clock, FileText, User, Settings, Bell, MapPin, Phone, Building2, AlertCircle, Search, DollarSign } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function EmployeeDashboard() {\n  const { user } = useAuth();\n  \n  const { data: employee } = useQuery({\n    queryKey: ['/api/employee/profile'],\n    enabled: !!user?.id,\n  });\n\n  const { data: company } = useQuery({\n    queryKey: [`/api/companies/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: attendance = [] } = useQuery({\n    queryKey: [`/api/attendance/${employee?.id}`],\n    enabled: !!employee?.id,\n  });\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: [`/api/jobs/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: publicJobs = [] } = useQuery({\n    queryKey: ['/api/jobs/public'],\n    enabled: !!user?.id,\n  });\n\n  const { data: permissionRequests = [] } = useQuery({\n    queryKey: ['/api/permission-requests'],\n  });\n\n  const todayAttendance = attendance.find((a: any) => {\n    const today = new Date().toDateString();\n    return new Date(a.date).toDateString() === today;\n  });\n\n  const recentJobs = jobs.filter((job: any) => job.status === 'active').slice(0, 3);\n  const myRequests = permissionRequests.filter((req: any) => req.requestedBy === user?.id);\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    return `${firstName?.charAt(0) || ''}${lastName?.charAt(0) || ''}`.toUpperCase();\n  };\n\n  // Check employee status by Aadhaar verification\n  const { data: employeeStatus, isLoading: statusLoading } = useQuery({\n    queryKey: ['/api/employee/aadhaar-status'],\n    enabled: !!user?.id && user?.role === 'employee',\n    staleTime: 0, // Always refetch to get latest status\n    refetchOnMount: true,\n  });\n\n  // Show loading while checking status\n  if (statusLoading || !employeeStatus) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <p>Loading dashboard...</p>\n      </div>\n    </div>;\n  }\n\n  // Debug logging\n  console.log('EmployeeDashboard - employeeStatus:', employeeStatus);\n  console.log('EmployeeDashboard - aadhaarVerified:', employeeStatus?.aadhaarVerified);\n  console.log('EmployeeDashboard - isEmployeeInCompany:', employeeStatus?.isEmployeeInCompany);\n\n  // If employee is NOT in any company database, show job search interface\n  if (employeeStatus?.aadhaarVerified === true && employeeStatus?.isEmployeeInCompany === false) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">\n              Welcome, {employee?.firstName || user?.username}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Complete your profile and search for job opportunities\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Link href=\"/profile\">\n              <Button>\n                <User className=\"mr-2 h-4 w-4\" />\n                My Profile\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n\n\n        {/* Available Actions */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Job Search */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5 text-blue-600\" />\n                Available Jobs\n              </CardTitle>\n              <CardDescription>\n                Search and apply for available positions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {publicJobs.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {publicJobs.slice(0, 3).map((job: any) => (\n                      <div key={job.id} className=\"p-3 border rounded-lg\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-medium\">{job.title}</h4>\n                            <p className=\"text-sm text-gray-600\">{job.department}</p>\n                          </div>\n                          <Badge variant={job.status === 'active' ? 'default' : 'secondary'}>\n                            {job.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                    {publicJobs.length > 3 && (\n                      <p className=\"text-sm text-gray-500\">\n                        +{publicJobs.length - 3} more jobs available\n                      </p>\n                    )}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-500 text-center py-8\">\n                    No jobs available at the moment\n                  </p>\n                )}\n                <Link href=\"/jobs\">\n                  <Button className=\"w-full\">\n                    <Search className=\"mr-2 h-4 w-4\" />\n                    Browse All Jobs\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Completion */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5 text-green-600\" />\n                Profile Management\n              </CardTitle>\n              <CardDescription>\n                Complete your profile while waiting for company assignment\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center p-2 border rounded\">\n                    <span className=\"text-sm\">Personal Information</span>\n                    <Badge variant=\"outline\">Available</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-2 border rounded\">\n                    <span className=\"text-sm\">Contact Details</span>\n                    <Badge variant=\"outline\">Available</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-2 border rounded\">\n                    <span className=\"text-sm\">Professional Details</span>\n                    <Badge variant=\"outline\">Available</Badge>\n                  </div>\n                </div>\n                <Link href=\"/profile\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Update Profile\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">\n            Welcome back, {employee?.firstName || user?.username}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {employee?.position} at {company?.name}\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Bell className=\"mr-2 h-4 w-4\" />\n            Notifications\n          </Button>\n          <Link href=\"/employee/profile\">\n            <Button>\n              <User className=\"mr-2 h-4 w-4\" />\n              My Profile\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Employee Info Card */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"h-20 w-20\">\n              <AvatarFallback className=\"text-lg\">\n                {getInitials(employee?.firstName, employee?.lastName)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"space-y-1 flex-1\">\n              <h3 className=\"text-xl font-semibold\">\n                {employee?.firstName} {employee?.lastName}\n              </h3>\n              <p className=\"text-muted-foreground\">{employee?.position}</p>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <MapPin className=\"h-3 w-3\" />\n                  {employee?.address || 'No address on file'}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Phone className=\"h-3 w-3\" />\n                  {employee?.phone || 'No phone on file'}\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <Badge variant={employee?.status === 'active' ? 'default' : 'secondary'}>\n                {employee?.status || 'Active'}\n              </Badge>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Employee ID: {employee?.employeeId}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Status</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {todayAttendance ? \n                (todayAttendance.isPresent ? 'Present' : 'Absent') : \n                'Not Checked In'\n              }\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {todayAttendance?.checkIn ? \n                `Checked in at ${new Date(todayAttendance.checkIn).toLocaleTimeString()}` :\n                'Click to check in'\n              }\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">This Month</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {attendance.filter((a: any) => {\n                const month = new Date().getMonth();\n                return new Date(a.date).getMonth() === month && a.isPresent;\n              }).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Days present\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Requests</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {myRequests.filter((r: any) => r.status === 'pending').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Permission requests\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Attendance Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Attendance Tracking\n            </CardTitle>\n            <CardDescription>\n              Manage your daily check-in and attendance\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {!todayAttendance ? (\n              <div className=\"text-center py-6\">\n                <Clock className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium mb-2\">Ready to start your day?</p>\n                <Button className=\"w-full\">\n                  Check In Now\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Check In:</span>\n                  <span className=\"font-medium\">\n                    {todayAttendance.checkIn ? \n                      new Date(todayAttendance.checkIn).toLocaleTimeString() : \n                      'Not checked in'\n                    }\n                  </span>\n                </div>\n                {todayAttendance.checkOut ? (\n                  <div className=\"flex justify-between\">\n                    <span>Check Out:</span>\n                    <span className=\"font-medium\">\n                      {new Date(todayAttendance.checkOut).toLocaleTimeString()}\n                    </span>\n                  </div>\n                ) : (\n                  <Button className=\"w-full\" variant=\"destructive\">\n                    Check Out\n                  </Button>\n                )}\n                {todayAttendance.hoursWorked && (\n                  <div className=\"flex justify-between\">\n                    <span>Hours Worked:</span>\n                    <span className=\"font-medium\">{todayAttendance.hoursWorked}h</span>\n                  </div>\n                )}\n              </div>\n            )}\n            <div className=\"pt-2\">\n              <Link href=\"/employee/attendance\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  View Attendance History\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Open Positions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Available Positions\n            </CardTitle>\n            <CardDescription>\n              Internal job opportunities at {company?.name}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {recentJobs.length > 0 ? (\n              recentJobs.map((job: any) => (\n                <div key={job.id} className=\"border rounded-lg p-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <h4 className=\"font-medium\">{job.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{job.location}</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {job.employmentType} • Posted {new Date(job.postedAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <Badge variant=\"outline\">\n                      Internal\n                    </Badge>\n                  </div>\n                  <div className=\"mt-3\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-6\">\n                No open positions at this time\n              </p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Permission Requests */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Permission Requests\n            </CardTitle>\n            <CardDescription>\n              Your submitted requests and their status\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {myRequests.length > 0 ? (\n              myRequests.slice(0, 3).map((request: any) => (\n                <div key={request.id} className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">\n                      {request.permissionType.replace('_', ' ')}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(request.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <Badge variant={\n                    request.status === 'approved' ? 'default' :\n                    request.status === 'pending' ? 'secondary' : 'destructive'\n                  }>\n                    {request.status}\n                  </Badge>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-4\">\n                No permission requests submitted\n              </p>\n            )}\n            <div className=\"pt-2\">\n              <Button className=\"w-full\" variant=\"outline\">\n                Request New Permission\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>\n              Common tasks and shortcuts\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-2 gap-3\">\n            <Link href=\"/employee/profile\">\n              <Button variant=\"outline\" className=\"w-full h-auto py-4 flex-col gap-2\">\n                <User className=\"h-5 w-5\" />\n                <span>Update Profile</span>\n              </Button>\n            </Link>\n            <Link href=\"/employee/attendance\">\n              <Button variant=\"outline\" className=\"w-full h-auto py-4 flex-col gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span>View Schedule</span>\n              </Button>\n            </Link>\n            <Link href=\"/employee/requests\">\n              <Button variant=\"outline\" className=\"w-full h-auto py-4 flex-col gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                <span>Submit Request</span>\n              </Button>\n            </Link>\n            <Link href=\"/employee/payroll\">\n              <Button variant=\"outline\" className=\"w-full h-auto py-4 flex-col gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                <span>View Payroll</span>\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":19054},"client/src/pages/employee-profile.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Edit, Save, User, MapPin, Phone, Mail, Briefcase, Calendar, Building, \n  Camera, Upload, X, Check, Star, Award, GraduationCap, Clock, DollarSign,\n  FileText, Shield, CreditCard, Users, Home, Settings, Eye, Search\n} from \"lucide-react\";\nimport { useAuth, apiRequestWithAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport React, { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { EmployeeProfile, Job, JobApplication, KycDetails } from \"@shared/schema\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  fatherName: z.string().optional(),\n  presentAddress: z.string().optional(),\n  permanentAddress: z.string().optional(),\n  currentSalary: z.string().optional(),\n  expectedSalary: z.string().optional(),\n  noticePeriod: z.string().optional(),\n  primaryContact: z.string().optional(),\n  alternativeContact: z.string().optional(),\n  totalExperience: z.string().optional(),\n  speciality: z.string().optional(),\n  skills: z.string().optional(),\n  experience: z.string().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\nconst kycSchema = z.object({\n  aadharNo: z.string().optional(),\n  panNo: z.string().optional(),\n  bankAccountNo: z.string().optional(),\n  ifscCode: z.string().optional(),\n  uanNo: z.string().optional(),\n  esicNo: z.string().optional(),\n});\n\ntype ProfileData = z.infer<typeof profileSchema>;\ntype KycData = z.infer<typeof kycSchema>;\n\nexport default function EmployeeProfile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [isEditingKyc, setIsEditingKyc] = useState(false);\n  const [profileImage, setProfileImage] = useState<string | null>(null);\n  const [isUploadingImage, setIsUploadingImage] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const { data: profile, isLoading } = useQuery<EmployeeProfile>({\n    queryKey: ['/api/employee/profile'],\n    enabled: !!user?.id,\n    staleTime: 0, // Always fetch fresh data to get latest profile info\n    refetchOnMount: true,\n  });\n\n  const { data: availableJobs = [] } = useQuery<Job[]>({\n    queryKey: ['/api/jobs/public'],\n  });\n\n  const { data: myApplications = [] } = useQuery<JobApplication[]>({\n    queryKey: ['/api/job-applications/my'],\n    enabled: !!user?.id,\n  });\n\n  const { data: kycDetails } = useQuery<KycDetails>({\n    queryKey: ['/api/employee/kyc'],\n    enabled: !!profile?.id,\n    staleTime: 0, // Always fetch fresh KYC data including Aadhaar info\n    refetchOnMount: true,\n  });\n\n  const form = useForm<ProfileData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: profile?.firstName || '',\n      lastName: profile?.lastName || '',\n      fatherName: profile?.fatherName || '',\n      presentAddress: profile?.presentAddress || '',\n      permanentAddress: profile?.permanentAddress || '',\n      currentSalary: profile?.currentSalary || '',\n      expectedSalary: profile?.expectedSalary || '',\n      noticePeriod: profile?.noticePeriod || '',\n      primaryContact: profile?.primaryContact || '',\n      alternativeContact: profile?.alternativeContact || '',\n      totalExperience: profile?.totalExperience || '',\n      speciality: profile?.speciality || '',\n      skills: profile?.skills || '',\n      experience: profile?.experience || '',\n      phone: profile?.phone || '',\n      address: profile?.address || '',\n    },\n  });\n\n  // Reset form when profile data changes\n  React.useEffect(() => {\n    if (profile) {\n      console.log('Profile data loaded for prefilling:', profile);\n      const formData = {\n        firstName: profile.firstName || '',\n        lastName: profile.lastName || '',\n        fatherName: profile.fatherName || '',\n        presentAddress: profile.presentAddress || '',\n        permanentAddress: profile.permanentAddress || '',\n        currentSalary: profile.currentSalary || '',\n        expectedSalary: profile.expectedSalary || '',\n        noticePeriod: profile.noticePeriod || '',\n        primaryContact: profile.primaryContact || '',\n        alternativeContact: profile.alternativeContact || '',\n        totalExperience: profile.totalExperience || '',\n        speciality: profile.speciality || '',\n        skills: profile.skills || '',\n        experience: profile.experience || '',\n        phone: profile.phone || '',\n        address: profile.address || '',\n      };\n      console.log('Form data being set:', formData);\n      form.reset(formData);\n    }\n  }, [profile, form]);\n\n  const kycForm = useForm<KycData>({\n    resolver: zodResolver(kycSchema),\n    defaultValues: {\n      aadharNo: kycDetails?.aadharNo || '',\n      panNo: kycDetails?.panNo || '',\n      bankAccountNo: kycDetails?.bankAccountNo || '',\n      ifscCode: kycDetails?.ifscCode || '',\n      uanNo: kycDetails?.uanNo || '',\n      esicNo: kycDetails?.esicNo || '',\n    },\n  });\n\n  // Reset KYC form when data changes\n  React.useEffect(() => {\n    if (kycDetails) {\n      console.log('KYC data loaded for prefilling:', kycDetails);\n      const kycFormData = {\n        aadharNo: kycDetails.aadharNo || '',\n        panNo: kycDetails.panNo || '',\n        bankAccountNo: kycDetails.bankAccountNo || '',\n        ifscCode: kycDetails.ifscCode || '',\n        uanNo: kycDetails.uanNo || '',\n        esicNo: kycDetails.esicNo || '',\n      };\n      console.log('KYC form data being set:', kycFormData);\n      kycForm.reset(kycFormData);\n    }\n  }, [kycDetails, kycForm]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileData) => {\n      const response = await apiRequestWithAuth('PUT', '/api/employee/profile', data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({ title: \"Profile updated successfully!\" });\n      setIsEditing(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/employee/profile'] });\n    },\n    onError: (error: any) => {\n      console.error('Profile update error:', error);\n      toast({ \n        title: \"Failed to update profile\", \n        description: error.message || \"Unknown error occurred\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const applyToJobMutation = useMutation({\n    mutationFn: async (jobId: number) => {\n      return await apiRequest('POST', '/api/job-applications', {\n        jobId,\n        applicantName: `${profile?.firstName} ${profile?.lastName}`,\n        applicantEmail: user?.email,\n        applicantPhone: profile?.phone || '',\n        coverLetter: 'Applied through employee portal',\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Application submitted successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/job-applications/my'] });\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to submit application\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const updateKycMutation = useMutation({\n    mutationFn: async (data: KycData) => {\n      return await apiRequest('PUT', '/api/employee/kyc', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"KYC details updated successfully!\" });\n      setIsEditingKyc(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/employee/kyc'] });\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to update KYC details\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const onKycSubmit = (data: KycData) => {\n    updateKycMutation.mutate(data);\n  };\n\n  // Handle profile image upload\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (file.size > 5 * 1024 * 1024) { // 5MB limit\n      toast({\n        title: \"Error\",\n        description: \"Image size should be less than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploadingImage(true);\n    try {\n      // Create a data URL for the image preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setProfileImage(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n      \n      toast({\n        title: \"Success\",\n        description: \"Profile photo updated successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload image\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploadingImage(false);\n    }\n  };\n\n  const removeProfileImage = () => {\n    setProfileImage(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    return `${firstName?.charAt(0) || ''}${lastName?.charAt(0) || ''}`.toUpperCase();\n  };\n\n  const getProfileCompleteness = () => {\n    if (!profile) return 0;\n    const fields = [\n      profile.firstName,\n      profile.lastName,\n      profile.phone,\n      profile.address,\n      profile.skills,\n      profile.experience,\n      kycDetails?.aadharNo,\n      kycDetails?.panNo,\n    ];\n    const filledFields = fields.filter(field => field && field.trim() !== '').length;\n    return Math.round((filledFields / fields.length) * 100);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'approved': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p>Loading your profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const completeness = getProfileCompleteness();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header Section */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-6xl mx-auto px-6 py-8\">\n          <div className=\"flex flex-col lg:flex-row items-center lg:items-start gap-8\">\n            {/* Profile Photo Section */}\n            <div className=\"relative group\">\n              <div className=\"relative\">\n                <Avatar className=\"w-32 h-32 border-4 border-white shadow-lg\">\n                  {profileImage ? (\n                    <AvatarImage src={profileImage} alt=\"Profile\" />\n                  ) : (\n                    <AvatarFallback className=\"text-2xl font-semibold bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                      {getInitials(profile?.firstName, profile?.lastName)}\n                    </AvatarFallback>\n                  )}\n                </Avatar>\n                \n                {/* Upload Button */}\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    className=\"bg-white bg-opacity-90 hover:bg-opacity-100\"\n                    onClick={() => fileInputRef.current?.click()}\n                    disabled={isUploadingImage}\n                  >\n                    {isUploadingImage ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\" />\n                    ) : (\n                      <Camera className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                \n                {/* Remove Image Button */}\n                {profileImage && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    className=\"absolute -top-2 -right-2 rounded-full h-8 w-8 p-0\"\n                    onClick={removeProfileImage}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n              \n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"hidden\"\n              />\n            </div>\n\n            {/* Profile Info */}\n            <div className=\"flex-1 text-center lg:text-left\">\n              <div className=\"mb-4\">\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                  {profile?.firstName} {profile?.lastName}\n                </h1>\n                <p className=\"text-lg text-gray-600 mb-3\">\n                  {profile?.speciality || 'Software Professional'} \n                </p>\n                \n                {/* Contact Info */}\n                <div className=\"flex flex-wrap justify-center lg:justify-start gap-4 text-sm text-gray-500\">\n                  {user?.email && (\n                    <div className=\"flex items-center gap-1\">\n                      <Mail className=\"h-4 w-4\" />\n                      <span>{user.email}</span>\n                    </div>\n                  )}\n                  {profile?.phone && (\n                    <div className=\"flex items-center gap-1\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>{profile.phone}</span>\n                    </div>\n                  )}\n                  {profile?.address && (\n                    <div className=\"flex items-center gap-1\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span>{profile.address}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Profile Completeness */}\n              <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-gray-700\">Profile Completeness</span>\n                  <span className=\"text-sm font-semibold text-gray-900\">{completeness}%</span>\n                </div>\n                <Progress value={completeness} className=\"h-2\" />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {completeness < 100 ? \"Complete your profile to increase visibility to employers\" : \"Your profile is complete!\"}\n                </p>\n              </div>\n\n              {/* Quick Stats */}\n              <div className=\"flex justify-center lg:justify-start gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-blue-600\">{profile?.totalExperience || '0'}</div>\n                  <div className=\"text-xs text-gray-500\">Years Exp.</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-green-600\">{myApplications.length}</div>\n                  <div className=\"text-xs text-gray-500\">Applications</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-purple-600\">{availableJobs.length}</div>\n                  <div className=\"text-xs text-gray-500\">Open Jobs</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col gap-2\">\n              <Button onClick={() => setIsEditing(!isEditing)} className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\">\n                {isEditing ? (\n                  <>\n                    <X className=\"mr-2 h-4 w-4\" />\n                    Cancel Edit\n                  </>\n                ) : (\n                  <>\n                    <Edit className=\"mr-2 h-4 w-4\" />\n                    Edit Profile\n                  </>\n                )}\n              </Button>\n              <Button variant=\"outline\" onClick={() => window.print()}>\n                <FileText className=\"mr-2 h-4 w-4\" />\n                Download Resume\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto px-6 py-8\">\n        <Tabs defaultValue=\"personal\" className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-2 lg:grid-cols-6 w-full\">\n            <TabsTrigger value=\"personal\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Personal</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"professional\" className=\"flex items-center gap-2\">\n              <Briefcase className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Professional</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"documents\" className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Documents</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"jobs\" className=\"flex items-center gap-2\">\n              <Search className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Jobs</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"applications\" className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Applications</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Settings</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Personal Information Tab */}\n          <TabsContent value=\"personal\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-t-lg\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <User className=\"h-5 w-5\" />\n                  Personal Information\n                </CardTitle>\n                <CardDescription className=\"text-blue-100\">\n                  Your basic personal and contact information\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {isEditing ? (\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"firstName\" className=\"text-sm font-medium\">First Name *</Label>\n                        <Input\n                          id=\"firstName\"\n                          {...form.register(\"firstName\")}\n                          className=\"h-12\"\n                          placeholder=\"Enter your first name\"\n                        />\n                        {form.formState.errors.firstName && (\n                          <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n                        )}\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"lastName\" className=\"text-sm font-medium\">Last Name *</Label>\n                        <Input\n                          id=\"lastName\"\n                          {...form.register(\"lastName\")}\n                          className=\"h-12\"\n                          placeholder=\"Enter your last name\"\n                        />\n                        {form.formState.errors.lastName && (\n                          <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"fatherName\" className=\"text-sm font-medium\">Father's Name</Label>\n                        <Input\n                          id=\"fatherName\"\n                          {...form.register(\"fatherName\")}\n                          className=\"h-12\"\n                          placeholder=\"Enter your father's name\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\" className=\"text-sm font-medium\">Phone Number</Label>\n                        <Input\n                          id=\"phone\"\n                          {...form.register(\"phone\")}\n                          className=\"h-12\"\n                          placeholder=\"Enter your phone number\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2 md:col-span-2\">\n                        <Label htmlFor=\"presentAddress\" className=\"text-sm font-medium\">Present Address</Label>\n                        <Textarea\n                          id=\"presentAddress\"\n                          {...form.register(\"presentAddress\")}\n                          className=\"min-h-[100px]\"\n                          placeholder=\"Enter your current address\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2 md:col-span-2\">\n                        <Label htmlFor=\"permanentAddress\" className=\"text-sm font-medium\">Permanent Address</Label>\n                        <Textarea\n                          id=\"permanentAddress\"\n                          {...form.register(\"permanentAddress\")}\n                          className=\"min-h-[100px]\"\n                          placeholder=\"Enter your permanent address\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-3 pt-4\">\n                      <Button \n                        type=\"submit\" \n                        disabled={updateProfileMutation.isPending}\n                        className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700\"\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                        ) : (\n                          <Save className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Save Changes\n                      </Button>\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditing(false)}>\n                        <X className=\"mr-2 h-4 w-4\" />\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                ) : (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">First Name</Label>\n                          <p className=\"text-lg font-medium\">{profile?.firstName || 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Father's Name</Label>\n                          <p className=\"text-lg font-medium\">{profile?.fatherName || 'Not provided'}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Last Name</Label>\n                          <p className=\"text-lg font-medium\">{profile?.lastName || 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Phone Number</Label>\n                          <p className=\"text-lg font-medium\">{profile?.phone || 'Not provided'}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"md:col-span-2 space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Present Address</Label>\n                          <p className=\"text-lg\">{profile?.presentAddress || 'Not provided'}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"md:col-span-2 space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Permanent Address</Label>\n                          <p className=\"text-lg\">{profile?.permanentAddress || 'Not provided'}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Professional Information Tab */}\n          <TabsContent value=\"professional\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-t-lg\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Briefcase className=\"h-5 w-5\" />\n                  Professional Information\n                </CardTitle>\n                <CardDescription className=\"text-purple-100\">\n                  Your career and work-related details\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {isEditing ? (\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"speciality\" className=\"text-sm font-medium\">Specialization</Label>\n                        <Input\n                          id=\"speciality\"\n                          {...form.register(\"speciality\")}\n                          className=\"h-12\"\n                          placeholder=\"e.g., Software Engineer, Data Analyst\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"totalExperience\" className=\"text-sm font-medium\">Total Experience (Years)</Label>\n                        <Input\n                          id=\"totalExperience\"\n                          {...form.register(\"totalExperience\")}\n                          className=\"h-12\"\n                          placeholder=\"e.g., 2.5\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"currentSalary\" className=\"text-sm font-medium\">Current Salary (LPA)</Label>\n                        <Input\n                          id=\"currentSalary\"\n                          {...form.register(\"currentSalary\")}\n                          className=\"h-12\"\n                          placeholder=\"e.g., 8.5\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"expectedSalary\" className=\"text-sm font-medium\">Expected Salary (LPA)</Label>\n                        <Input\n                          id=\"expectedSalary\"\n                          {...form.register(\"expectedSalary\")}\n                          className=\"h-12\"\n                          placeholder=\"e.g., 12.0\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"noticePeriod\" className=\"text-sm font-medium\">Notice Period</Label>\n                        <Input\n                          id=\"noticePeriod\"\n                          {...form.register(\"noticePeriod\")}\n                          className=\"h-12\"\n                          placeholder=\"e.g., 30 days, Immediate\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"primaryContact\" className=\"text-sm font-medium\">Primary Contact</Label>\n                        <Input\n                          id=\"primaryContact\"\n                          {...form.register(\"primaryContact\")}\n                          className=\"h-12\"\n                          placeholder=\"Alternative contact number\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2 md:col-span-2\">\n                        <Label htmlFor=\"skills\" className=\"text-sm font-medium\">Skills</Label>\n                        <Textarea\n                          id=\"skills\"\n                          {...form.register(\"skills\")}\n                          className=\"min-h-[100px]\"\n                          placeholder=\"e.g., React, Node.js, Python, SQL, AWS\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2 md:col-span-2\">\n                        <Label htmlFor=\"experience\" className=\"text-sm font-medium\">Work Experience</Label>\n                        <Textarea\n                          id=\"experience\"\n                          {...form.register(\"experience\")}\n                          className=\"min-h-[120px]\"\n                          placeholder=\"Describe your work experience, projects, and achievements\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-3 pt-4\">\n                      <Button \n                        type=\"submit\" \n                        disabled={updateProfileMutation.isPending}\n                        className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700\"\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                        ) : (\n                          <Save className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Save Changes\n                      </Button>\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditing(false)}>\n                        <X className=\"mr-2 h-4 w-4\" />\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                ) : (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Specialization</Label>\n                          <p className=\"text-lg font-medium\">{profile?.speciality || 'Not specified'}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Current Salary</Label>\n                          <p className=\"text-lg font-medium\">{profile?.currentSalary ? `₹${profile.currentSalary} LPA` : 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Notice Period</Label>\n                          <p className=\"text-lg font-medium\">{profile?.noticePeriod || 'Not specified'}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Total Experience</Label>\n                          <p className=\"text-lg font-medium\">{profile?.totalExperience ? `${profile.totalExperience} years` : 'Not specified'}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Expected Salary</Label>\n                          <p className=\"text-lg font-medium\">{profile?.expectedSalary ? `₹${profile.expectedSalary} LPA` : 'Not provided'}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Primary Contact</Label>\n                          <p className=\"text-lg font-medium\">{profile?.primaryContact || 'Not provided'}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"md:col-span-2 space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Skills</Label>\n                          <p className=\"text-lg\">{profile?.skills || 'No skills listed'}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"md:col-span-2 space-y-3\">\n                        <div>\n                          <Label className=\"text-sm text-gray-500\">Work Experience</Label>\n                          <div className=\"prose max-w-none\">\n                            <p className=\"text-lg\">{profile?.experience || 'No experience details provided'}</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Documents Tab */}\n          <TabsContent value=\"documents\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-t-lg\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Documents & KYC\n                </CardTitle>\n                <CardDescription className=\"text-green-100\">\n                  Your identification and compliance documents\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {isEditingKyc ? (\n                  <form onSubmit={kycForm.handleSubmit(onKycSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"aadharNo\" className=\"text-sm font-medium\">Aadhaar Number</Label>\n                        <Input\n                          id=\"aadharNo\"\n                          {...kycForm.register(\"aadharNo\")}\n                          className=\"h-12\"\n                          placeholder=\"1234 5678 9012\"\n                          maxLength={12}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"panNo\" className=\"text-sm font-medium\">PAN Number</Label>\n                        <Input\n                          id=\"panNo\"\n                          {...kycForm.register(\"panNo\")}\n                          className=\"h-12\"\n                          placeholder=\"ABCDE1234F\"\n                          maxLength={10}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"bankAccountNo\" className=\"text-sm font-medium\">Bank Account Number</Label>\n                        <Input\n                          id=\"bankAccountNo\"\n                          {...kycForm.register(\"bankAccountNo\")}\n                          className=\"h-12\"\n                          placeholder=\"12345678901234\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"ifscCode\" className=\"text-sm font-medium\">IFSC Code</Label>\n                        <Input\n                          id=\"ifscCode\"\n                          {...kycForm.register(\"ifscCode\")}\n                          className=\"h-12\"\n                          placeholder=\"SBIN0001234\"\n                          maxLength={11}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"uanNo\" className=\"text-sm font-medium\">UAN Number</Label>\n                        <Input\n                          id=\"uanNo\"\n                          {...kycForm.register(\"uanNo\")}\n                          className=\"h-12\"\n                          placeholder=\"123456789012\"\n                          maxLength={12}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"esicNo\" className=\"text-sm font-medium\">ESIC Number</Label>\n                        <Input\n                          id=\"esicNo\"\n                          {...kycForm.register(\"esicNo\")}\n                          className=\"h-12\"\n                          placeholder=\"1234567890\"\n                          maxLength={10}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-3 pt-4\">\n                      <Button \n                        type=\"submit\" \n                        disabled={updateKycMutation.isPending}\n                        className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700\"\n                      >\n                        {updateKycMutation.isPending ? (\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                        ) : (\n                          <Save className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Save Documents\n                      </Button>\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditingKyc(false)}>\n                        <X className=\"mr-2 h-4 w-4\" />\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                ) : (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-3\">\n                        <div className=\"bg-blue-50 p-4 rounded-lg\">\n                          <Label className=\"text-sm text-blue-600 font-medium\">Identity Documents</Label>\n                          <div className=\"mt-2 space-y-2\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">Aadhaar Number</span>\n                              <span className=\"font-medium\">{kycDetails?.aadharNo ? `****-****-${kycDetails.aadharNo.slice(-4)}` : 'Not provided'}</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">PAN Number</span>\n                              <span className=\"font-medium\">{kycDetails?.panNo || 'Not provided'}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"bg-green-50 p-4 rounded-lg\">\n                          <Label className=\"text-sm text-green-600 font-medium\">Banking Details</Label>\n                          <div className=\"mt-2 space-y-2\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">Account Number</span>\n                              <span className=\"font-medium\">{kycDetails?.bankAccountNo ? `****${kycDetails.bankAccountNo.slice(-4)}` : 'Not provided'}</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">IFSC Code</span>\n                              <span className=\"font-medium\">{kycDetails?.ifscCode || 'Not provided'}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"md:col-span-2\">\n                        <div className=\"bg-purple-50 p-4 rounded-lg\">\n                          <Label className=\"text-sm text-purple-600 font-medium\">Employment Documents</Label>\n                          <div className=\"mt-2 grid grid-cols-2 gap-4\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">UAN Number</span>\n                              <span className=\"font-medium\">{kycDetails?.uanNo || 'Not provided'}</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">ESIC Number</span>\n                              <span className=\"font-medium\">{kycDetails?.esicNo || 'Not provided'}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-center\">\n                      <Button onClick={() => setIsEditingKyc(true)} variant=\"outline\">\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                        Edit Documents\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Jobs Tab */}\n          <TabsContent value=\"jobs\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-orange-500 to-red-600 text-white rounded-t-lg\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Search className=\"h-5 w-5\" />\n                  Available Jobs\n                </CardTitle>\n                <CardDescription className=\"text-orange-100\">\n                  Browse and apply for open positions\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {availableJobs.length > 0 ? (\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    {availableJobs.map((job: any) => (\n                      <Card key={job.id} className=\"border border-gray-200 hover:shadow-md transition-shadow\">\n                        <CardHeader className=\"pb-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <CardTitle className=\"text-lg\">{job.title}</CardTitle>\n                              <CardDescription className=\"text-sm text-gray-600\">\n                                {job.department} • {job.location}\n                              </CardDescription>\n                            </div>\n                            <Badge variant={job.status === 'active' ? 'default' : 'secondary'}>\n                              {job.status}\n                            </Badge>\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <div className=\"space-y-3\">\n                            <p className=\"text-sm text-gray-700 line-clamp-3\">{job.description}</p>\n                            \n                            <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"h-3 w-3\" />\n                                <span>Posted {new Date(job.createdAt).toLocaleDateString()}</span>\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Users className=\"h-3 w-3\" />\n                                <span>{job.requirements || 'No specific requirements'}</span>\n                              </div>\n                            </div>\n\n                            {job.salaryRange && (\n                              <div className=\"flex items-center gap-1 text-sm font-medium text-green-600\">\n                                <DollarSign className=\"h-4 w-4\" />\n                                <span>{job.salaryRange}</span>\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"mt-4 pt-4 border-t\">\n                            <Button \n                              onClick={() => applyToJobMutation.mutate(job.id)}\n                              disabled={applyToJobMutation.isPending}\n                              className=\"w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700\"\n                            >\n                              {applyToJobMutation.isPending ? (\n                                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                              ) : (\n                                <Upload className=\"mr-2 h-4 w-4\" />\n                              )}\n                              Apply Now\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Search className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No jobs available</h3>\n                    <p className=\"text-gray-500\">Check back later for new opportunities.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Applications Tab */}\n          <TabsContent value=\"applications\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-teal-500 to-cyan-600 text-white rounded-t-lg\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  My Applications\n                </CardTitle>\n                <CardDescription className=\"text-teal-100\">\n                  Track your job application status\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                {myApplications.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {myApplications.map((application: any) => (\n                      <Card key={application.id} className=\"border border-gray-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-lg\">{application.jobTitle}</h4>\n                              <p className=\"text-sm text-gray-600 mb-2\">{application.companyName}</p>\n                              <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                                <div className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  <span>Applied {new Date(application.appliedAt).toLocaleDateString()}</span>\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <User className=\"h-3 w-3\" />\n                                  <span>Application ID: #{application.id}</span>\n                                </div>\n                              </div>\n                            </div>\n                            <Badge \n                              variant={application.status === 'approved' ? 'default' : 'secondary'}\n                              className={getStatusColor(application.status)}\n                            >\n                              {application.status}\n                            </Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No applications yet</h3>\n                    <p className=\"text-gray-500 mb-4\">You haven't applied to any jobs yet.</p>\n                    <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\n                      <Search className=\"mr-2 h-4 w-4\" />\n                      Browse Jobs\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-gray-700 to-gray-800 text-white rounded-t-lg\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Account Settings\n                </CardTitle>\n                <CardDescription className=\"text-gray-200\">\n                  Manage your account preferences and privacy\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">Profile Visibility</h4>\n                    <p className=\"text-sm text-blue-700 mb-3\">\n                      Control who can see your profile information\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">Make profile public</span>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        Configure\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-green-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-green-900 mb-2\">Download Data</h4>\n                    <p className=\"text-sm text-green-700 mb-3\">\n                      Download your profile data and application history\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <FileText className=\"mr-2 h-4 w-4\" />\n                      Download Profile\n                    </Button>\n                  </div>\n\n                  <div className=\"bg-red-50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-red-900 mb-2\">Account Actions</h4>\n                    <p className=\"text-sm text-red-700 mb-3\">\n                      Manage your account status and data\n                    </p>\n                    <div className=\"space-y-2\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 border-red-200 hover:bg-red-50\">\n                        <Shield className=\"mr-2 h-4 w-4\" />\n                        Change Password\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":53048},"client/src/pages/employees.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { authService, apiRequestWithAuth, usePermission } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AadharVerificationModal from \"@/components/aadhar-verification-modal\";\n\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, Edit, MoreVertical, Trash2, Mail, Phone, Plus, Download, ShieldAlert } from \"lucide-react\";\nimport { type Employee } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\n\nexport default function EmployeesPage() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showAadharModal, setShowAadharModal] = useState(false);\n  \n  const user = authService.getUser();\n  const companyId = user?.companyId;\n  \n  // Check for employee list permission\n  const { hasPermission: canViewEmployeeList, loading: permissionLoading } = usePermission('employee_list');\n\n  // Fetch employees\n  const { data: employees = [], isLoading } = useQuery<Employee[]>({\n    queryKey: [`/api/employees/${companyId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/employees/${companyId}`);\n      return response.json();\n    },\n    enabled: !!companyId,\n  });\n\n  // Delete employee mutation\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: number) => {\n      await apiRequestWithAuth('DELETE', `/api/employees/${employeeId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/employees/${companyId}`] });\n      toast({\n        title: \"Success\",\n        description: \"Employee deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddEmployee = () => {\n    setShowAadharModal(true);\n  };\n\n  const handleViewEmployee = (employee: Employee) => {\n    setLocation(`/admin/employees/${employee.id}/view`);\n  };\n\n  const handleEditEmployee = (employee: Employee) => {\n    setLocation(`/admin/employees/${employee.id}/edit`);\n  };\n\n  const handleDeleteEmployee = (employee: Employee) => {\n    if (confirm(`Are you sure you want to delete ${employee.firstName} ${employee.lastName}?`)) {\n      deleteEmployeeMutation.mutate(employee.id);\n    }\n  };\n\n  const handleExportToExcel = () => {\n    const token = localStorage.getItem('token');\n    const url = `/api/employees/export/${companyId}`;\n    \n    // Create a temporary link with auth header\n    fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    })\n    .then(response => response.blob())\n    .then(blob => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `employees_${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    })\n    .catch(error => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export employee data\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  // Filter employees based on search query\n  const filteredEmployees = employees.filter(employee =>\n    `${employee.firstName} ${employee.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    employee.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    employee.position?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-hr-secondary/10 text-hr-secondary';\n      case 'probation':\n        return 'bg-yellow-100 text-yellow-700';\n      case 'inactive':\n        return 'bg-gray-100 text-gray-700';\n      case 'terminated':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const formatDate = (date: string | Date | null) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString();\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName[0]}${lastName[0]}`.toUpperCase();\n  };\n\n  // Permission guard - show access denied if user doesn't have permission\n  if (permissionLoading) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto\"></div>\n            <p className=\"mt-2 text-gray-600\">Checking permissions...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!canViewEmployeeList && user?.role === 'employee') {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <ShieldAlert className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n            <p className=\"text-gray-600 mb-4\">You don't have permission to access the employee list.</p>\n            <p className=\"text-sm text-gray-500\">Please request the \"employee_list\" permission from your administrator.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Employees</h1>\n          <p className=\"text-muted-foreground\">{filteredEmployees.length} employees total</p>\n        </div>\n        {user?.role !== 'employee' && (\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={handleExportToExcel} \n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Export to Excel\n            </Button>\n            <Button onClick={handleAddEmployee} className=\"bg-hr-primary hover:bg-hr-primary/90\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Employee\n            </Button>\n          </div>\n        )}\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex-1\">\n          <input\n            type=\"text\"\n            placeholder=\"Search employees...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-hr-primary focus:border-transparent\"\n          />\n        </div>\n      </div>\n      \n      <Card className=\"shadow-sm border border-gray-100\">\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-8 text-center\">\n                  <p className=\"text-hr-neutral\">Loading employees...</p>\n                </div>\n              ) : filteredEmployees.length === 0 ? (\n                <div className=\"p-8 text-center\">\n                  <p className=\"text-hr-neutral\">\n                    {searchQuery ? 'No employees match your search.' : 'No employees found.'}\n                  </p>\n                  {!searchQuery && user?.role !== 'employee' && (\n                    <Button \n                      onClick={handleAddEmployee}\n                      className=\"mt-4 bg-hr-primary hover:bg-hr-primary/90\"\n                    >\n                      Add First Employee\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Employee</TableHead>\n                      <TableHead>Position</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Hire Date</TableHead>\n                      <TableHead>Contact</TableHead>\n                      <TableHead className=\"text-center\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredEmployees.map((employee) => (\n                      <TableRow key={employee.id} className=\"hover:bg-gray-50\">\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-hr-primary text-white rounded-full flex items-center justify-center text-sm font-medium\">\n                              {getInitials(employee.firstName, employee.lastName)}\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-hr-text-primary\">\n                                {employee.firstName} {employee.lastName}\n                              </p>\n                              <p className=\"text-sm text-hr-neutral\">{employee.employeeId}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <p className=\"text-hr-text-primary\">{employee.position || 'N/A'}</p>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={`${getStatusColor(employee.status)} capitalize`}>\n                            {employee.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <p className=\"text-hr-text-primary\">{formatDate(employee.hireDate)}</p>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Mail size={16} className=\"text-hr-neutral\" />\n                            <span className=\"text-sm text-hr-text-primary\">{employee.email}</span>\n                          </div>\n                          {employee.phone && (\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <Phone size={16} className=\"text-hr-neutral\" />\n                              <span className=\"text-sm text-hr-text-primary\">{employee.phone}</span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <MoreVertical size={16} />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem onClick={() => handleViewEmployee(employee)}>\n                                <Eye size={16} className=\"mr-2\" />\n                                View Details\n                              </DropdownMenuItem>\n                              {user?.role !== 'employee' && (\n                                <>\n                                  <DropdownMenuItem onClick={() => handleEditEmployee(employee)}>\n                                    <Edit size={16} className=\"mr-2\" />\n                                    Edit\n                                  </DropdownMenuItem>\n                                  <DropdownMenuItem \n                                    onClick={() => handleDeleteEmployee(employee)}\n                                    className=\"text-hr-accent\"\n                                  >\n                                    <Trash2 size={16} className=\"mr-2\" />\n                                    Delete\n                                  </DropdownMenuItem>\n                                </>\n                              )}\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n        </CardContent>\n      </Card>\n\n      {/* Aadhar Verification Modal */}\n      <AadharVerificationModal\n        isOpen={showAadharModal}\n        onClose={() => setShowAadharModal(false)}\n      />\n\n    </div>\n  );\n}\n","size_bytes":13028},"client/src/pages/jobs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { authService, apiRequestWithAuth } from \"@/lib/auth\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nimport JobForm from \"@/components/forms/job-form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MapPin, Clock, DollarSign, Eye, Edit, MoreVertical, Trash2, Users } from \"lucide-react\";\nimport { type Job } from \"@shared/schema\";\n\nexport default function JobsPage() {\n  const { toast } = useToast();\n  const [showForm, setShowForm] = useState(false);\n  const [selectedJob, setSelectedJob] = useState<Job | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const user = authService.getUser();\n  const companyId = user?.companyId;\n\n  // Fetch jobs\n  const { data: jobs = [], isLoading } = useQuery<Job[]>({\n    queryKey: [`/api/jobs/${companyId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/jobs/${companyId}`);\n      return response.json();\n    },\n    enabled: !!companyId,\n  });\n\n  // Delete job mutation\n  const deleteJobMutation = useMutation({\n    mutationFn: async (jobId: number) => {\n      await apiRequestWithAuth('DELETE', `/api/jobs/${jobId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/jobs/${companyId}`] });\n      toast({\n        title: \"Success\",\n        description: \"Job deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddJob = () => {\n    setSelectedJob(null);\n    setShowForm(true);\n  };\n\n  const handleEditJob = (job: Job) => {\n    setSelectedJob(job);\n    setShowForm(true);\n  };\n\n  const handleDeleteJob = (job: Job) => {\n    if (confirm(`Are you sure you want to delete \"${job.title}\"?`)) {\n      deleteJobMutation.mutate(job.id);\n    }\n  };\n\n  // Filter jobs based on search query\n  const filteredJobs = jobs.filter(job =>\n    job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    job.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    job.location?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-hr-secondary/10 text-hr-secondary';\n      case 'draft':\n        return 'bg-yellow-100 text-yellow-700';\n      case 'closed':\n        return 'bg-gray-100 text-gray-700';\n      case 'cancelled':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const formatDate = (date: string | Date | null) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString();\n  };\n\n  const formatSalary = (min: string | null, max: string | null) => {\n    if (!min && !max) return 'Not specified';\n    if (min && max) return `$${min} - $${max}`;\n    if (min) return `From $${min}`;\n    if (max) return `Up to $${max}`;\n    return 'Not specified';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Job Openings</h1>\n          <p className=\"text-muted-foreground\">{filteredJobs.length} jobs total</p>\n        </div>\n        {user?.role !== 'employee' && (\n          <Button onClick={handleAddJob} className=\"bg-hr-primary hover:bg-hr-primary/90\">\n            Post New Job\n          </Button>\n        )}\n      </div>\n\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex-1\">\n          <input\n            type=\"text\"\n            placeholder=\"Search jobs...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-hr-primary focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {isLoading ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-hr-neutral\">Loading jobs...</p>\n            </div>\n          ) : filteredJobs.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <p className=\"text-hr-neutral mb-4\">\n                  {searchQuery ? 'No jobs match your search.' : 'No job openings found.'}\n                </p>\n                {!searchQuery && user?.role !== 'employee' && (\n                  <Button \n                    onClick={handleAddJob}\n                    className=\"bg-hr-primary hover:bg-hr-primary/90\"\n                  >\n                    Post First Job\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredJobs.map((job) => (\n                <Card key={job.id} className=\"shadow-sm border border-gray-100 hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg font-semibold text-hr-text-primary mb-2\">\n                          {job.title}\n                        </CardTitle>\n                        <Badge className={`${getStatusColor(job.status)} capitalize mb-2`}>\n                          {job.status}\n                        </Badge>\n                      </div>\n                      {user?.role !== 'employee' && (\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreVertical size={16} />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => console.log('View applications', job.id)}>\n                              <Users size={16} className=\"mr-2\" />\n                              View Applications\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => handleEditJob(job)}>\n                              <Edit size={16} className=\"mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDeleteJob(job)}\n                              className=\"text-hr-accent\"\n                            >\n                              <Trash2 size={16} className=\"mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <p className=\"text-hr-neutral text-sm line-clamp-3\">\n                        {job.description}\n                      </p>\n                      \n                      <div className=\"flex items-center space-x-2 text-sm text-hr-neutral\">\n                        <MapPin size={16} />\n                        <span>{job.location || 'Not specified'}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 text-sm text-hr-neutral\">\n                        <DollarSign size={16} />\n                        <span>{formatSalary(job.salaryMin, job.salaryMax)}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 text-sm text-hr-neutral\">\n                        <Clock size={16} />\n                        <span>{job.employmentType || 'Full-time'}</span>\n                      </div>\n                      \n                      {job.postedAt && (\n                        <div className=\"pt-2 border-t border-gray-100\">\n                          <p className=\"text-xs text-hr-neutral\">\n                            Posted: {formatDate(job.postedAt)}\n                          </p>\n                        </div>\n                      )}\n                      \n                      {job.closingDate && (\n                        <p className=\"text-xs text-hr-neutral\">\n                          Closes: {formatDate(job.closingDate)}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full\"\n                        onClick={() => console.log('View job details', job.id)}\n                      >\n                        <Eye size={16} className=\"mr-2\" />\n                        View Details\n                      </Button>\n                    </div>\n                </CardContent>\n              </Card>\n            ))}\n        </div>\n      )}\n\n      {/* Job Form Dialog */}\n      <Dialog open={showForm} onOpenChange={setShowForm}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {selectedJob ? 'Edit Job' : 'Post New Job'}\n            </DialogTitle>\n          </DialogHeader>\n          <JobForm\n            job={selectedJob}\n            onSuccess={() => {\n              setShowForm(false);\n              queryClient.invalidateQueries({ queryKey: [`/api/jobs/${companyId}`] });\n            }}\n            onCancel={() => setShowForm(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":10357},"client/src/pages/leave-application.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Calendar, Clock, User, CheckCircle, XCircle, Eye, ShieldAlert } from \"lucide-react\";\nimport { usePermission } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { LeaveRequest, InsertLeaveRequest } from \"@shared/schema\";\n\nconst leaveApplicationSchema = z.object({\n  leaveType: z.enum(['casual', 'sick', 'earned', 'maternity', 'paternity', 'comp_off', 'lwp']),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  reason: z.string().min(10, \"Reason must be at least 10 characters\"),\n});\n\ntype LeaveApplicationForm = z.infer<typeof leaveApplicationSchema>;\n\nconst LeaveTypeLabels = {\n  casual: \"Casual Leave\",\n  sick: \"Sick Leave\",\n  earned: \"Earned Leave\",\n  maternity: \"Maternity Leave\",\n  paternity: \"Paternity Leave\",\n  comp_off: \"Compensatory Off\",\n  lwp: \"Leave Without Pay\"\n};\n\nconst StatusBadges = {\n  pending: { color: \"bg-yellow-100 text-yellow-800\", label: \"Pending\" },\n  approved: { color: \"bg-green-100 text-green-800\", label: \"Approved\" },\n  rejected: { color: \"bg-red-100 text-red-800\", label: \"Rejected\" },\n  cancelled: { color: \"bg-gray-100 text-gray-800\", label: \"Cancelled\" }\n};\n\nexport default function LeaveApplication() {\n  const { toast } = useToast();\n  const [applicationDialogOpen, setApplicationDialogOpen] = useState(false);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [selectedLeave, setSelectedLeave] = useState<LeaveRequest | null>(null);\n  \n  // Check for leave permission\n  const { hasPermission: canManageLeave, loading: permissionLoading } = usePermission('leave_request_submit');\n\n  const form = useForm<LeaveApplicationForm>({\n    resolver: zodResolver(leaveApplicationSchema),\n    defaultValues: {\n      leaveType: 'casual',\n      startDate: '',\n      endDate: '',\n      reason: '',\n    },\n  });\n\n  // Get current user\n  const { data: user } = useQuery<{ id: number; companyId: number; role: string }>({\n    queryKey: ['/api/auth/me'],\n  });\n\n  const companyId = user?.companyId;\n\n  // Fetch leave requests\n  const { data: leaveRequests = [], isLoading } = useQuery<LeaveRequest[]>({\n    queryKey: ['leave-requests', companyId],\n    queryFn: async () => {\n      if (!companyId) throw new Error('No company ID');\n      \n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/leave-requests/${companyId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    enabled: !!companyId,\n  });\n\n  // Submit leave application\n  const submitMutation = useMutation({\n    mutationFn: async (data: LeaveApplicationForm) => {\n      const startDate = new Date(data.startDate);\n      const endDate = new Date(data.endDate);\n      const timeDiff = endDate.getTime() - startDate.getTime();\n      const totalDays = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;\n\n      const leaveData: InsertLeaveRequest = {\n        ...data,\n        companyId: companyId!,\n        employeeId: user!.id,\n        totalDays: totalDays.toString(),\n      };\n\n      const response = await apiRequest('POST', '/api/leave-requests', leaveData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Leave application submitted successfully\",\n      });\n      setApplicationDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['leave-requests', companyId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit leave application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: LeaveApplicationForm) => {\n    // Validate dates\n    const startDate = new Date(data.startDate);\n    const endDate = new Date(data.endDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    if (startDate < today) {\n      form.setError(\"startDate\", { message: \"Start date cannot be in the past\" });\n      return;\n    }\n\n    if (endDate < startDate) {\n      form.setError(\"endDate\", { message: \"End date cannot be before start date\" });\n      return;\n    }\n\n    submitMutation.mutate(data);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getApprovalStatus = (leave: LeaveRequest) => {\n    if (leave.status === 'rejected') return 'Rejected';\n    if (leave.status === 'approved') return 'Fully Approved';\n    \n    // Check approval levels\n    if (leave.finalApprovedAt) return 'Final Approved';\n    if (leave.level2ApprovedAt) return 'Level 2 Approved';\n    if (leave.level1ApprovedAt) return 'Level 1 Approved';\n    \n    return 'Pending Approval';\n  };\n\n  // Permission guard - show access denied if user doesn't have permission\n  if (permissionLoading) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto\"></div>\n            <p className=\"mt-2 text-gray-600\">Checking permissions...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!canManageLeave && user?.role === 'employee') {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <ShieldAlert className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n            <p className=\"text-gray-600 mb-4\">You don't have permission to access leave management.</p>\n            <p className=\"text-sm text-gray-500\">Please request the \"leave_request_submit\" permission from your administrator.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Loading leave applications...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Leave Applications</h1>\n          <p className=\"text-gray-600\">Apply for leave and track approval status</p>\n        </div>\n        <Dialog open={applicationDialogOpen} onOpenChange={setApplicationDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Apply for Leave\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Apply for Leave</DialogTitle>\n              <DialogDescription>\n                Submit your leave application for approval\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"leaveType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Leave Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select leave type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Object.entries(LeaveTypeLabels).map(([value, label]) => (\n                            <SelectItem key={value} value={value}>{label}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"startDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"endDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"reason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reason</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Please provide reason for leave...\" \n                          className=\"min-h-[80px]\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setApplicationDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={submitMutation.isPending}>\n                    {submitMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Leave Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Applications</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{leaveRequests.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">\n              {leaveRequests.filter(req => req.status === 'pending').length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {leaveRequests.filter(req => req.status === 'approved').length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {leaveRequests.filter(req => req.status === 'rejected').length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Leave Applications List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>My Leave Applications</CardTitle>\n          <CardDescription>Track your leave application status and approval progress</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {leaveRequests.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500 mb-2\">No leave applications found</p>\n              <p className=\"text-sm text-gray-400\">Apply for your first leave to get started</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {leaveRequests.map((leave) => (\n                <div key={leave.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">\n                            {LeaveTypeLabels[leave.leaveType as keyof typeof LeaveTypeLabels]}\n                          </h3>\n                          <p className=\"text-sm text-gray-600\">\n                            {formatDate(leave.startDate)} to {formatDate(leave.endDate)} • {leave.totalDays} day(s)\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-700 mt-2 line-clamp-2\">{leave.reason}</p>\n                      <div className=\"mt-2 flex items-center space-x-4\">\n                        <Badge className={StatusBadges[leave.status as keyof typeof StatusBadges].color}>\n                          {StatusBadges[leave.status as keyof typeof StatusBadges].label}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">\n                          Applied: {formatDate(leave.appliedAt.toString())}\n                        </span>\n                        <span className=\"text-sm text-gray-600\">\n                          Status: {getApprovalStatus(leave)}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedLeave(leave);\n                          setViewDialogOpen(true);\n                        }}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        View Details\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* View Leave Details Dialog */}\n      <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Leave Application Details</DialogTitle>\n          </DialogHeader>\n          {selectedLeave && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Leave Type</label>\n                  <p>{LeaveTypeLabels[selectedLeave.leaveType as keyof typeof LeaveTypeLabels]}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Duration</label>\n                  <p>{selectedLeave.totalDays} day(s)</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Start Date</label>\n                  <p>{formatDate(selectedLeave.startDate)}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">End Date</label>\n                  <p>{formatDate(selectedLeave.endDate)}</p>\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Reason</label>\n                <p className=\"mt-1 p-3 bg-gray-50 rounded-md\">{selectedLeave.reason}</p>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Approval Status</label>\n                <div className=\"mt-2 space-y-2\">\n                  <div className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span>Level 1 Approval</span>\n                    <Badge className={selectedLeave.level1ApprovedAt ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                      {selectedLeave.level1ApprovedAt ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span>Level 2 Approval</span>\n                    <Badge className={selectedLeave.level2ApprovedAt ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                      {selectedLeave.level2ApprovedAt ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span>Final Approval</span>\n                    <Badge className={selectedLeave.finalApprovedAt ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                      {selectedLeave.finalApprovedAt ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {selectedLeave.rejectionReason && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Rejection Reason</label>\n                  <p className=\"mt-1 p-3 bg-red-50 border border-red-200 rounded-md text-red-800\">\n                    {selectedLeave.rejectionReason}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20124},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { toast } from '@/hooks/use-toast';\nimport { useMutation } from '@tanstack/react-query';\nimport { authService } from '@/lib/auth';\nimport { User, Mail, Lock, Building2, Users } from 'lucide-react';\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      return await authService.login(credentials);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.user.email}!`,\n      });\n      \n      // Redirect based on user role\n      if (data.user.role === 'system_admin') {\n        setLocation('/admin/companies');\n      } else if (data.user.role === 'admin') {\n        setLocation('/admin-dashboard');\n      } else {\n        setLocation('/employee-dashboard');\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !password) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ email, password });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"bg-white p-4 rounded-full shadow-lg\">\n              <Building2 className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">HR Management System</h1>\n          <p className=\"text-gray-600 text-lg\">Employee Lifecycle Management Platform</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Login Form */}\n          <Card className=\"shadow-xl\">\n            <CardHeader className=\"space-y-1\">\n              <CardTitle className=\"text-2xl font-bold text-center flex items-center justify-center gap-2\">\n                <User className=\"h-6 w-6\" />\n                Sign In\n              </CardTitle>\n              <CardDescription className=\"text-center\">\n                Enter your credentials to access your account\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                    Email Address\n                  </Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"Enter your email\"\n                      className=\"pl-10 h-12\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    Password\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      placeholder=\"Enter your password\"\n                      className=\"pl-10 h-12\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full h-12 text-lg\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? 'Signing In...' : 'Sign In'}\n                </Button>\n              </form>\n\n              <div className=\"pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setLocation('/signup')}\n                  className=\"w-full h-12\"\n                >\n                  Don't have an account? Sign up\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Demo Credentials & Information */}\n          <div className=\"space-y-6\">\n            {/* Demo Credentials */}\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Demo Credentials\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-green-800\">System Admin</h4>\n                  <p className=\"text-sm text-green-700\">\n                    <strong>Email:</strong> system@techcorp.com<br />\n                    <strong>Password:</strong> sysadmin123\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-green-800\">Company Admin</h4>\n                  <p className=\"text-sm text-green-700\">\n                    <strong>Email:</strong> admin@demo.com<br />\n                    <strong>Password:</strong> admin123\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-green-800\">Employee</h4>\n                  <p className=\"text-sm text-green-700\">\n                    <strong>Email:</strong> employee@demo.com<br />\n                    <strong>Password:</strong> emp123\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* System Information */}\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-800\">System Features</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"font-medium text-blue-800 mb-2\">Employee Management</h4>\n                    <ul className=\"text-sm text-blue-700 space-y-1\">\n                      <li>• Complete employee lifecycle management</li>\n                      <li>• Advanced role-based access control</li>\n                      <li>• Comprehensive attendance tracking</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium text-blue-800 mb-2\">HR Operations</h4>\n                    <ul className=\"text-sm text-blue-700 space-y-1\">\n                      <li>• Recruitment and job management</li>\n                      <li>• Payroll and compliance tracking</li>\n                      <li>• Leave and advance request workflows</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8264},"client/src/pages/manage-employee.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, MoreHorizontal, Edit, Trash2, Users, ArrowLeft } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\n// Form schema for employee assignment\nconst assignEmployeeSchema = z.object({\n  employeeId: z.number().min(1, \"Please select an employee\"),\n  designationId: z.number().min(1, \"Please select a designation\"),\n  assignDate: z.string().min(1, \"Assign date is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  useActualAddress: z.boolean().default(false),\n});\n\ntype AssignEmployeeFormData = z.infer<typeof assignEmployeeSchema>;\n\ninterface EmployeeAssignment {\n  id: number;\n  employeeId: number;\n  designationId: number;\n  assignDate: string;\n  deassignDate?: string;\n  address: string;\n  employee: {\n    id: number;\n    firstName: string;\n    lastName: string;\n    address: string;\n  };\n  designation: {\n    id: number;\n    title: string;\n  };\n}\n\nexport default function ManageEmployee() {\n  const [location, setLocation] = useLocation();\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n  const [isDeassignDialogOpen, setIsDeassignDialogOpen] = useState(false);\n  const [editingAssignment, setEditingAssignment] = useState<EmployeeAssignment | null>(null);\n  const [deassignDate, setDeassignDate] = useState<string>('');\n  const [selectedAssignmentId, setSelectedAssignmentId] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Get project context from URL parameters\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const projectId = urlParams.get('projectId');\n  const projectName = urlParams.get('projectName') ? decodeURIComponent(urlParams.get('projectName')!) : null;\n\n  // Get current user and company info\n  const { data: user } = useQuery<any>({\n    queryKey: ['/api/auth/me'],\n  });\n\n  const companyId = user?.user?.companyId;\n\n  // Fetch employees\n  const { data: employees = [] } = useQuery<any[]>({\n    queryKey: [`/api/employees/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  // Fetch designations\n  const { data: designations = [] } = useQuery<any[]>({\n    queryKey: [`/api/designations/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  // Fetch employee assignments\n  const { data: assignments = [], isLoading } = useQuery<any[]>({\n    queryKey: [`/api/employee-assignments/${companyId}`],\n    enabled: !!companyId,\n  });\n\n  const form = useForm<AssignEmployeeFormData>({\n    resolver: zodResolver(assignEmployeeSchema),\n    defaultValues: {\n      employeeId: 0,\n      designationId: 0,\n      assignDate: \"\",\n      address: \"\",\n      useActualAddress: false,\n    },\n  });\n\n  // Watch for selected employee to get actual address\n  const selectedEmployeeId = form.watch(\"employeeId\");\n  const useActualAddress = form.watch(\"useActualAddress\");\n  const selectedEmployee = employees.find((emp: any) => emp.id === selectedEmployeeId);\n\n  // Update address when \"Same as actual\" is checked\n  useEffect(() => {\n    if (useActualAddress && selectedEmployee?.address) {\n      form.setValue(\"address\", selectedEmployee.address);\n    } else if (!useActualAddress) {\n      form.setValue(\"address\", \"\");\n    }\n  }, [useActualAddress, selectedEmployee?.address, form]);\n\n  // Create employee assignment mutation\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: AssignEmployeeFormData) => {\n      const response = await apiRequest('POST', '/api/employee-assignments', { \n        ...data, \n        companyId \n      });\n      return response.ok ? response.json() : Promise.reject(new Error('Failed to create assignment'));\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/employee-assignments/${companyId}`] });\n      setIsAssignDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Employee assigned successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update employee assignment mutation\n  const updateAssignmentMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<AssignEmployeeFormData> }) => {\n      const response = await apiRequest('PUT', `/api/employee-assignments/${id}`, data);\n      if (!response.ok) {\n        throw new Error('Failed to update assignment');\n      }\n      const text = await response.text();\n      return text ? JSON.parse(text) : { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/employee-assignments/${companyId}`] });\n      setEditingAssignment(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Employee assignment updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete employee assignment mutation\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest('DELETE', `/api/employee-assignments/${id}`);\n      return response.ok ? response.json() : Promise.reject(new Error('Failed to delete assignment'));\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/employee-assignments/${companyId}`] });\n      toast({\n        title: \"Success\",\n        description: \"Employee assignment deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // De-assign employee mutation\n  const deassignMutation = useMutation({\n    mutationFn: async ({ id, deassignDate }: { id: number; deassignDate: string }) => {\n      const response = await apiRequest('PUT', `/api/employee-assignments/${id}/deassign`, {\n        deassignDate\n      });\n      if (!response.ok) {\n        throw new Error('Failed to de-assign employee');\n      }\n      const text = await response.text();\n      return text ? JSON.parse(text) : { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/employee-assignments/${companyId}`] });\n      toast({\n        title: \"Success\",\n        description: \"Employee de-assigned successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to de-assign employee\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AssignEmployeeFormData) => {\n    if (editingAssignment) {\n      updateAssignmentMutation.mutate({ id: editingAssignment.id, data });\n    } else {\n      createAssignmentMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (assignment: EmployeeAssignment) => {\n    setEditingAssignment(assignment);\n    form.reset({\n      employeeId: assignment.employeeId,\n      designationId: assignment.designationId,\n      assignDate: assignment.assignDate,\n      address: assignment.address,\n      useActualAddress: false,\n    });\n    setIsAssignDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this employee assignment?\")) {\n      deleteAssignmentMutation.mutate(id);\n    }\n  };\n\n  const handleDeassign = (id: number) => {\n    setSelectedAssignmentId(id);\n    setDeassignDate(new Date().toISOString().split('T')[0]); // Default to today\n    setIsDeassignDialogOpen(true);\n  };\n\n  const confirmDeassign = () => {\n    if (selectedAssignmentId && deassignDate) {\n      deassignMutation.mutate({ id: selectedAssignmentId, deassignDate });\n      setIsDeassignDialogOpen(false);\n      setSelectedAssignmentId(null);\n      setDeassignDate('');\n    }\n  };\n\n  const resetForm = () => {\n    setEditingAssignment(null);\n    form.reset();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          {projectName && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setLocation('/client-compliances')}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Client Projects</span>\n            </Button>\n          )}\n          <div>\n            <h1 className=\"text-3xl font-bold\">\n              {projectName ? `Manage Employee - ${projectName}` : 'Manage Employee'}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {projectName \n                ? `Assign employees to this project and manage their assignments`\n                : 'Assign and manage employee designations and locations'\n              }\n            </p>\n          </div>\n        </div>\n        <Dialog \n          open={isAssignDialogOpen} \n          onOpenChange={(open) => {\n            setIsAssignDialogOpen(open);\n            if (!open) resetForm();\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Assign Employee\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingAssignment ? \"Update Employee Assignment\" : \"Assign Employee\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"employeeId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Employee</FormLabel>\n                      <Select \n                        value={field.value.toString()} \n                        onValueChange={(value) => field.onChange(parseInt(value))}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select employee\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {employees.map((employee: any) => (\n                            <SelectItem key={employee.id} value={employee.id.toString()}>\n                              {employee.firstName} {employee.lastName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"designationId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Designation</FormLabel>\n                      <Select \n                        value={field.value.toString()} \n                        onValueChange={(value) => field.onChange(parseInt(value))}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select designation\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {designations.map((designation: any) => (\n                            <SelectItem key={designation.id} value={designation.id.toString()}>\n                              {designation.title}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"assignDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assign Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"useActualAddress\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          disabled={!selectedEmployee?.address}\n                        />\n                      </FormControl>\n                      <FormLabel className=\"text-sm font-normal\">\n                        Same as actual address\n                      </FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Employee Address</FormLabel>\n                      <FormControl>\n                        <textarea\n                          {...field}\n                          className=\"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                          placeholder=\"Enter employee address\"\n                          rows={3}\n                          disabled={useActualAddress}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsAssignDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createAssignmentMutation.isPending || updateAssignmentMutation.isPending}\n                  >\n                    {editingAssignment ? \"Update\" : \"Assign\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* De-assign Date Dialog */}\n        <Dialog open={isDeassignDialogOpen} onOpenChange={setIsDeassignDialogOpen}>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5\" />\n                De-assign Employee\n              </DialogTitle>\n              <DialogDescription>\n                Please select the de-assignment date for this employee.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"deassign-date\">De-assignment Date</Label>\n                <Input\n                  id=\"deassign-date\"\n                  type=\"date\"\n                  value={deassignDate}\n                  onChange={(e) => setDeassignDate(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-3\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsDeassignDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={confirmDeassign}\n                disabled={!deassignDate || deassignMutation.isPending}\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                {deassignMutation.isPending ? \"De-assigning...\" : \"De-assign Employee\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Employee Assignments\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>S.No.</TableHead>\n                  <TableHead>Employee Name</TableHead>\n                  <TableHead>Designation</TableHead>\n                  <TableHead>Address</TableHead>\n                  <TableHead>Assign Date</TableHead>\n                  <TableHead>De-assign Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8\">\n                      Loading assignments...\n                    </TableCell>\n                  </TableRow>\n                ) : assignments.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8\">\n                      No employee assignments found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  assignments.map((assignment: EmployeeAssignment, index: number) => (\n                    <TableRow key={assignment.id}>\n                      <TableCell>{index + 1}</TableCell>\n                      <TableCell className=\"font-medium\">\n                        {assignment.employee.firstName} {assignment.employee.lastName}\n                      </TableCell>\n                      <TableCell>{assignment.designation.title}</TableCell>\n                      <TableCell className=\"max-w-xs truncate\" title={assignment.address}>\n                        {assignment.address}\n                      </TableCell>\n                      <TableCell>{assignment.assignDate}</TableCell>\n                      <TableCell>\n                        {assignment.deassignDate || \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={assignment.deassignDate ? \"secondary\" : \"default\"}>\n                          {assignment.deassignDate ? \"De-assigned\" : \"Active\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleEdit(assignment)}>\n                              <Edit className=\"w-4 h-4 mr-2\" />\n                              Update\n                            </DropdownMenuItem>\n                            {!assignment.deassignDate && (\n                              <DropdownMenuItem onClick={() => handleDeassign(assignment.id)}>\n                                <Users className=\"w-4 h-4 mr-2\" />\n                                De-assign\n                              </DropdownMenuItem>\n                            )}\n                            <DropdownMenuItem \n                              onClick={() => handleDelete(assignment.id)}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22098},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payroll.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Plus, Eye, DollarSign, Users, Calendar, CheckCircle2, XCircle, Clock, Download } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MonthlyPayroll {\n  id: number;\n  month: number;\n  year: number;\n  status: 'draft' | 'finalized';\n  recordCount: number;\n  totalAmount: number;\n  generatedAt: string;\n  finalizedAt?: string;\n}\n\ninterface PayrollRecord {\n  id: number;\n  employeeCode: string;\n  employeeName: string;\n  department: string;\n  presentDays: number;\n  payableDays: number;\n  grossSalary: string;\n  totalDeductions: string;\n  netSalary: string;\n  paymentStatus: 'unpaid' | 'paid' | 'partially_paid';\n  paidAmount?: string;\n  paymentDate?: string;\n  paymentMethod?: string;\n}\n\nexport default function PayrollPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedPayroll, setSelectedPayroll] = useState<MonthlyPayroll | null>(null);\n  const [generateDialogOpen, setGenerateDialogOpen] = useState(false);\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<PayrollRecord | null>(null);\n  const [filterMonth, setFilterMonth] = useState<number | null>(null);\n  const [filterYear, setFilterYear] = useState<number | null>(null);\n  const [generateForm, setGenerateForm] = useState({\n    month: new Date().getMonth() + 1,\n    year: new Date().getFullYear()\n  });\n  const [paymentForm, setPaymentForm] = useState({\n    status: 'paid',\n    amount: '',\n    method: 'bank_transfer',\n    reference: ''\n  });\n\n  // Get current user's company ID using proper auth hook\n  const { user, isAuthenticated } = useAuth();\n  const userLoading = false; // No loading state needed for localStorage-based auth\n\n  const companyId = user?.companyId;\n\n  // Fetch monthly payrolls\n  const { data: payrolls = [], isLoading: payrollsLoading, refetch: refetchPayrolls, error: payrollsError } = useQuery<MonthlyPayroll[]>({\n    queryKey: ['payroll-monthly', companyId],\n    queryFn: async () => {\n      if (!companyId) throw new Error('No company ID');\n      const response = await apiRequest('GET', `/api/payroll/monthly/${companyId}`);\n      return response.json();\n    },\n    enabled: !!companyId\n  });\n\n\n  // Fetch payroll records for selected payroll\n  const { data: payrollRecords = [], isLoading: recordsLoading } = useQuery<PayrollRecord[]>({\n    queryKey: [`/api/payroll/records/${selectedPayroll?.id}`],\n    enabled: !!selectedPayroll,\n  });\n\n  // Generate payroll mutation\n  const generatePayrollMutation = useMutation({\n    mutationFn: async (data: { month: number; year: number }) => {\n      const response = await apiRequest('POST', '/api/payroll/generate', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payroll generated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['payroll-monthly', companyId] });\n      setGenerateDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate payroll\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Finalize payroll mutation\n  const finalizePayrollMutation = useMutation({\n    mutationFn: async (payrollId: number) => {\n      const response = await apiRequest('PUT', `/api/payroll/finalize/${payrollId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payroll finalized successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['payroll-monthly', companyId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to finalize payroll\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete payroll mutation\n  const deletePayrollMutation = useMutation({\n    mutationFn: async (payrollId: number) => {\n      const response = await apiRequest('DELETE', `/api/payroll/monthly/${payrollId}`);\n      // For delete operations, we don't need to parse JSON response\n      if (!response.ok) {\n        throw new Error('Failed to delete payroll');\n      }\n      return { success: true };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payroll deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['payroll-monthly', companyId] });\n      setSelectedPayroll(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete payroll\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update payment status mutation\n  const updatePaymentMutation = useMutation({\n    mutationFn: async (data: {\n      recordId: number;\n      status: string;\n      amount?: number;\n      method?: string;\n      reference?: string;\n    }) => {\n      const response = await apiRequest('PUT', `/api/payroll/payment/${data.recordId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payment status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/payroll/records/${selectedRecord?.id}`] });\n      setPaymentDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update payment status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGeneratePayroll = () => {\n    generatePayrollMutation.mutate(generateForm);\n  };\n\n  const handleFinalizePayroll = (payrollId: number) => {\n    finalizePayrollMutation.mutate(payrollId);\n  };\n\n  const handleDeletePayroll = (payrollId: number) => {\n    if (confirm('Are you sure you want to delete this payroll? This action cannot be undone.')) {\n      deletePayrollMutation.mutate(payrollId);\n    }\n  };\n\n  const handleUpdatePayment = () => {\n    if (!selectedRecord) return;\n    \n    updatePaymentMutation.mutate({\n      recordId: selectedRecord.id,\n      status: paymentForm.status,\n      amount: paymentForm.status === 'paid' ? parseFloat(paymentForm.amount) : undefined,\n      method: paymentForm.status === 'paid' ? paymentForm.method : undefined,\n      reference: paymentForm.status === 'paid' ? paymentForm.reference : undefined,\n    });\n  };\n\n  const openPaymentDialog = (record: PayrollRecord) => {\n    setSelectedRecord(record);\n    setPaymentForm({\n      status: record.paymentStatus,\n      amount: record.paidAmount || record.netSalary,\n      method: record.paymentMethod || 'bank_transfer',\n      reference: ''\n    });\n    setPaymentDialogOpen(true);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return <Badge variant=\"secondary\"><Clock className=\"w-3 h-3 mr-1\" />Draft</Badge>;\n      case 'finalized':\n        return <Badge variant=\"default\"><CheckCircle2 className=\"w-3 h-3 mr-1\" />Finalized</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    switch (status) {\n      case 'unpaid':\n        return <Badge variant=\"destructive\"><XCircle className=\"w-3 h-3 mr-1\" />Unpaid</Badge>;\n      case 'paid':\n        return <Badge variant=\"default\"><CheckCircle2 className=\"w-3 h-3 mr-1\" />Paid</Badge>;\n      case 'partially_paid':\n        return <Badge variant=\"secondary\"><Clock className=\"w-3 h-3 mr-1\" />Partial</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(typeof amount === 'string' ? parseFloat(amount) : amount);\n  };\n\n  const getMonthName = (month: number) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return months[month - 1];\n  };\n\n  const handleExportToExcel = () => {\n    if (!companyId) {\n      toast({\n        title: \"Error\",\n        description: \"Company ID not found. Please try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const year = filterYear || new Date().getFullYear();\n    const month = filterMonth || new Date().getMonth() + 1;\n    const token = localStorage.getItem('token');\n    const url = `/api/payroll/export/${companyId}/${year}/${month}`;\n    \n    // Create a temporary link with auth header\n    fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    })\n    .then(response => response.blob())\n    .then(blob => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `payroll_${year}_${month}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    })\n    .catch(error => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export payroll data\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  // Ensure payrolls is an array before filtering\n  const payrollsArray = Array.isArray(payrolls) ? payrolls : [];\n  \n  // Filter payrolls based on month/year selection\n  const filteredPayrolls = payrollsArray.filter((payroll: MonthlyPayroll) => {\n    if (filterMonth && payroll.month !== filterMonth) return false;\n    if (filterYear && payroll.year !== filterYear) return false;\n    return true;\n  });\n\n  // Get unique years and months for filter dropdowns\n  const availableYears = Array.from(new Set(payrollsArray.map((p: MonthlyPayroll) => p.year))).sort((a, b) => b - a);\n  const availableMonths = Array.from(new Set(payrollsArray.map((p: MonthlyPayroll) => p.month))).sort((a, b) => a - b);\n\n  if (payrollsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-gray-600\">Loading payroll data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Monthly Payroll</h1>\n          <p className=\"text-gray-600\">Manage monthly payroll generation and payment tracking</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={handleExportToExcel} \n            variant=\"outline\"\n            className=\"flex items-center gap-2\"\n          >\n            <Download className=\"h-4 w-4\" />\n            Export to Excel\n          </Button>\n          <Dialog open={generateDialogOpen} onOpenChange={setGenerateDialogOpen}>\n            <Button onClick={() => refetchPayrolls()} variant=\"outline\" className=\"mr-2\">\n              Refresh Data\n            </Button>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Generate Payroll\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Generate Monthly Payroll</DialogTitle>\n                <DialogDescription>\n                  Select the month and year for payroll generation\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"month\">Month</Label>\n                    <Select value={generateForm.month.toString()} onValueChange={(value) => setGenerateForm(prev => ({ ...prev, month: parseInt(value) }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {Array.from({ length: 12 }, (_, i) => (\n                          <SelectItem key={i + 1} value={(i + 1).toString()}>\n                            {getMonthName(i + 1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"year\">Year</Label>\n                    <Input\n                      type=\"number\"\n                      value={generateForm.year}\n                      onChange={(e) => setGenerateForm(prev => ({ ...prev, year: parseInt(e.target.value) }))}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setGenerateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleGeneratePayroll} disabled={generatePayrollMutation.isPending}>\n                    {generatePayrollMutation.isPending ? 'Generating...' : 'Generate'}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs value={selectedPayroll ? \"records\" : \"overview\"} onValueChange={() => {}}>\n        <TabsList>\n          <TabsTrigger value=\"overview\" onClick={() => setSelectedPayroll(null)}>\n            Payroll Overview\n          </TabsTrigger>\n          {selectedPayroll && (\n            <TabsTrigger value=\"records\">\n              {getMonthName(selectedPayroll.month)} {selectedPayroll.year} Records\n            </TabsTrigger>\n          )}\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Payrolls</CardTitle>\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{filteredPayrolls.length}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Monthly payroll runs\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Amount</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {formatCurrency(filteredPayrolls.reduce((sum: number, p: MonthlyPayroll) => sum + p.totalAmount, 0))}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Across all payrolls\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Records</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {filteredPayrolls.reduce((sum: number, p: MonthlyPayroll) => sum + p.recordCount, 0)}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Employee records\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Monthly Payrolls</CardTitle>\n              <CardDescription>\n                Generated payroll runs by month and year\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-4\">\n                  <Select value={filterYear?.toString() || 'all'} onValueChange={(value) => setFilterYear(value === 'all' ? null : parseInt(value))}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Filter by year\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Years</SelectItem>\n                      {availableYears.map((year) => (\n                        <SelectItem key={year} value={year.toString()}>\n                          {year}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Select value={filterMonth?.toString() || 'all'} onValueChange={(value) => setFilterMonth(value === 'all' ? null : parseInt(value))}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Filter by month\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Months</SelectItem>\n                      {availableMonths.map((month) => (\n                        <SelectItem key={month} value={month.toString()}>\n                          {getMonthName(month)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Period</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Records</TableHead>\n                      <TableHead>Total Amount</TableHead>\n                      <TableHead>Generated Date</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPayrolls.map((payroll) => (\n                      <TableRow key={payroll.id}>\n                        <TableCell className=\"font-medium\">\n                          {getMonthName(payroll.month)} {payroll.year}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(payroll.status)}\n                        </TableCell>\n                        <TableCell>{payroll.recordCount}</TableCell>\n                        <TableCell>{formatCurrency(payroll.totalAmount)}</TableCell>\n                        <TableCell>{new Date(payroll.createdAt).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => setSelectedPayroll(payroll)}\n                            >\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              View Records\n                            </Button>\n                            {payroll.status === 'draft' && (\n                              <>\n                                <Button \n                                  variant=\"default\" \n                                  size=\"sm\"\n                                  onClick={() => handleFinalizePayroll(payroll.id)}\n                                  disabled={finalizePayrollMutation.isPending}\n                                >\n                                  Finalize\n                                </Button>\n                                <Button \n                                  variant=\"destructive\" \n                                  size=\"sm\"\n                                  onClick={() => handleDeletePayroll(payroll.id)}\n                                  disabled={deletePayrollMutation.isPending}\n                                >\n                                  Delete\n                                </Button>\n                              </>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"records\" className=\"space-y-6\">\n          {selectedPayroll && (\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  Payroll Records - {getMonthName(selectedPayroll.month)} {selectedPayroll.year}\n                </CardTitle>\n                <CardDescription>\n                  Individual employee payroll records for this period\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {recordsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                    <p className=\"mt-2 text-sm text-gray-600\">Loading records...</p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Employee</TableHead>\n                        <TableHead>Department</TableHead>\n                        <TableHead>Present Days</TableHead>\n                        <TableHead>Payable Days</TableHead>\n                        <TableHead>Gross Salary</TableHead>\n                        <TableHead>Deductions</TableHead>\n                        <TableHead>Net Salary</TableHead>\n                        <TableHead>Payment Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {payrollRecords.map((record) => (\n                        <TableRow key={record.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{record.employeeName}</div>\n                              <div className=\"text-sm text-gray-500\">{record.employeeCode}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>{record.department}</TableCell>\n                          <TableCell>{record.presentDays}</TableCell>\n                          <TableCell>{record.payableDays}</TableCell>\n                          <TableCell>{formatCurrency(record.grossSalary)}</TableCell>\n                          <TableCell>{formatCurrency(record.totalDeductions)}</TableCell>\n                          <TableCell className=\"font-medium\">{formatCurrency(record.netSalary)}</TableCell>\n                          <TableCell>{getPaymentStatusBadge(record.paymentStatus)}</TableCell>\n                          <TableCell>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => openPaymentDialog(record)}\n                            >\n                              Update Payment\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Payment Status Dialog */}\n      <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Update Payment Status</DialogTitle>\n            <DialogDescription>\n              Update payment status for {selectedRecord?.employeeName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Payment Status</Label>\n              <Select value={paymentForm.status} onValueChange={(value) => setPaymentForm(prev => ({ ...prev, status: value }))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"unpaid\">Unpaid</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"partially_paid\">Partially Paid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {paymentForm.status === 'paid' && (\n              <>\n                <div>\n                  <Label>Amount Paid</Label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={paymentForm.amount}\n                    onChange={(e) => setPaymentForm(prev => ({ ...prev, amount: e.target.value }))}\n                  />\n                </div>\n                <div>\n                  <Label>Payment Method</Label>\n                  <Select value={paymentForm.method} onValueChange={(value) => setPaymentForm(prev => ({ ...prev, method: value }))}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"cheque\">Cheque</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label>Payment Reference</Label>\n                  <Input\n                    value={paymentForm.reference}\n                    onChange={(e) => setPaymentForm(prev => ({ ...prev, reference: e.target.value }))}\n                    placeholder=\"Transaction ID, Cheque Number, etc.\"\n                  />\n                </div>\n              </>\n            )}\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setPaymentDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleUpdatePayment} disabled={updatePaymentMutation.isPending}>\n                {updatePaymentMutation.isPending ? 'Updating...' : 'Update'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":27721},"client/src/pages/permission-management.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Shield, Users, Settings, FileText, CheckCircle, XCircle, Clock, Plus, Trash2, Edit } from 'lucide-react';\n\ninterface Permission {\n  id: number;\n  name: string;\n  description: string;\n  category: string;\n  module: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface PermissionRequest {\n  id: number;\n  userId: number;\n  companyId: number;\n  permissionType: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  requestedBy: number;\n  reviewedBy?: number;\n  reviewedAt?: string;\n  level1ReviewerId?: number;\n  level1ReviewedAt?: string;\n  level1Comments?: string;\n  level2ReviewerId?: number;\n  level2ReviewedAt?: string;\n  level2Comments?: string;\n  finalReviewerId?: number;\n  finalReviewedAt?: string;\n  finalComments?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface UserPermission {\n  id: number;\n  userId: number;\n  permissionId: number;\n  companyId: number;\n  grantedBy: number;\n  grantedAt: string;\n  isActive: boolean;\n  reason?: string;\n}\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n  companyId: number;\n  isActive: boolean;\n}\n\nexport default function PermissionManagement() {\n  const [activeTab, setActiveTab] = useState('permissions');\n  const [selectedUser, setSelectedUser] = useState<number | null>(null);\n  const [newPermissionDialog, setNewPermissionDialog] = useState(false);\n  const [newRequestDialog, setNewRequestDialog] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current user from localStorage\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      setCurrentUser({ id: payload.userId, role: payload.role, companyId: payload.companyId });\n    }\n  }, []);\n\n  // Fetch permissions (with proper error handling for employees)\n  const { data: permissions = [], isLoading: permissionsLoading } = useQuery<Permission[]>({\n    queryKey: ['/api/permissions/enhanced'],\n    retry: false,\n    enabled: currentUser?.role !== 'employee', // Only load for non-employees\n  });\n\n  // Fetch permission requests\n  const { data: permissionRequests = [], isLoading: requestsLoading } = useQuery<PermissionRequest[]>({\n    queryKey: ['/api/permission-requests'],\n    staleTime: 0, // Always consider data stale\n  });\n\n  // Fetch users for permission assignment\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Fetch user permissions for selected user\n  const { data: userPermissions = [], isLoading: userPermissionsLoading } = useQuery<UserPermission[]>({\n    queryKey: ['/api/user-permissions', selectedUser],\n    enabled: !!selectedUser,\n  });\n\n  // Create permission mutation\n  const createPermissionMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('/api/permissions/enhanced', 'POST', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/permissions/enhanced'] });\n      setNewPermissionDialog(false);\n      toast({ title: 'Success', description: 'Permission created successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to create permission', variant: 'destructive' });\n    },\n  });\n\n  // Create permission request mutation\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/permission-requests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/permission-requests'] });\n      queryClient.refetchQueries({ queryKey: ['/api/permission-requests'] });\n      setNewRequestDialog(false);\n      toast({ title: 'Success', description: 'Permission request submitted successfully!' });\n    },\n    onError: (error: any) => {\n      console.error('Permission request error:', error);\n      toast({ title: 'Error', description: 'Failed to create permission request', variant: 'destructive' });\n    },\n  });\n\n  // Approve permission request mutation\n  const approveRequestMutation = useMutation({\n    mutationFn: async ({ id, comments }: { id: number; comments?: string }) => {\n      const response = await fetch(`/api/permission-requests/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ status: 'approved', reviewNotes: comments }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to approve request');\n      }\n      \n      return response.json();\n    },\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({ queryKey: ['/api/permission-requests'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/permission-requests'] });\n      toast({ title: 'Success', description: 'Permission request approved - Status updated!' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to approve request', variant: 'destructive' });\n    },\n  });\n\n  // Reject permission request mutation\n  const rejectRequestMutation = useMutation({\n    mutationFn: async ({ id, comments }: { id: number; comments?: string }) => {\n      const response = await fetch(`/api/permission-requests/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ status: 'rejected', reviewNotes: comments }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to reject request');\n      }\n      \n      return response.json();\n    },\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({ queryKey: ['/api/permission-requests'] });\n      await queryClient.refetchQueries({ queryKey: ['/api/permission-requests'] });\n      toast({ title: 'Success', description: 'Permission request rejected - Status updated!' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to reject request', variant: 'destructive' });\n    },\n  });\n\n  // Grant user permission mutation\n  const grantPermissionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log('Granting permission:', data);\n      const response = await apiRequest('POST', '/api/user-permissions', data);\n      return response.json();\n    },\n    onSuccess: (result) => {\n      console.log('Permission granted successfully:', result);\n      queryClient.invalidateQueries({ queryKey: ['/api/user-permissions', selectedUser] });\n      toast({ title: 'Success', description: 'Permission granted successfully' });\n    },\n    onError: (error) => {\n      console.error('Failed to grant permission:', error);\n      toast({ title: 'Error', description: 'Failed to grant permission', variant: 'destructive' });\n    },\n  });\n\n  // Revoke user permission mutation\n  const revokePermissionMutation = useMutation({\n    mutationFn: async ({ userId, permissionId }: { userId: number; permissionId: number }) => {\n      const response = await apiRequest('DELETE', `/api/user-permissions/${userId}/${permissionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user-permissions', selectedUser] });\n      toast({ title: 'Success', description: 'Permission revoked successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to revoke permission', variant: 'destructive' });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />Pending</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const categories = [...new Set(permissions.map((p: Permission) => p.category))];\n  const filteredPermissions = permissions.filter((permission: Permission) => {\n    const matchesCategory = selectedCategory === 'all' || permission.category === selectedCategory;\n    const matchesSearch = permission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         permission.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  if (!currentUser) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Permission Management</h1>\n          <p className=\"text-muted-foreground\">\n            {currentUser.role === 'employee' ? 'Request additional permissions from your administrator' : 'Manage user permissions and approval workflows'}\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          {currentUser.role === 'system_admin' && (\n            <Dialog open={newPermissionDialog} onOpenChange={setNewPermissionDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Permission\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Permission</DialogTitle>\n                  <DialogDescription>\n                    Define a new permission that can be assigned to users.\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={(e) => {\n                  e.preventDefault();\n                  const formData = new FormData(e.currentTarget);\n                  createPermissionMutation.mutate({\n                    name: formData.get('name'),\n                    description: formData.get('description'),\n                    category: formData.get('category'),\n                    module: formData.get('module'),\n                    isActive: true,\n                  });\n                }}>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Permission Name</Label>\n                      <Input id=\"name\" name=\"name\" required />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Input id=\"description\" name=\"description\" required />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Input id=\"category\" name=\"category\" required />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"module\">Module</Label>\n                      <Input id=\"module\" name=\"module\" required />\n                    </div>\n                    <Button type=\"submit\" disabled={createPermissionMutation.isPending}>\n                      Create Permission\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          )}\n          <Button \n            variant=\"outline\" \n            className=\"bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100\"\n            onClick={() => {\n              console.log('Request Permission button clicked!');\n              setNewRequestDialog(true);\n            }}\n          >\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Request New Permission\n          </Button>\n          \n          <Dialog open={newRequestDialog} onOpenChange={setNewRequestDialog}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Request Permission</DialogTitle>\n                <DialogDescription>\n                  Submit a request for additional permissions.\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                const permissionType = formData.get('permissionType') as string;\n                const reason = formData.get('reason') as string;\n                \n                if (!permissionType || !reason) {\n                  toast({ title: \"Error\", description: \"Please fill all fields\", variant: \"destructive\" });\n                  return;\n                }\n                \n                createRequestMutation.mutate({\n                  permissionType,\n                  reason,\n                });\n              }}>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"permissionType\">Permission Type</Label>\n                    <Select name=\"permissionType\" required>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select permission type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"employee_edit\">Employee Edit - Edit employee information</SelectItem>\n                        <SelectItem value=\"employee_create\">Employee Create - Create new employee records</SelectItem>\n                        <SelectItem value=\"employee_delete\">Employee Delete - Delete employee records</SelectItem>\n                        <SelectItem value=\"job_create\">Job Create - Create new job postings</SelectItem>\n                        <SelectItem value=\"job_edit\">Job Edit - Edit existing job postings</SelectItem>\n                        <SelectItem value=\"job_delete\">Job Delete - Delete job postings</SelectItem>\n                        <SelectItem value=\"department_create\">Department Create - Create new departments</SelectItem>\n                        <SelectItem value=\"department_edit\">Department Edit - Edit department information</SelectItem>\n                        <SelectItem value=\"company_settings\">Company Settings - Access company settings</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"reason\">Reason for Request</Label>\n                    <Input id=\"reason\" name=\"reason\" required />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    disabled={createRequestMutation.isPending}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  >\n                    {createRequestMutation.isPending ? 'Submitting...' : 'Submit Permission Request'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Show different content based on user role */}\n      {currentUser.role === 'employee' ? (\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>My Permission Requests</CardTitle>\n              <CardDescription>\n                Track your submitted permission requests and their status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {requestsLoading ? (\n                <div>Loading requests...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Permission Type</TableHead>\n                      <TableHead>Reason</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {permissionRequests.map((request: PermissionRequest) => (\n                      <TableRow key={request.id}>\n                        <TableCell className=\"font-medium\">{request.permissionType}</TableCell>\n                        <TableCell>{request.reason}</TableCell>\n                        <TableCell>{getStatusBadge(request.status)}</TableCell>\n                        <TableCell>{new Date(request.createdAt).toLocaleDateString()}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"permissions\" className=\"flex items-center gap-2\">\n            <Shield className=\"w-4 h-4\" />\n            Permissions\n          </TabsTrigger>\n          <TabsTrigger value=\"requests\" className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4\" />\n            Requests\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n            <Users className=\"w-4 h-4\" />\n            User Permissions\n          </TabsTrigger>\n          <TabsTrigger value=\"templates\" className=\"flex items-center gap-2\">\n            <Settings className=\"w-4 h-4\" />\n            Templates\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"permissions\">\n          <Card>\n            <CardHeader>\n              <CardTitle>System Permissions</CardTitle>\n              <CardDescription>\n                Manage all available permissions in the system\n              </CardDescription>\n              <div className=\"flex gap-4 items-center\">\n                <Input\n                  placeholder=\"Search permissions...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"max-w-sm\"\n                />\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {permissionsLoading ? (\n                <div>Loading permissions...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Module</TableHead>\n                      <TableHead>Status</TableHead>\n                      {currentUser.role === 'system_admin' && <TableHead>Actions</TableHead>}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPermissions.map((permission: Permission) => (\n                      <TableRow key={permission.id}>\n                        <TableCell className=\"font-medium\">{permission.name}</TableCell>\n                        <TableCell>{permission.description}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{permission.category}</Badge>\n                        </TableCell>\n                        <TableCell>{permission.module}</TableCell>\n                        <TableCell>\n                          <Badge variant={permission.isActive ? 'default' : 'secondary'}>\n                            {permission.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </TableCell>\n                        {currentUser.role === 'system_admin' && (\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Edit className=\"w-3 h-3\" />\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"requests\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Permission Requests</CardTitle>\n              <CardDescription>\n                Review and manage permission requests from users\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {requestsLoading ? (\n                <div>Loading requests...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Permission Type</TableHead>\n                      <TableHead>Requested By</TableHead>\n                      <TableHead>Reason</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created</TableHead>\n                      {currentUser.role !== 'employee' && <TableHead>Actions</TableHead>}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {permissionRequests.map((request: PermissionRequest) => (\n                      <TableRow key={request.id}>\n                        <TableCell className=\"font-medium\">{request.permissionType}</TableCell>\n                        <TableCell>User #{request.requestedBy}</TableCell>\n                        <TableCell>{request.reason}</TableCell>\n                        <TableCell>{getStatusBadge(request.status)}</TableCell>\n                        <TableCell>{new Date(request.createdAt).toLocaleDateString()}</TableCell>\n                        {currentUser.role !== 'employee' && (\n                          <TableCell>\n                            {request.status === 'pending' && (\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => approveRequestMutation.mutate({\n                                    id: request.id,\n                                    comments: 'Approved by admin'\n                                  })}\n                                  disabled={approveRequestMutation.isPending}\n                                >\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Approve\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => rejectRequestMutation.mutate({\n                                    id: request.id,\n                                    comments: 'Rejected by admin'\n                                  })}\n                                  disabled={rejectRequestMutation.isPending}\n                                >\n                                  <XCircle className=\"w-3 h-3 mr-1\" />\n                                  Reject\n                                </Button>\n                              </div>\n                            )}\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Users</CardTitle>\n                <CardDescription>Select a user to manage their permissions</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {usersLoading ? (\n                  <div>Loading users...</div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {users.map((user: User) => (\n                      <div\n                        key={user.id}\n                        className={`p-3 border rounded-lg cursor-pointer transition-all duration-200 ${\n                          selectedUser === user.id \n                            ? 'bg-blue-50 border-blue-300 shadow-sm' \n                            : 'hover:bg-gray-50 hover:border-gray-300'\n                        }`}\n                        onClick={() => setSelectedUser(user.id)}\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <p className=\"font-medium text-gray-900\">{user.username}</p>\n                            <p className=\"text-sm text-gray-600\">{user.email}</p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge \n                              variant=\"outline\" \n                              className={user.role === 'admin' ? 'border-orange-200 text-orange-700' : 'border-blue-200 text-blue-700'}\n                            >\n                              {user.role}\n                            </Badge>\n                            {selectedUser === user.id && (\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>User Permissions</CardTitle>\n                <CardDescription>\n                  {selectedUser ? 'Manage permissions for selected user' : 'Select a user to view permissions'}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {selectedUser ? (\n                  <div className=\"space-y-4\">\n                    {currentUser.role !== 'employee' && (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex gap-2\">\n                          <Select\n                            onValueChange={(permissionId) => {\n                              console.log('Selected permission ID:', permissionId);\n                              console.log('Available permissions:', permissions);\n                              console.log('Selected user:', selectedUser);\n                              \n                              const permission = permissions.find((p: Permission) => p.id === parseInt(permissionId));\n                              console.log('Found permission:', permission);\n                              \n                              if (permission && selectedUser) {\n                                const grantData = {\n                                  userId: selectedUser,\n                                  permissionId: permission.id,\n                                  reason: 'Granted by admin'\n                                };\n                                console.log('About to grant permission with data:', grantData);\n                                grantPermissionMutation.mutate(grantData);\n                              } else {\n                                console.error('Missing permission or selectedUser:', { permission, selectedUser });\n                              }\n                            }}\n                            disabled={grantPermissionMutation.isPending}\n                          >\n                            <SelectTrigger className=\"flex-1\">\n                              <SelectValue placeholder={grantPermissionMutation.isPending ? \"Granting permission...\" : \"Grant permission...\"} />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {permissions.map((permission: Permission) => (\n                                <SelectItem key={permission.id} value={permission.id.toString()}>\n                                  <div className=\"flex flex-col\">\n                                    <span className=\"font-medium\">{permission.name}</span>\n                                    <span className=\"text-xs text-muted-foreground\">{permission.description}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Select a permission from the dropdown above to grant it to the selected user.\n                        </p>\n                      </div>\n                    )}\n                    \n                    {userPermissionsLoading ? (\n                      <div className=\"flex justify-center py-8\">\n                        <div className=\"text-center\">\n                          <div className=\"animate-pulse text-sm text-muted-foreground\">Loading user permissions...</div>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <div className=\"text-sm font-medium text-gray-700\">Current Permissions:</div>\n                        {userPermissions.map((userPermission: UserPermission) => {\n                          const permission = permissions.find((p: Permission) => p.id === userPermission.permissionId);\n                          return (\n                            <div key={userPermission.id} className=\"flex justify-between items-center p-3 border rounded-lg bg-green-50 border-green-200\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2\">\n                                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                                  <p className=\"font-medium text-gray-900\">{permission?.name}</p>\n                                </div>\n                                <p className=\"text-sm text-gray-600 ml-6\">{permission?.description}</p>\n                                <p className=\"text-xs text-gray-500 ml-6\">\n                                  Granted on {new Date(userPermission.grantedAt).toLocaleDateString()}\n                                </p>\n                              </div>\n                              {currentUser.role !== 'employee' && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => revokePermissionMutation.mutate({\n                                    userId: selectedUser,\n                                    permissionId: userPermission.permissionId\n                                  })}\n                                  disabled={revokePermissionMutation.isPending}\n                                  className=\"ml-3\"\n                                >\n                                  {revokePermissionMutation.isPending ? (\n                                    <div className=\"w-3 h-3 animate-spin border border-white border-t-transparent rounded-full\" />\n                                  ) : (\n                                    <Trash2 className=\"w-3 h-3\" />\n                                  )}\n                                </Button>\n                              )}\n                            </div>\n                          );\n                        })}\n                        {userPermissions.length === 0 && (\n                          <div className=\"text-center py-8 border-2 border-dashed border-gray-200 rounded-lg\">\n                            <Shield className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                            <p className=\"text-muted-foreground font-medium\">No permissions assigned to this user</p>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              Use the dropdown above to grant permissions\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">\n                    Select a user from the list to view and manage their permissions.\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"templates\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Permission Templates</CardTitle>\n              <CardDescription>\n                Create and manage permission templates for quick assignment\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Permission templates feature coming soon...\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        </Tabs>\n      )}\n    </div>\n  );\n}","size_bytes":35440},"client/src/pages/permission-request-simple.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { FileText, CheckCircle, XCircle, Clock } from 'lucide-react';\n\nexport default function PermissionRequestSimple() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [permissionType, setPermissionType] = useState('');\n  const [reason, setReason] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch permission requests\n  const { data: permissionRequests = [], isLoading } = useQuery({\n    queryKey: ['/api/permission-requests'],\n    queryFn: async () => {\n      const response = await fetch('/api/permission-requests', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch');\n      return response.json();\n    },\n  });\n\n  // Create permission request mutation\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: { permissionType: string; reason: string }) => {\n      const response = await fetch('/api/permission-requests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create permission request');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/permission-requests'] });\n      setIsDialogOpen(false);\n      setPermissionType('');\n      setReason('');\n      toast({ title: 'Success', description: 'Permission request submitted successfully!' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to create permission request', variant: 'destructive' });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!permissionType || !reason) {\n      toast({ title: \"Error\", description: \"Please fill all fields\", variant: \"destructive\" });\n      return;\n    }\n    \n    createRequestMutation.mutate({ permissionType, reason });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />Pending</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Permission Requests</h1>\n          <p className=\"text-muted-foreground\">\n            Request additional permissions from your administrator\n          </p>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              onClick={() => setIsDialogOpen(true)}\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Request New Permission\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Request Permission</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"permissionType\">Permission Type</Label>\n                <Select value={permissionType} onValueChange={setPermissionType} required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select permission type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"employee_edit\">Employee Edit - Edit employee information</SelectItem>\n                    <SelectItem value=\"employee_create\">Employee Create - Create new employee records</SelectItem>\n                    <SelectItem value=\"employee_delete\">Employee Delete - Delete employee records</SelectItem>\n                    <SelectItem value=\"job_create\">Job Create - Create new job postings</SelectItem>\n                    <SelectItem value=\"job_edit\">Job Edit - Edit existing job postings</SelectItem>\n                    <SelectItem value=\"job_delete\">Job Delete - Delete job postings</SelectItem>\n                    <SelectItem value=\"department_create\">Department Create - Create new departments</SelectItem>\n                    <SelectItem value=\"department_edit\">Department Edit - Edit department information</SelectItem>\n                    <SelectItem value=\"company_settings\">Company Settings - Access company settings</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"reason\">Reason for Request</Label>\n                <Input \n                  id=\"reason\" \n                  value={reason}\n                  onChange={(e) => setReason(e.target.value)}\n                  required \n                  placeholder=\"Explain why you need this permission\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                disabled={createRequestMutation.isPending}\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              >\n                {createRequestMutation.isPending ? 'Submitting...' : 'Submit Permission Request'}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>My Permission Requests</CardTitle>\n          <CardDescription>\n            Track your submitted permission requests and their status\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div>Loading requests...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Permission Type</TableHead>\n                  <TableHead>Reason</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Created</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {permissionRequests.map((request: any) => (\n                  <TableRow key={request.id}>\n                    <TableCell className=\"font-medium\">{request.permissionType}</TableCell>\n                    <TableCell>{request.reason}</TableCell>\n                    <TableCell>{getStatusBadge(request.status)}</TableCell>\n                    <TableCell>{new Date(request.createdAt).toLocaleDateString()}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7909},"client/src/pages/recruitment-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Link } from \"wouter\";\nimport { \n  ArrowLeft, Plus, Eye, Calendar, CheckCircle, XCircle, Search, Download, \n  Clock, User, Briefcase, Phone, Mail, MapPin, FileText, Star\n} from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\n\nexport default function RecruitmentDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedApplications, setSelectedApplications] = useState<number[]>([]);\n\n  const { data: jobs = [] } = useQuery({\n    queryKey: [`/api/jobs/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: jobApplications = [] } = useQuery({\n    queryKey: [`/api/job-applications/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: interviews = [] } = useQuery({\n    queryKey: [`/api/interviews/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const { data: jobOffers = [] } = useQuery({\n    queryKey: [`/api/job-offers/${user?.companyId}`],\n    enabled: !!user?.companyId,\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      return await apiRequest('PUT', `/api/job-applications/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({ title: \"Application status updated successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [`/api/job-applications/${user?.companyId}`] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update application status\", variant: \"destructive\" });\n    },\n  });\n\n  const scheduleInterviewMutation = useMutation({\n    mutationFn: async (interviewData: any) => {\n      return await apiRequest('POST', '/api/interviews', interviewData);\n    },\n    onSuccess: () => {\n      toast({ title: \"Interview scheduled successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [`/api/interviews/${user?.companyId}`] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to schedule interview\", variant: \"destructive\" });\n    },\n  });\n\n  const createOfferMutation = useMutation({\n    mutationFn: async (offerData: any) => {\n      return await apiRequest('POST', '/api/job-offers', offerData);\n    },\n    onSuccess: () => {\n      toast({ title: \"Job offer created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [`/api/job-offers/${user?.companyId}`] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create job offer\", variant: \"destructive\" });\n    },\n  });\n\n  const activeJobs = jobs.filter((job: any) => job.status === 'active');\n  const newApplications = jobApplications.filter((app: any) => app.status === 'applied');\n  const underReview = jobApplications.filter((app: any) => app.status === 'under_review');\n  const todayInterviews = interviews.filter((int: any) => \n    new Date(int.scheduledAt).toDateString() === new Date().toDateString()\n  );\n\n  // Candidate search functionality\n  const handleCandidateSearch = () => {\n    if (!searchQuery.trim()) {\n      toast({ title: \"Please enter search criteria\", variant: \"destructive\" });\n      return;\n    }\n    \n    const filteredCandidates = jobApplications.filter((app: any) => \n      app.applicantName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      app.applicantEmail.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (app.coverLetter && app.coverLetter.toLowerCase().includes(searchQuery.toLowerCase()))\n    );\n    \n    toast({ \n      title: `Found ${filteredCandidates.length} candidates`, \n      description: `Matching search criteria: \"${searchQuery}\"` \n    });\n  };\n\n  const handleDownloadResumes = () => {\n    const candidatesWithResumes = jobApplications.filter((app: any) => app.resume);\n    if (candidatesWithResumes.length === 0) {\n      toast({ title: \"No resumes available to download\", variant: \"destructive\" });\n      return;\n    }\n    \n    toast({ \n      title: `Downloading ${candidatesWithResumes.length} resumes`, \n      description: \"Resume files will be prepared for download\" \n    });\n  };\n\n  // Bulk actions functionality\n  const handleBulkAccept = () => {\n    if (selectedApplications.length === 0) {\n      toast({ title: \"No applications selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    selectedApplications.forEach(id => {\n      updateApplicationMutation.mutate({ id, status: 'accepted' });\n    });\n    \n    setSelectedApplications([]);\n    toast({ title: `Accepted ${selectedApplications.length} applications` });\n  };\n\n  const handleBulkReject = () => {\n    if (selectedApplications.length === 0) {\n      toast({ title: \"No applications selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    selectedApplications.forEach(id => {\n      updateApplicationMutation.mutate({ id, status: 'rejected' });\n    });\n    \n    setSelectedApplications([]);\n    toast({ title: `Rejected ${selectedApplications.length} applications` });\n  };\n\n  const filteredApplications = selectedStatus === 'all' \n    ? jobApplications \n    : jobApplications.filter((app: any) => app.status === selectedStatus);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/admin\">\n          <Button variant=\"outline\" size=\"sm\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Recruitment Center</h1>\n          <p className=\"text-muted-foreground\">\n            Complete recruitment management system\n          </p>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Jobs</CardTitle>\n            <Briefcase className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-hr-primary\">{activeJobs.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {jobs.filter((j: any) => j.status === 'draft').length} in draft\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">New Applications</CardTitle>\n            <User className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{newApplications.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {underReview.length} under review\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Interviews</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{todayInterviews.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {interviews.filter((int: any) => int.status === 'scheduled').length} scheduled\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Offers</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{jobOffers.filter((offer: any) => offer.status === 'pending').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {jobOffers.filter((offer: any) => offer.status === 'accepted').length} accepted\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Actions */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5 text-hr-primary\" />\n              Post New Job\n            </CardTitle>\n            <CardDescription>Create and publish job openings</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/jobs\">\n              <Button className=\"w-full bg-hr-primary hover:bg-hr-primary/90\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create Job Posting\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Search className=\"h-5 w-5 text-blue-600\" />\n              Candidate Search\n            </CardTitle>\n            <CardDescription>Find and download candidate resumes</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex gap-2\">\n              <Input \n                placeholder=\"Search by name, email, skills...\" \n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleCandidateSearch()}\n              />\n              <Button size=\"sm\" variant=\"outline\" onClick={handleCandidateSearch}>\n                <Search className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <Button className=\"w-full\" variant=\"outline\" onClick={handleDownloadResumes}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Download All Resumes ({jobApplications.filter((app: any) => app.resume).length})\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5 text-green-600\" />\n              Quick Actions\n            </CardTitle>\n            <CardDescription>Bulk operations and shortcuts</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <Button \n              className=\"w-full justify-start\" \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={handleBulkAccept}\n              disabled={selectedApplications.length === 0}\n            >\n              <CheckCircle className=\"mr-2 h-4 w-4\" />\n              Bulk Accept ({selectedApplications.length} selected)\n            </Button>\n            <Button \n              className=\"w-full justify-start\" \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={handleBulkReject}\n              disabled={selectedApplications.length === 0}\n            >\n              <XCircle className=\"mr-2 h-4 w-4\" />\n              Bulk Reject ({selectedApplications.length} selected)\n            </Button>\n            <Link href=\"/jobs\">\n              <Button className=\"w-full justify-start\" size=\"sm\" variant=\"outline\">\n                <Briefcase className=\"mr-2 h-4 w-4\" />\n                Manage Job Postings\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recruitment Pipeline */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recruitment Pipeline</CardTitle>\n          <CardDescription>Track applications through the hiring process</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={selectedStatus} onValueChange={setSelectedStatus}>\n            <TabsList className=\"grid w-full grid-cols-6\">\n              <TabsTrigger value=\"all\">All ({jobApplications.length})</TabsTrigger>\n              <TabsTrigger value=\"applied\">New ({newApplications.length})</TabsTrigger>\n              <TabsTrigger value=\"under_review\">Review ({underReview.length})</TabsTrigger>\n              <TabsTrigger value=\"interviewed\">Interviewed</TabsTrigger>\n              <TabsTrigger value=\"offered\">Offered</TabsTrigger>\n              <TabsTrigger value=\"hired\">Hired</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value={selectedStatus} className=\"mt-6\">\n              <div className=\"space-y-4\">\n                {filteredApplications.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No applications found\n                  </div>\n                ) : (\n                  filteredApplications.map((application: any) => (\n                    <Card key={application.id} className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"h-10 w-10 rounded-full bg-hr-primary/10 flex items-center justify-center\">\n                              <User className=\"h-5 w-5 text-hr-primary\" />\n                            </div>\n                            <div>\n                              <h3 className=\"font-semibold\">{application.applicantName}</h3>\n                              <p className=\"text-sm text-muted-foreground\">{application.applicantEmail}</p>\n                            </div>\n                            <Badge variant={\n                              application.status === 'applied' ? 'default' :\n                              application.status === 'under_review' ? 'secondary' :\n                              application.status === 'hired' ? 'default' : 'outline'\n                            }>\n                              {application.status.replace('_', ' ')}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <span className=\"flex items-center gap-1\">\n                              <Briefcase className=\"h-3 w-3\" />\n                              {jobs.find((job: any) => job.id === application.jobId)?.title}\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              Applied {new Date(application.appliedAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Eye className=\"mr-1 h-3 w-3\" />\n                                View\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle>Application Details</DialogTitle>\n                                <DialogDescription>\n                                  {application.applicantName} - {jobs.find((job: any) => job.id === application.jobId)?.title}\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label>Cover Letter</Label>\n                                  <p className=\"text-sm mt-1\">{application.coverLetter || \"No cover letter provided\"}</p>\n                                </div>\n                                <div>\n                                  <Label>Resume</Label>\n                                  <Button size=\"sm\" variant=\"outline\" className=\"mt-1\">\n                                    <Download className=\"mr-1 h-3 w-3\" />\n                                    Download Resume\n                                  </Button>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n\n                          <Select \n                            value={application.status} \n                            onValueChange={(status) => updateApplicationMutation.mutate({ id: application.id, status })}\n                          >\n                            <SelectTrigger className=\"w-32\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"applied\">Applied</SelectItem>\n                              <SelectItem value=\"under_review\">Under Review</SelectItem>\n                              <SelectItem value=\"interviewed\">Interviewed</SelectItem>\n                              <SelectItem value=\"offered\">Offered</SelectItem>\n                              <SelectItem value=\"hired\">Hired</SelectItem>\n                              <SelectItem value=\"rejected\">Rejected</SelectItem>\n                            </SelectContent>\n                          </Select>\n\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\">\n                                <Calendar className=\"mr-1 h-3 w-3\" />\n                                Schedule\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Schedule Interview</DialogTitle>\n                                <DialogDescription>\n                                  Schedule an interview for {application.applicantName}\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label>Date & Time</Label>\n                                  <Input type=\"datetime-local\" />\n                                </div>\n                                <div>\n                                  <Label>Duration (minutes)</Label>\n                                  <Input type=\"number\" defaultValue=\"60\" />\n                                </div>\n                                <div>\n                                  <Label>Location/Link</Label>\n                                  <Input placeholder=\"Meeting room or video link\" />\n                                </div>\n                              </div>\n                              <DialogFooter>\n                                <Button>Schedule Interview</Button>\n                              </DialogFooter>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20361},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Building2, User, ArrowLeft } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { authService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nconst adminSignupSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst employeeSignupSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype AdminSignupData = z.infer<typeof adminSignupSchema>;\ntype EmployeeSignupData = z.infer<typeof employeeSignupSchema>;\n\nexport default function SignupPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"admin\");\n\n  // No need to fetch companies or departments for employee signup\n\n  const adminForm = useForm<AdminSignupData>({\n    resolver: zodResolver(adminSignupSchema),\n  });\n\n  const employeeForm = useForm<EmployeeSignupData>({\n    resolver: zodResolver(employeeSignupSchema),\n  });\n\n  const adminSignupMutation = useMutation({\n    mutationFn: async (data: AdminSignupData) => {\n      // Create admin user with simplified data\n      const userResponse = await apiRequest('POST', '/api/users/admin-signup', {\n        name: data.name,\n        email: data.email,\n        password: data.password,\n      });\n      return userResponse.json();\n    },\n    onSuccess: async (data) => {\n      toast({ title: \"Account created successfully! Please log in.\" });\n      setLocation('/login');\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Signup failed\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const employeeSignupMutation = useMutation({\n    mutationFn: async (data: EmployeeSignupData) => {\n      // Create employee user with simplified data\n      const userResponse = await apiRequest('POST', '/api/users/employee-signup', {\n        name: data.name,\n        email: data.email,\n        password: data.password,\n      });\n      \n      if (!userResponse.ok) {\n        const errorData = await userResponse.json().catch(() => ({ message: 'Unknown error' }));\n        throw new Error(errorData.message || 'Signup failed');\n      }\n      \n      return await userResponse.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Employee account created successfully! You can now browse and apply for jobs.\" });\n      setLocation('/login');\n    },\n    onError: (error: any) => {\n      console.error('Frontend: Signup mutation error:', error);\n      toast({ \n        title: \"Signup failed\", \n        description: error.message || \"Please try again\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const onAdminSubmit = (data: AdminSignupData) => {\n    adminSignupMutation.mutate(data);\n  };\n\n  const onEmployeeSubmit = (data: EmployeeSignupData) => {\n    employeeSignupMutation.mutate(data);\n  };\n\n  const isLoading = adminSignupMutation.isPending || employeeSignupMutation.isPending;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-hr-background to-hr-background/80 p-4\">\n      <Card className=\"w-full max-w-2xl shadow-2xl border-0\">\n        <CardHeader className=\"text-center space-y-2 pb-6\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-hr-primary/10 p-3 rounded-full\">\n              <Building2 className=\"h-8 w-8 text-hr-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-hr-text-primary\">\n            Create Your Account\n          </CardTitle>\n          <CardDescription className=\"text-hr-text-secondary\">\n            Join our HR management platform\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"admin\" className=\"flex items-center gap-2\">\n                <Building2 className=\"h-4 w-4\" />\n                Admin (Company Owner)\n              </TabsTrigger>\n              <TabsTrigger value=\"employee\" className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                Employee\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"admin\" className=\"space-y-4 mt-6\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">Admin Registration</h4>\n                <p className=\"text-sm text-blue-700\">\n                  As an admin, you'll create a new company and become its administrator. \n                  You'll be able to manage employees, departments, and company settings.\n                </p>\n              </div>\n\n              <form onSubmit={adminForm.handleSubmit(onAdminSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"admin-name\">Full Name</Label>\n                  <Input\n                    id=\"admin-name\"\n                    {...adminForm.register(\"name\")}\n                    disabled={isLoading}\n                    placeholder=\"Enter your full name\"\n                  />\n                  {adminForm.formState.errors.name && (\n                    <p className=\"text-sm text-red-600\">{adminForm.formState.errors.name.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"admin-email\">Email</Label>\n                  <Input\n                    id=\"admin-email\"\n                    type=\"email\"\n                    {...adminForm.register(\"email\")}\n                    disabled={isLoading}\n                    placeholder=\"Enter your email address\"\n                  />\n                  {adminForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600\">{adminForm.formState.errors.email.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"admin-password\">Password</Label>\n                  <Input\n                    id=\"admin-password\"\n                    type=\"password\"\n                    {...adminForm.register(\"password\")}\n                    disabled={isLoading}\n                    placeholder=\"Create a secure password\"\n                  />\n                  {adminForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600\">{adminForm.formState.errors.password.message}</p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-hr-primary hover:bg-hr-primary/90\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Creating Account...\" : \"Create Admin Account\"}\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"employee\" className=\"space-y-4 mt-6\">\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n                <h4 className=\"font-medium text-green-900 mb-2\">Employee Registration</h4>\n                <p className=\"text-sm text-green-700\">\n                  Create your employee account to browse and apply for jobs across different companies. \n                  You can update your profile later and request permissions from company admins.\n                </p>\n              </div>\n\n              <form onSubmit={employeeForm.handleSubmit(onEmployeeSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"emp-name\">Full Name</Label>\n                  <Input\n                    id=\"emp-name\"\n                    {...employeeForm.register(\"name\")}\n                    disabled={isLoading}\n                    placeholder=\"Enter your full name\"\n                  />\n                  {employeeForm.formState.errors.name && (\n                    <p className=\"text-sm text-red-600\">{employeeForm.formState.errors.name.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"emp-email\">Email</Label>\n                  <Input\n                    id=\"emp-email\"\n                    type=\"email\"\n                    {...employeeForm.register(\"email\")}\n                    disabled={isLoading}\n                    placeholder=\"Enter your email address\"\n                  />\n                  {employeeForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600\">{employeeForm.formState.errors.email.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"emp-password\">Password</Label>\n                  <Input\n                    id=\"emp-password\"\n                    type=\"password\"\n                    {...employeeForm.register(\"password\")}\n                    disabled={isLoading}\n                    placeholder=\"Create a secure password\"\n                  />\n                  {employeeForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600\">{employeeForm.formState.errors.password.message}</p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-hr-success hover:bg-hr-success/90\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Creating Account...\" : \"Create Employee Account\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-6 text-center\">\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n              <Link href=\"/login\" className=\"flex items-center gap-1 text-hr-primary hover:underline\">\n                <ArrowLeft className=\"h-3 w-3\" />\n                Back to Login\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11091},"client/src/pages/system-admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { Users, Building2, Shield, Activity, TrendingUp, AlertCircle } from \"lucide-react\";\n\nexport default function SystemAdminDashboard() {\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/admin/companies'],\n  });\n\n  const { data: allUsers = [] } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  const { data: permissionRequests = [] } = useQuery({\n    queryKey: ['/api/permission-requests'],\n  });\n\n  const { data: activities = [] } = useQuery({\n    queryKey: ['/api/activities'],\n  });\n\n  const totalUsers = allUsers.length;\n  const activeCompanies = companies.filter((c: any) => c.status === 'active').length;\n  const pendingRequests = permissionRequests.filter((r: any) => r.status === 'pending').length;\n  const recentActivities = activities.slice(0, 10);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">System Administration</h1>\n          <p className=\"text-muted-foreground\">\n            Manage all companies, users, and system-wide settings\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Link href=\"/admin/companies\">\n            <Button>\n              <Building2 className=\"mr-2 h-4 w-4\" />\n              Manage Companies\n            </Button>\n          </Link>\n          <Link href=\"/admin/users\">\n            <Button variant=\"outline\">\n              <Users className=\"mr-2 h-4 w-4\" />\n              Manage Users\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Companies</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{companies.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {activeCompanies} active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across all companies\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Requests</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pendingRequests}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Permission requests\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">Healthy</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All systems operational\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building2 className=\"h-5 w-5\" />\n              Companies Overview\n            </CardTitle>\n            <CardDescription>\n              Quick overview of all registered companies\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {companies.slice(0, 5).map((company: any) => (\n              <div key={company.id} className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">{company.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">{company.email}</p>\n                </div>\n                <Badge variant={company.status === 'active' ? 'default' : 'secondary'}>\n                  {company.status}\n                </Badge>\n              </div>\n            ))}\n            {companies.length > 5 && (\n              <div className=\"text-center\">\n                <Link href=\"/admin/companies\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    View All Companies\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Permission Requests\n            </CardTitle>\n            <CardDescription>\n              Recent permission requests requiring review\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {pendingRequests > 0 ? (\n              permissionRequests\n                .filter((r: any) => r.status === 'pending')\n                .slice(0, 5)\n                .map((request: any) => (\n                  <div key={request.id} className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{request.permissionType.replace('_', ' ')}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        User ID: {request.userId}\n                      </p>\n                    </div>\n                    <Badge variant=\"outline\">Pending</Badge>\n                  </div>\n                ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-4\">\n                No pending permission requests\n              </p>\n            )}\n            {pendingRequests > 5 && (\n              <div className=\"text-center\">\n                <Link href=\"/admin/permissions\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    View All Requests\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Recent System Activity\n            </CardTitle>\n            <CardDescription>\n              Latest actions performed across all companies\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {recentActivities.length > 0 ? (\n              recentActivities.map((activity: any) => (\n                <div key={activity.id} className=\"flex items-start justify-between border-l-2 border-blue-500 pl-4\">\n                  <div>\n                    <p className=\"font-medium\">{activity.action.replace('_', ' ')}</p>\n                    <p className=\"text-sm text-muted-foreground\">{activity.details}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(activity.createdAt).toLocaleString()}\n                    </p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"ml-2\">\n                    {activity.entityType}\n                  </Badge>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-muted-foreground py-4\">\n                No recent activities\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8393},"client/src/pages/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { UserPlus, Edit, Trash2, Search } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function UserManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/admin/companies'],\n    enabled: user?.role === 'system_admin',\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: (userData: any) => apiRequest('/api/users', { method: 'POST', body: userData }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsCreateDialogOpen(false);\n      toast({ title: \"User created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create user\", variant: \"destructive\" });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest(`/api/users/${id}`, { method: 'PUT', body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({ title: \"User updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update user\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/users/${id}`, { method: 'DELETE' }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({ title: \"User deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete user\", variant: \"destructive\" });\n    },\n  });\n\n  const filteredUsers = users.filter((u: any) =>\n    u.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    u.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleCreateUser = (formData: FormData) => {\n    const userData = {\n      username: formData.get('username'),\n      email: formData.get('email'),\n      password: formData.get('password'),\n      role: formData.get('role'),\n      companyId: user?.role === 'system_admin' ? \n        parseInt(formData.get('companyId') as string) : \n        user?.companyId,\n    };\n    createUserMutation.mutate(userData);\n  };\n\n  const toggleUserStatus = (userId: number, isActive: boolean) => {\n    updateUserMutation.mutate({ id: userId, isActive: !isActive });\n  };\n\n  if (isLoading) {\n    return <div>Loading users...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">User Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage user accounts and permissions\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New User</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={(e) => {\n              e.preventDefault();\n              handleCreateUser(new FormData(e.currentTarget));\n            }} className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Username</label>\n                <Input name=\"username\" required />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Email</label>\n                <Input name=\"email\" type=\"email\" required />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Password</label>\n                <Input name=\"password\" type=\"password\" required />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Role</label>\n                <Select name=\"role\" required>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {user?.role === 'system_admin' && (\n                      <SelectItem value=\"system_admin\">System Admin</SelectItem>\n                    )}\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                    <SelectItem value=\"employee\">Employee</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              {user?.role === 'system_admin' && (\n                <div>\n                  <label className=\"text-sm font-medium\">Company</label>\n                  <Select name=\"companyId\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select company\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {companies.map((company: any) => (\n                        <SelectItem key={company.id} value={company.id.toString()}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n              <div className=\"flex gap-2\">\n                <Button type=\"submit\" disabled={createUserMutation.isPending}>\n                  {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Users</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search users...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>User</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Company</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredUsers.map((user: any) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{user.username}</div>\n                      <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={\n                      user.role === 'system_admin' ? 'destructive' :\n                      user.role === 'admin' ? 'default' : 'secondary'\n                    }>\n                      {user.role.replace('_', ' ')}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {user.companyId ? `Company ${user.companyId}` : 'System User'}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={user.isActive ? 'default' : 'secondary'}>\n                      {user.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {new Date(user.createdAt).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => toggleUserStatus(user.id, user.isActive)}\n                        disabled={updateUserMutation.isPending}\n                      >\n                        {user.isActive ? 'Deactivate' : 'Activate'}\n                      </Button>\n                      {(user?.role === 'system_admin' || user.companyId === user?.companyId) && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => deleteUserMutation.mutate(user.id)}\n                          disabled={deleteUserMutation.isPending}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9871},"client/src/pages/view-employee.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { authService, apiRequestWithAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, User, Briefcase, MapPin, CreditCard, Clock, Users, Edit, Phone, Mail } from \"lucide-react\";\nimport { type Employee, type Department } from \"@shared/schema\";\n\ninterface ViewEmployeePageProps {\n  params: { id: string };\n}\n\nexport default function ViewEmployeePage({ params }: ViewEmployeePageProps) {\n  const [, setLocation] = useLocation();\n  const employeeId = parseInt(params.id);\n  \n  const user = authService.getUser();\n  const companyId = user?.companyId;\n\n  // Fetch employee data\n  const { data: employee, isLoading: employeeLoading } = useQuery<Employee>({\n    queryKey: [`/api/employees/${companyId}/${employeeId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/employees/${companyId}/${employeeId}`);\n      return response.json();\n    },\n    enabled: !!companyId && !!employeeId,\n  });\n\n  // Fetch departments\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [`/api/departments/${companyId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/departments/${companyId}`);\n      return response.json();\n    },\n    enabled: !!companyId,\n  });\n\n  const getDepartmentName = (departmentId: number | null) => {\n    if (!departmentId) return 'Not assigned';\n    const department = departments.find(d => d.id === departmentId);\n    return department?.name || 'Unknown Department';\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { label: 'Active', className: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' },\n      inactive: { label: 'Inactive', className: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200' },\n      probation: { label: 'Probation', className: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' },\n      terminated: { label: 'Terminated', className: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.inactive;\n    return <Badge className={config.className}>{config.label}</Badge>;\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return 'Not specified';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  if (employeeLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  if (!employee) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">Employee Not Found</h2>\n          <p className=\"text-gray-600 mb-4\">The employee you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation('/admin/employees')}>\n            Back to Employees\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation('/admin/employees')}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Employees\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">\n              {employee.firstName} {employee.lastName}\n            </h1>\n            <div className=\"flex items-center gap-3 mt-1\">\n              <p className=\"text-muted-foreground\">Employee ID: {employee.employeeId}</p>\n              {getStatusBadge(employee.status)}\n            </div>\n          </div>\n        </div>\n        <Button\n          onClick={() => setLocation(`/admin/employees/${employeeId}/edit`)}\n          className=\"flex items-center gap-2 bg-blue-600 hover:bg-blue-700\"\n        >\n          <Edit className=\"h-4 w-4\" />\n          Edit Employee\n        </Button>\n      </div>\n\n      {/* Employee Details */}\n      <Tabs defaultValue=\"personal\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"personal\" className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Personal\n          </TabsTrigger>\n          <TabsTrigger value=\"employment\" className=\"flex items-center gap-2\">\n            <Briefcase className=\"h-4 w-4\" />\n            Employment\n          </TabsTrigger>\n          <TabsTrigger value=\"contact\" className=\"flex items-center gap-2\">\n            <MapPin className=\"h-4 w-4\" />\n            Contact\n          </TabsTrigger>\n          <TabsTrigger value=\"payroll\" className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4\" />\n            Payroll\n          </TabsTrigger>\n          <TabsTrigger value=\"time\" className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            Time Office\n          </TabsTrigger>\n          <TabsTrigger value=\"emergency\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Emergency\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Personal Information */}\n        <TabsContent value=\"personal\">\n          <Card>\n            <CardHeader className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950 dark:to-indigo-950\">\n              <CardTitle className=\"text-blue-700 dark:text-blue-300\">Personal Information</CardTitle>\n              <CardDescription>Basic employee details and identification</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6 pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">First Name</h4>\n                  <p className=\"text-lg font-medium\">{employee.firstName}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Last Name</h4>\n                  <p className=\"text-lg font-medium\">{employee.lastName}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Employee ID</h4>\n                  <p className=\"text-lg font-medium\">{employee.employeeId}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Email</h4>\n                  <div className=\"flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4 text-gray-400\" />\n                    <p className=\"text-lg\">{employee.email}</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Phone</h4>\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4 text-gray-400\" />\n                    <p className=\"text-lg\">{employee.phone || 'Not provided'}</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Date of Birth</h4>\n                  <p className=\"text-lg\">{formatDate(employee.dateOfBirth)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Employment Information */}\n        <TabsContent value=\"employment\">\n          <Card>\n            <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950 dark:to-emerald-950\">\n              <CardTitle className=\"text-green-700 dark:text-green-300\">Employment Information</CardTitle>\n              <CardDescription>Job role and department details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6 pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Position</h4>\n                  <p className=\"text-lg font-medium\">{employee.position || 'Not specified'}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Department</h4>\n                  <p className=\"text-lg\">{getDepartmentName(employee.departmentId)}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Status</h4>\n                  <div>{getStatusBadge(employee.status)}</div>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Hire Date</h4>\n                  <p className=\"text-lg\">{formatDate(employee.hireDate)}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Manager</h4>\n                  <p className=\"text-lg\">{employee.managerId ? 'Assigned' : 'Not assigned'}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Contact Information */}\n        <TabsContent value=\"contact\">\n          <Card>\n            <CardHeader className=\"bg-gradient-to-r from-purple-50 to-violet-50 dark:from-purple-950 dark:to-violet-950\">\n              <CardTitle className=\"text-purple-700 dark:text-purple-300\">Contact Information</CardTitle>\n              <CardDescription>Address and location details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6 pt-6\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Address</h4>\n                <p className=\"text-lg whitespace-pre-line\">{employee.address || 'Not provided'}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Payroll Information */}\n        <TabsContent value=\"payroll\">\n          <Card>\n            <CardHeader className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950 dark:to-orange-950\">\n              <CardTitle className=\"text-yellow-700 dark:text-yellow-300\">Payroll Information</CardTitle>\n              <CardDescription>Salary and compensation details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6 pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Salary</h4>\n                  <p className=\"text-lg font-medium\">\n                    {employee.salary ? `$${parseFloat(employee.salary).toLocaleString()}` : 'Not specified'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Time Office Policy */}\n        <TabsContent value=\"time\">\n          <Card>\n            <CardHeader className=\"bg-gradient-to-r from-teal-50 to-cyan-50 dark:from-teal-950 dark:to-cyan-950\">\n              <CardTitle className=\"text-teal-700 dark:text-teal-300\">Time Office Policy</CardTitle>\n              <CardDescription>Working hours and attendance policies</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6 pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Duty Timing</h4>\n                  <p className=\"text-lg font-medium\">09:00 AM - 06:00 PM</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Late Arrival Allowed</h4>\n                  <p className=\"text-lg\">15 minutes</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Permissible Flexibility</h4>\n                  <p className=\"text-lg\">30 minutes</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Weekly Offs</h4>\n                  <p className=\"text-lg\">Saturday, Sunday</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Overtime</h4>\n                  <p className=\"text-lg\">Not Applicable</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Emergency Contact */}\n        <TabsContent value=\"emergency\">\n          <Card>\n            <CardHeader className=\"bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-950 dark:to-pink-950\">\n              <CardTitle className=\"text-red-700 dark:text-red-300\">Emergency Contact</CardTitle>\n              <CardDescription>Emergency contact information</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6 pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Emergency Contact Name</h4>\n                  <p className=\"text-lg\">{employee.emergencyContact || 'Not provided'}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm text-gray-500 uppercase tracking-wide\">Emergency Contact Phone</h4>\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4 text-gray-400\" />\n                    <p className=\"text-lg\">{employee.emergencyPhone || 'Not provided'}</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":15218},"client/src/components/forms/employee-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertEmployeeSchema, type InsertEmployee, type Employee, type Department } from \"@shared/schema\";\nimport { authService, apiRequestWithAuth } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst employeeFormSchema = insertEmployeeSchema.extend({\n  hireDate: z.string().optional(),\n  dateOfBirth: z.string().optional(),\n});\n\ntype EmployeeFormData = z.infer<typeof employeeFormSchema>;\n\ninterface EmployeeFormProps {\n  employee?: Employee | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function EmployeeForm({ employee, onSuccess, onCancel }: EmployeeFormProps) {\n  const { toast } = useToast();\n  const user = authService.getUser();\n  const companyId = user?.companyId!;\n\n  // Fetch departments for dropdown\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [`/api/departments/${companyId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/departments/${companyId}`);\n      return response.json();\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    formState: { errors, isSubmitting },\n  } = useForm<EmployeeFormData>({\n    resolver: zodResolver(employeeFormSchema),\n    defaultValues: employee ? {\n      ...employee,\n      hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : '',\n      dateOfBirth: employee.dateOfBirth ? new Date(employee.dateOfBirth).toISOString().split('T')[0] : '',\n    } : {\n      userId: 0, // This will be handled on the backend\n      companyId,\n      employeeId: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      position: '',\n      salary: '',\n      status: 'active',\n      address: '',\n      emergencyContact: '',\n      emergencyPhone: '',\n    },\n  });\n\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: EmployeeFormData) => {\n      const processedData = {\n        ...data,\n        hireDate: data.hireDate ? new Date(data.hireDate) : null,\n        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth) : null,\n        userId: 0, // Backend will handle user creation\n      };\n      \n      const response = await apiRequestWithAuth('POST', '/api/employees', processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Employee created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEmployeeMutation = useMutation({\n    mutationFn: async (data: EmployeeFormData) => {\n      const processedData = {\n        ...data,\n        hireDate: data.hireDate ? new Date(data.hireDate) : null,\n        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth) : null,\n      };\n      \n      const response = await apiRequestWithAuth('PUT', `/api/employees/${employee!.id}`, processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Employee updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EmployeeFormData) => {\n    if (employee) {\n      updateEmployeeMutation.mutate(data);\n    } else {\n      createEmployeeMutation.mutate(data);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"firstName\">First Name *</Label>\n          <Input\n            id=\"firstName\"\n            {...register(\"firstName\")}\n            placeholder=\"John\"\n          />\n          {errors.firstName && (\n            <p className=\"text-sm text-hr-accent\">{errors.firstName.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"lastName\">Last Name *</Label>\n          <Input\n            id=\"lastName\"\n            {...register(\"lastName\")}\n            placeholder=\"Doe\"\n          />\n          {errors.lastName && (\n            <p className=\"text-sm text-hr-accent\">{errors.lastName.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email *</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            {...register(\"email\")}\n            placeholder=\"john.doe@company.com\"\n          />\n          {errors.email && (\n            <p className=\"text-sm text-hr-accent\">{errors.email.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"employeeId\">Employee ID *</Label>\n          <Input\n            id=\"employeeId\"\n            {...register(\"employeeId\")}\n            placeholder=\"EMP001\"\n          />\n          {errors.employeeId && (\n            <p className=\"text-sm text-hr-accent\">{errors.employeeId.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"phone\">Phone</Label>\n          <Input\n            id=\"phone\"\n            {...register(\"phone\")}\n            placeholder=\"+1 (555) 123-4567\"\n          />\n          {errors.phone && (\n            <p className=\"text-sm text-hr-accent\">{errors.phone.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"position\">Position</Label>\n          <Input\n            id=\"position\"\n            {...register(\"position\")}\n            placeholder=\"Software Engineer\"\n          />\n          {errors.position && (\n            <p className=\"text-sm text-hr-accent\">{errors.position.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"departmentId\">Department</Label>\n          <Select\n            value={watch(\"departmentId\")?.toString() || \"\"}\n            onValueChange={(value) => setValue(\"departmentId\", value ? parseInt(value) : undefined)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select department\" />\n            </SelectTrigger>\n            <SelectContent>\n              {departments.map((dept) => (\n                <SelectItem key={dept.id} value={dept.id.toString()}>\n                  {dept.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"salary\">Salary</Label>\n          <Input\n            id=\"salary\"\n            type=\"number\"\n            {...register(\"salary\")}\n            placeholder=\"50000\"\n          />\n          {errors.salary && (\n            <p className=\"text-sm text-hr-accent\">{errors.salary.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"hireDate\">Hire Date</Label>\n          <Input\n            id=\"hireDate\"\n            type=\"date\"\n            {...register(\"hireDate\")}\n          />\n          {errors.hireDate && (\n            <p className=\"text-sm text-hr-accent\">{errors.hireDate.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n          <Input\n            id=\"dateOfBirth\"\n            type=\"date\"\n            {...register(\"dateOfBirth\")}\n          />\n          {errors.dateOfBirth && (\n            <p className=\"text-sm text-hr-accent\">{errors.dateOfBirth.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"status\">Status</Label>\n          <Select\n            value={watch(\"status\") || \"active\"}\n            onValueChange={(value) => setValue(\"status\", value as any)}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"probation\">Probation</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n              <SelectItem value=\"terminated\">Terminated</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"address\">Address</Label>\n          <Textarea\n            id=\"address\"\n            {...register(\"address\")}\n            placeholder=\"123 Main St, City, State 12345\"\n            rows={2}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n            <Input\n              id=\"emergencyContact\"\n              {...register(\"emergencyContact\")}\n              placeholder=\"Jane Doe\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"emergencyPhone\">Emergency Phone</Label>\n            <Input\n              id=\"emergencyPhone\"\n              {...register(\"emergencyPhone\")}\n              placeholder=\"+1 (555) 987-6543\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"bg-hr-primary hover:bg-hr-primary/90\"\n        >\n          {isSubmitting\n            ? employee\n              ? \"Updating...\"\n              : \"Creating...\"\n            : employee\n            ? \"Update Employee\"\n            : \"Create Employee\"\n          }\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":10342},"client/src/components/forms/job-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { insertJobSchema, type InsertJob, type Job, type Department } from \"@shared/schema\";\nimport { authService, apiRequestWithAuth } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\n// Form schema that matches the form inputs but transforms to database format\nconst jobFormSchema = z.object({\n  companyId: z.number(),\n  title: z.string().min(1, \"Job title is required\"),\n  description: z.string().min(1, \"Job description is required\"),\n  departmentId: z.string().optional().transform(val => \n    val && val !== '' ? parseInt(val) : null\n  ),\n  requirements: z.string().optional(),\n  salaryMin: z.string().optional(),\n  salaryMax: z.string().optional(),\n  location: z.string().optional(),\n  employmentType: z.string().default('full-time'),\n  status: z.string().default('draft'),\n  postedAt: z.string().optional(),\n  closingDate: z.string().optional(),\n});\n\ntype JobFormData = z.infer<typeof jobFormSchema>;\n\ninterface JobFormProps {\n  job?: Job | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function JobForm({ job, onSuccess, onCancel }: JobFormProps) {\n  const { toast } = useToast();\n  const user = authService.getUser();\n  const companyId = user?.companyId!;\n\n  // Fetch departments for dropdown\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [`/api/departments/${companyId}`],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/departments/${companyId}`);\n      return response.json();\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    formState: { errors, isSubmitting },\n  } = useForm<JobFormData>({\n    resolver: zodResolver(jobFormSchema),\n    defaultValues: job ? {\n      ...job,\n      departmentId: job.departmentId?.toString() || '',\n      salaryMin: job.salaryMin || '',\n      salaryMax: job.salaryMax || '',\n      postedAt: job.postedAt ? new Date(job.postedAt).toISOString().split('T')[0] : '',\n      closingDate: job.closingDate ? new Date(job.closingDate).toISOString().split('T')[0] : '',\n    } : {\n      companyId,\n      title: '',\n      description: '',\n      requirements: '',\n      salaryMin: '',\n      salaryMax: '',\n      location: '',\n      employmentType: 'full-time',\n      status: 'draft',\n      departmentId: '',\n      postedAt: '',\n      closingDate: '',\n    },\n  });\n\n  const createJobMutation = useMutation({\n    mutationFn: async (data: JobFormData) => {\n      console.log('Form data:', data);\n      console.log('User:', user);\n      console.log('Token:', authService.getToken());\n      \n      const processedData = {\n        companyId: data.companyId,\n        title: data.title,\n        description: data.description,\n        departmentId: data.departmentId || null,\n        requirements: data.requirements || null,\n        salaryMin: data.salaryMin && data.salaryMin.trim() !== '' ? data.salaryMin : null,\n        salaryMax: data.salaryMax && data.salaryMax.trim() !== '' ? data.salaryMax : null,\n        location: data.location || null,\n        employmentType: data.employmentType || 'full-time',\n        status: data.status || 'draft',\n        postedAt: data.postedAt ? new Date(data.postedAt) : null,\n        closingDate: data.closingDate ? new Date(data.closingDate) : null,\n        postedBy: user?.id,\n      };\n      \n      console.log('Processed data:', processedData);\n      \n      const response = await apiRequestWithAuth('POST', '/api/jobs', processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Job posted successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateJobMutation = useMutation({\n    mutationFn: async (data: JobFormData) => {\n      const processedData = {\n        companyId: data.companyId,\n        title: data.title,\n        description: data.description,\n        departmentId: data.departmentId || null,\n        requirements: data.requirements || null,\n        salaryMin: data.salaryMin && data.salaryMin.trim() !== '' ? data.salaryMin : null,\n        salaryMax: data.salaryMax && data.salaryMax.trim() !== '' ? data.salaryMax : null,\n        location: data.location || null,\n        employmentType: data.employmentType || 'full-time',\n        status: data.status || 'draft',\n        postedAt: data.postedAt ? new Date(data.postedAt) : null,\n        closingDate: data.closingDate ? new Date(data.closingDate) : null,\n        postedBy: user?.id,\n      };\n      \n      const response = await apiRequestWithAuth('PUT', `/api/jobs/${job!.id}`, processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Job updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: JobFormData) => {\n    if (job) {\n      updateJobMutation.mutate(data);\n    } else {\n      createJobMutation.mutate(data);\n    }\n  };\n\n  const isPending = createJobMutation.isPending || updateJobMutation.isPending;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"title\">Job Title *</Label>\n          <Input\n            id=\"title\"\n            {...register(\"title\")}\n            placeholder=\"Senior Software Engineer\"\n            disabled={isPending}\n          />\n          {errors.title && (\n            <p className=\"text-sm text-hr-accent\">{errors.title.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"departmentId\">Department</Label>\n          <Select\n            value={watch(\"departmentId\")?.toString() || \"\"}\n            onValueChange={(value) => setValue(\"departmentId\", value ? parseInt(value) : undefined)}\n            disabled={isPending}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select department\" />\n            </SelectTrigger>\n            <SelectContent>\n              {departments.map((dept) => (\n                <SelectItem key={dept.id} value={dept.id.toString()}>\n                  {dept.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"location\">Location</Label>\n          <Input\n            id=\"location\"\n            {...register(\"location\")}\n            placeholder=\"New York, NY\"\n            disabled={isPending}\n          />\n          {errors.location && (\n            <p className=\"text-sm text-hr-accent\">{errors.location.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"employmentType\">Employment Type</Label>\n          <Select\n            value={watch(\"employmentType\") || \"full-time\"}\n            onValueChange={(value) => setValue(\"employmentType\", value)}\n            disabled={isPending}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"full-time\">Full-time</SelectItem>\n              <SelectItem value=\"part-time\">Part-time</SelectItem>\n              <SelectItem value=\"contract\">Contract</SelectItem>\n              <SelectItem value=\"temporary\">Temporary</SelectItem>\n              <SelectItem value=\"internship\">Internship</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"salaryMin\">Minimum Salary</Label>\n          <Input\n            id=\"salaryMin\"\n            type=\"number\"\n            {...register(\"salaryMin\")}\n            placeholder=\"50000\"\n            disabled={isPending}\n          />\n          {errors.salaryMin && (\n            <p className=\"text-sm text-hr-accent\">{errors.salaryMin.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"salaryMax\">Maximum Salary</Label>\n          <Input\n            id=\"salaryMax\"\n            type=\"number\"\n            {...register(\"salaryMax\")}\n            placeholder=\"80000\"\n            disabled={isPending}\n          />\n          {errors.salaryMax && (\n            <p className=\"text-sm text-hr-accent\">{errors.salaryMax.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"postedAt\">Posted Date</Label>\n          <Input\n            id=\"postedAt\"\n            type=\"date\"\n            {...register(\"postedAt\")}\n            disabled={isPending}\n          />\n          {errors.postedAt && (\n            <p className=\"text-sm text-hr-accent\">{errors.postedAt.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"closingDate\">Closing Date</Label>\n          <Input\n            id=\"closingDate\"\n            type=\"date\"\n            {...register(\"closingDate\")}\n            disabled={isPending}\n          />\n          {errors.closingDate && (\n            <p className=\"text-sm text-hr-accent\">{errors.closingDate.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2 md:col-span-2\">\n          <Label htmlFor=\"status\">Status</Label>\n          <Select\n            value={watch(\"status\") || \"draft\"}\n            onValueChange={(value) => setValue(\"status\", value as any)}\n            disabled={isPending}\n          >\n            <SelectTrigger className=\"md:w-1/2\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"draft\">Draft</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"closed\">Closed</SelectItem>\n              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"description\">Job Description *</Label>\n          <Textarea\n            id=\"description\"\n            {...register(\"description\")}\n            placeholder=\"Provide a detailed description of the role, responsibilities, and what makes this position exciting...\"\n            rows={6}\n            disabled={isPending}\n          />\n          {errors.description && (\n            <p className=\"text-sm text-hr-accent\">{errors.description.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"requirements\">Requirements</Label>\n          <Textarea\n            id=\"requirements\"\n            {...register(\"requirements\")}\n            placeholder=\"List the required qualifications, skills, experience, and education for this position...\"\n            rows={4}\n            disabled={isPending}\n          />\n          {errors.requirements && (\n            <p className=\"text-sm text-hr-accent\">{errors.requirements.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-2\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel} disabled={isPending}>\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          disabled={isPending}\n          className=\"bg-hr-primary hover:bg-hr-primary/90\"\n        >\n          {isPending\n            ? job\n              ? \"Updating...\"\n              : \"Creating...\"\n            : job\n            ? \"Update Job\"\n            : \"Post Job\"\n          }\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":12272},"client/src/components/layout/company-required-route.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building2, Search, FileText, AlertCircle, Calendar, Clock, DollarSign } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface CompanyRequiredRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function CompanyRequiredRoute({ children }: CompanyRequiredRouteProps) {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: employee } = useQuery({\n    queryKey: ['/api/employee/profile'],\n    enabled: !!user?.id && user?.role === 'employee',\n  });\n\n  const { data: publicJobs = [] } = useQuery({\n    queryKey: ['/api/jobs/public'],\n    enabled: !!user?.id && user?.role === 'employee',\n  });\n\n  // Check employee status by Aadhaar verification\n  const { data: employeeStatus, isLoading: statusLoading, error: statusError } = useQuery({\n    queryKey: ['/api/employee/aadhaar-status'],\n    enabled: !!user?.id && user?.role === 'employee',\n    staleTime: 0, // Always refetch to get latest status\n    refetchOnMount: true,\n  });\n\n  // Show loading while checking status\n  if (statusLoading || !employeeStatus) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <p>Checking employee status...</p>\n      </div>\n    </div>;\n  }\n\n  // Debug logging\n  console.log('CompanyRequiredRoute - employeeStatus:', employeeStatus);\n  console.log('CompanyRequiredRoute - aadhaarVerified:', employeeStatus?.aadhaarVerified);\n  console.log('CompanyRequiredRoute - isEmployeeInCompany:', employeeStatus?.isEmployeeInCompany);\n\n  // If employee is found in company database, allow access\n  if (employeeStatus?.aadhaarVerified === true && employeeStatus?.isEmployeeInCompany === true) {\n    console.log('CompanyRequiredRoute - Allowing access to HR features');\n    return <>{children}</>;\n  }\n\n  // If no company, show job search interface\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              <Search className=\"h-16 w-16 text-blue-600\" />\n            </div>\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Job Seeker Portal</h1>\n            <p className=\"text-lg text-gray-600 mt-2\">\n              Search and apply for jobs with companies\n            </p>\n          </div>\n        </div>\n\n        {/* Available Actions */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Job Search */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5 text-blue-600\" />\n                Available Jobs\n              </CardTitle>\n              <CardDescription>\n                Search and apply for available positions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {publicJobs.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {publicJobs.slice(0, 3).map((job: any) => (\n                      <div key={job.id} className=\"p-3 border rounded-lg\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-medium\">{job.title}</h4>\n                            <p className=\"text-sm text-gray-600\">{job.department}</p>\n                          </div>\n                          <Badge variant={job.status === 'active' ? 'default' : 'secondary'}>\n                            {job.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                    {publicJobs.length > 3 && (\n                      <p className=\"text-sm text-gray-500\">\n                        +{publicJobs.length - 3} more jobs available\n                      </p>\n                    )}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-500 text-center py-8\">\n                    No jobs available at the moment\n                  </p>\n                )}\n                <Link href=\"/jobs\">\n                  <Button className=\"w-full\">\n                    <Search className=\"mr-2 h-4 w-4\" />\n                    Browse All Jobs\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Profile Management */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-green-600\" />\n                Profile Management\n              </CardTitle>\n              <CardDescription>\n                Complete your profile while waiting for company assignment\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center p-2 border rounded\">\n                    <span className=\"text-sm\">Personal Information</span>\n                    <Badge variant=\"outline\">Available</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-2 border rounded\">\n                    <span className=\"text-sm\">Contact Details</span>\n                    <Badge variant=\"outline\">Available</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-2 border rounded\">\n                    <span className=\"text-sm\">Professional Details</span>\n                    <Badge variant=\"outline\">Available</Badge>\n                  </div>\n                </div>\n                <Link href=\"/profile\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <FileText className=\"mr-2 h-4 w-4\" />\n                    Update Profile\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contact Admin */}\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-4\">\n              <h3 className=\"text-lg font-medium text-blue-900\">Need Company Assignment?</h3>\n              <p className=\"text-blue-700\">\n                Contact your administrator or HR department to be assigned to a company and gain access to all HR features.\n              </p>\n              <div className=\"flex justify-center gap-4\">\n                <Button variant=\"outline\" onClick={() => setLocation('/jobs')}>\n                  Browse Jobs\n                </Button>\n                <Button variant=\"outline\" onClick={() => setLocation('/profile')}>\n                  Complete Profile\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7513},"client/src/components/layout/dashboard-layout.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { authService } from \"@/lib/auth\";\nimport Sidebar from \"./sidebar\";\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [location] = useLocation();\n  const user = authService.getUser();\n\n  // Get company data for sidebar\n  const { data: company } = useQuery({\n    queryKey: ['/api/companies', user?.companyId],\n    enabled: !!user?.companyId && user?.role !== 'system_admin',\n  });\n\n  // Don't show sidebar for login/signup pages\n  if (location === '/login' || location === '/signup') {\n    return <>{children}</>;\n  }\n\n  // Don't show sidebar for company setup pages\n  if (location === '/company-profile-setup' || location === '/company-approval-pending') {\n    return <>{children}</>;\n  }\n\n\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar companyName={company?.name || \"HR System\"} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"p-6\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":1235},"client/src/components/layout/header.tsx":{"content":"import { Search, Bell, Plus } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  onSearch?: (query: string) => void;\n  onAddNew?: () => void;\n  showAddButton?: boolean;\n}\n\nexport default function Header({ \n  title, \n  subtitle, \n  onSearch, \n  onAddNew, \n  showAddButton = true \n}: HeaderProps) {\n  return (\n    <header className=\"bg-white border-b border-gray-200 p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-hr-text-primary\">{title}</h1>\n          {subtitle && <p className=\"text-hr-neutral\">{subtitle}</p>}\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          {onSearch && (\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-hr-neutral\" />\n              <Input\n                placeholder=\"Search...\"\n                className=\"pl-10 w-64 focus:ring-hr-primary focus:border-hr-primary\"\n                onChange={(e) => onSearch(e.target.value)}\n              />\n            </div>\n          )}\n          \n          {/* Notifications */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <Bell className=\"h-4 w-4 text-hr-neutral\" />\n                <Badge \n                  variant=\"destructive\" \n                  className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center text-xs\"\n                >\n                  3\n                </Badge>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-80\">\n              <div className=\"p-4 border-b\">\n                <h3 className=\"font-semibold text-hr-text-primary\">Notifications</h3>\n              </div>\n              <div className=\"max-h-96 overflow-y-auto\">\n                <DropdownMenuItem className=\"p-4 border-b border-gray-100\">\n                  <div>\n                    <p className=\"text-sm font-medium text-hr-text-primary\">\n                      New job application received\n                    </p>\n                    <p className=\"text-xs text-hr-neutral mt-1\">\n                      For Senior Developer position - 5 min ago\n                    </p>\n                  </div>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"p-4 border-b border-gray-100\">\n                  <div>\n                    <p className=\"text-sm font-medium text-hr-text-primary\">\n                      Payroll reminder\n                    </p>\n                    <p className=\"text-xs text-hr-neutral mt-1\">\n                      Monthly payroll due in 3 days - 1 hour ago\n                    </p>\n                  </div>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"p-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-hr-text-primary\">\n                      System maintenance scheduled\n                    </p>\n                    <p className=\"text-xs text-hr-neutral mt-1\">\n                      Biometric system update - 2 hours ago\n                    </p>\n                  </div>\n                </DropdownMenuItem>\n              </div>\n              <DropdownMenuSeparator />\n              <div className=\"p-2\">\n                <Button variant=\"ghost\" className=\"w-full\">\n                  View all notifications\n                </Button>\n              </div>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* Add New Button */}\n          {showAddButton && onAddNew && (\n            <Button \n              onClick={onAddNew}\n              className=\"bg-hr-primary text-white hover:bg-hr-primary/90\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add New\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4280},"client/src/components/layout/protected-route.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { authService } from \"@/lib/auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequestWithAuth } from \"@/lib/auth\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport DashboardLayout from \"./dashboard-layout\";\nimport AadhaarVerification from \"@/pages/aadhaar-verification\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: string[];\n}\n\nexport default function ProtectedRoute({ children, requiredRoles }: ProtectedRouteProps) {\n  const [, setLocation] = useLocation();\n\n  // Check if user is authenticated\n  if (!authService.isAuthenticated()) {\n    setLocation('/login');\n    return null;\n  }\n\n  // Verify token with server\n  const { data: currentUser, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', '/api/auth/me');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Check employee profile for Aadhaar verification (only for employees)\n  const { data: profile, isLoading: profileLoading } = useQuery({\n    queryKey: ['/api/employee/profile'],\n    enabled: !!currentUser?.user && currentUser.user.role === 'employee',\n    retry: false,\n  });\n\n  // Also fetch KYC details to check Aadhaar\n  const { data: kycDetails, isLoading: kycLoading } = useQuery({\n    queryKey: ['/api/employee/kyc'],\n    enabled: !!currentUser?.user && currentUser.user.role === 'employee' && !!profile?.id,\n    retry: false,\n  });\n\n  if (isLoading || (currentUser?.user?.role === 'employee' && (profileLoading || kycLoading))) {\n    return (\n      <div className=\"min-h-screen bg-hr-background flex items-center justify-center\">\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-8 w-32\" />\n          <Skeleton className=\"h-4 w-24\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    setLocation('/login');\n    return null;\n  }\n\n  // Check role permissions\n  if (requiredRoles && !authService.hasRole(requiredRoles)) {\n    return (\n      <div className=\"min-h-screen bg-hr-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold text-hr-text-primary\">Access Denied</h2>\n          <p className=\"text-hr-neutral mt-2\">You don't have permission to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if employee has verified Aadhaar (mandatory for all employees)\n  if (currentUser?.user?.role === 'employee' && profile) {\n    // Check KYC details for Aadhaar number\n    const hasValidAadhaar = kycDetails && (kycDetails as any).aadharNo && (kycDetails as any).aadharNo.length === 12;\n    if (!hasValidAadhaar) {\n      return <AadhaarVerification />;\n    }\n  }\n\n  return (\n    <DashboardLayout>\n      {children}\n    </DashboardLayout>\n  );\n}\n","size_bytes":2855},"client/src/components/layout/sidebar.tsx":{"content":"import { authService } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { Users, Briefcase, BarChart3, Clock, DollarSign, Building2, Settings, LogOut, Home, Calendar, CreditCard, Shield, FileText, CheckSquare, Database, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SidebarProps {\n  companyName?: string;\n}\n\nexport default function Sidebar({ companyName = \"HR System\" }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const user = authService.getUser();\n\n  // Get employee profile to check company assignment\n  const { data: employee } = useQuery({\n    queryKey: ['/api/employee/profile'],\n    enabled: !!user?.id && user?.role === 'employee',\n  });\n\n  // Check employee status by Aadhaar verification\n  const { data: employeeStatus } = useQuery({\n    queryKey: ['/api/employee/aadhaar-status'],\n    enabled: !!user?.id && user?.role === 'employee',\n    staleTime: 0, // Always refetch to get latest status\n    refetchOnMount: true,\n  });\n\n  const hasCompany = employeeStatus?.isEmployeeInCompany;\n\n  const handleLogout = async () => {\n    await authService.logout();\n    setLocation('/login');\n  };\n\n  const navigationItems = user?.role === 'employee' \n    ? [\n        { path: \"/\", icon: Home, label: \"Dashboard\", active: location === \"/\" },\n        { path: \"/employee/profile\", icon: Users, label: \"My Profile\", active: location === \"/employee/profile\" },\n        ...(hasCompany ? [\n          { path: \"/employee/attendance\", icon: Clock, label: \"Attendance\", active: location === \"/employee/attendance\" },\n          { path: \"/employee/permissions\", icon: Shield, label: \"Permission Requests\", active: location === \"/employee/permissions\" },\n          { path: \"/employee/leave-application\", icon: Calendar, label: \"Leave Application\", active: location === \"/employee/leave-application\" },\n          { path: \"/employee/advance-request\", icon: CreditCard, label: \"Advance Request\", active: location === \"/employee/advance-request\" },\n        ] : []),\n        { path: \"/jobs\", icon: Briefcase, label: \"Available Jobs\", active: location === \"/jobs\" },\n      ]\n    : [\n        { path: \"/\", icon: Home, label: \"Dashboard\", active: location === \"/\" },\n        { path: \"/employees\", icon: Users, label: \"Employees\", active: location === \"/employees\" },\n        { path: \"/admin/attendance\", icon: Clock, label: \"Attendance\", active: location === \"/admin/attendance\" },\n        { path: \"/admin/leave-management\", icon: Calendar, label: \"Leave Management\", active: location === \"/admin/leave-management\" },\n        { path: \"/admin/advance-management\", icon: CreditCard, label: \"Advance Requests\", active: location === \"/admin/advance-management\" },\n        { path: \"/payroll\", icon: DollarSign, label: \"Payroll\", active: location === \"/payroll\" },\n        { path: \"/recruitment\", icon: BarChart3, label: \"Recruitment\", active: location === \"/recruitment\" },\n      ];\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <div className=\"w-72 bg-white border-r border-gray-200 flex flex-col h-screen\">\n      {/* Logo and Company Info */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-hr-primary rounded-lg flex items-center justify-center\">\n            <Building2 className=\"text-white text-lg\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-hr-text-primary\">{companyName}</h1>\n            <p className=\"text-sm text-hr-neutral capitalize\">{user?.role?.replace('_', ' ')}</p>\n          </div>\n        </div>\n      </div>\n\n\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4\">\n        <div className=\"space-y-2\">\n          {navigationItems.map((item) => (\n            <Button\n              key={item.path}\n              variant={item.active ? \"default\" : \"ghost\"}\n              className={`w-full justify-start space-x-3 ${\n                item.active \n                  ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                  : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n              }`}\n              onClick={() => setLocation(item.path)}\n            >\n              <item.icon size={18} />\n              <span>{item.label}</span>\n            </Button>\n          ))}\n\n          {/* Role-based sections */}\n          {user?.role === 'system_admin' && (\n            <div className=\"mt-6\">\n              <h3 className=\"text-xs uppercase text-hr-neutral font-semibold mb-2 px-3\">\n                System Admin\n              </h3>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 ${\n                  location === \"/admin/companies\" \n                    ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                    : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                }`}\n                onClick={() => setLocation(\"/admin/companies\")}\n              >\n                <Building2 size={18} />\n                <span>Company Management</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 ${\n                  location === \"/admin/users\" \n                    ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                    : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                }`}\n                onClick={() => setLocation(\"/admin/users\")}\n              >\n                <Users size={18} />\n                <span>User Management</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 ${\n                  location === \"/admin/permissions\" \n                    ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                    : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                }`}\n                onClick={() => setLocation(\"/admin/permissions\")}\n              >\n                <Settings size={18} />\n                <span>Permission Management</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 ${\n                  location === \"/admin/company-settings\" \n                    ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                    : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                }`}\n                onClick={() => setLocation(\"/admin/company-settings\")}\n              >\n                <Building2 size={18} />\n                <span>Company Settings</span>\n              </Button>\n            </div>\n          )}\n\n          {user?.role === 'admin' && (\n            <>\n              <div className=\"mt-6\">\n                <h3 className=\"text-xs uppercase text-hr-neutral font-semibold mb-2 px-3\">\n                  Client Compliances\n                </h3>\n                <Button\n                  variant=\"ghost\"\n                  className={`w-full justify-start space-x-3 ${\n                    location.startsWith(\"/client-compliances\") \n                      ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                      : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                  }`}\n                  onClick={() => setLocation(\"/client-compliances\")}\n                >\n                  <FileText size={18} />\n                  <span>Client Compliances</span>\n                </Button>\n              </div>\n              <div className=\"mt-6\">\n                <h3 className=\"text-xs uppercase text-hr-neutral font-semibold mb-2 px-3\">\n                  Administration\n                </h3>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 ${\n                  location === \"/admin/users\" \n                    ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                    : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                }`}\n                onClick={() => setLocation(\"/admin/users\")}\n              >\n                <Users size={18} />\n                <span>User Management</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 ${\n                  location === \"/admin/permissions\" \n                    ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                    : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                }`}\n                onClick={() => setLocation(\"/admin/permissions\")}\n              >\n                <Settings size={18} />\n                <span>Permission Management</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 ${\n                  location === \"/admin/company-settings\" \n                    ? \"bg-hr-primary text-white hover:bg-hr-primary/90\" \n                    : \"text-hr-neutral hover:text-hr-text-primary hover:bg-gray-50\"\n                }`}\n                onClick={() => setLocation(\"/admin/company-settings\")}\n              >\n                <Building2 size={18} />\n                <span>Company Settings</span>\n              </Button>\n\n              </div>\n            </>\n          )}\n        </div>\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarFallback className=\"bg-hr-primary text-white text-sm\">\n                {user ? getInitials(user.username) : 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-hr-text-primary truncate\">\n                {user?.username}\n              </p>\n              <p className=\"text-xs text-hr-neutral truncate\">\n                {user?.email}\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-hr-neutral hover:text-hr-accent\"\n            onClick={handleLogout}\n          >\n            <LogOut size={16} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10753},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }","size_bytes":1597},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3869},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5631},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2858},"client/src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1890},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/seed-demo-data.ts":{"content":"import { db } from './db';\nimport { companies, users, departments, employees } from '@shared/schema';\nimport bcrypt from 'bcrypt';\n\nexport async function seedDemoData() {\n  try {\n    console.log('Seeding demo companies, users, and basic data...');\n    \n    // Check if demo data already exists\n    const existingUsers = await db.select().from(users).limit(1);\n    if (existingUsers.length > 0) {\n      console.log('Demo users already exist, skipping demo data seeding');\n      return;\n    }\n\n    // Create TechCorp company (for system admin)\n    const [techCorp] = await db.insert(companies).values({\n      name: 'TechCorp Systems',\n      email: 'system@techcorp.com',\n      phone: '+1-555-0100',\n      address: '123 Technology Drive, Silicon Valley, CA 94000',\n      type: 'private_limited',\n      industry: 'Technology',\n      size: 'Large (500+ employees)',\n      status: 'approved',\n      profileComplete: true,\n    }).returning();\n\n    // Create Demo Company (for admin and employee)\n    const [demoCompany] = await db.insert(companies).values({\n      name: 'Demo Corporation',\n      email: 'admin@demo.com',\n      phone: '+1-555-0200',\n      address: '456 Business Blvd, Demo City, NY 10001',\n      type: 'private_limited',\n      industry: 'Professional Services',\n      size: 'Medium (50-500 employees)',\n      status: 'approved',\n      profileComplete: true,\n    }).returning();\n\n    console.log(`Created companies: ${techCorp.name} (ID: ${techCorp.id}) and ${demoCompany.name} (ID: ${demoCompany.id})`);\n\n    // Create system admin user\n    const hashedSysAdminPassword = await bcrypt.hash('sysadmin123', 10);\n    const [systemAdmin] = await db.insert(users).values({\n      username: 'system_admin',\n      email: 'system@techcorp.com',\n      password: hashedSysAdminPassword,\n      role: 'system_admin',\n      companyId: techCorp.id,\n      isActive: true,\n    }).returning();\n\n    // Create company admin user\n    const hashedAdminPassword = await bcrypt.hash('admin123', 10);\n    const [companyAdmin] = await db.insert(users).values({\n      username: 'demo_admin',\n      email: 'admin@demo.com',\n      password: hashedAdminPassword,\n      role: 'admin',\n      companyId: demoCompany.id,\n      isActive: true,\n    }).returning();\n\n    // Create employee user\n    const hashedEmployeePassword = await bcrypt.hash('emp123', 10);\n    const [employeeUser] = await db.insert(users).values({\n      username: 'demo_employee',\n      email: 'employee@demo.com',\n      password: hashedEmployeePassword,\n      role: 'employee',\n      companyId: demoCompany.id,\n      isActive: true,\n    }).returning();\n\n    console.log(`Created users: System Admin (${systemAdmin.email}), Company Admin (${companyAdmin.email}), Employee (${employeeUser.email})`);\n\n    // Create departments for TechCorp\n    const techCorpDepartments = await db.insert(departments).values([\n      {\n        name: 'Information Technology',\n        description: 'System administration and IT infrastructure',\n        companyId: techCorp.id,\n      },\n      {\n        name: 'Operations',\n        description: 'Business operations and process management',\n        companyId: techCorp.id,\n      }\n    ]).returning();\n\n    // Create departments for Demo Company\n    const demoDepartments = await db.insert(departments).values([\n      {\n        name: 'Engineering',\n        description: 'Software development and technical operations',\n        companyId: demoCompany.id,\n      },\n      {\n        name: 'Human Resources',\n        description: 'Employee relations and talent management',\n        companyId: demoCompany.id,\n      },\n      {\n        name: 'Marketing',\n        description: 'Marketing and customer acquisition',\n        companyId: demoCompany.id,\n      },\n      {\n        name: 'Sales',\n        description: 'Sales and business development',\n        companyId: demoCompany.id,\n      }\n    ]).returning();\n\n    console.log(`Created ${techCorpDepartments.length} departments for TechCorp and ${demoDepartments.length} departments for Demo Company`);\n\n    // Create employee profiles for the users\n    const engineeringDept = demoDepartments.find(d => d.name === 'Engineering');\n    const hrDept = demoDepartments.find(d => d.name === 'Human Resources');\n    const itDept = techCorpDepartments.find(d => d.name === 'Information Technology');\n\n    // Create employee record for system admin\n    await db.insert(employees).values({\n      userId: systemAdmin.id,\n      companyId: techCorp.id,\n      employeeId: 'SYS001',\n      firstName: 'System',\n      lastName: 'Administrator',\n      email: systemAdmin.email,\n      phone: '+1-555-0101',\n      departmentId: itDept?.id,\n      position: 'System Administrator',\n      salary: '120000.00',\n      hireDate: new Date('2023-01-15'),\n      status: 'active',\n      address: '123 Tech Street, Silicon Valley, CA',\n    });\n\n    // Create employee record for company admin\n    await db.insert(employees).values({\n      userId: companyAdmin.id,\n      companyId: demoCompany.id,\n      employeeId: 'ADM001',\n      firstName: 'Demo',\n      lastName: 'Admin',\n      email: companyAdmin.email,\n      phone: '+1-555-0201',\n      departmentId: hrDept?.id,\n      position: 'HR Manager / Company Admin',\n      salary: '85000.00',\n      hireDate: new Date('2023-03-01'),\n      status: 'active',\n      address: '456 Admin Ave, Demo City, NY',\n    });\n\n    // Create employee record for regular employee\n    await db.insert(employees).values({\n      userId: employeeUser.id,\n      companyId: demoCompany.id,\n      employeeId: 'EMP001',\n      firstName: 'Demo',\n      lastName: 'Employee',\n      email: employeeUser.email,\n      phone: '+1-555-0301',\n      departmentId: engineeringDept?.id,\n      position: 'Software Developer',\n      salary: '70000.00',\n      hireDate: new Date('2023-06-15'),\n      status: 'active',\n      address: '789 Employee St, Demo City, NY',\n    });\n\n    console.log('Created employee records for all demo users');\n    console.log('✅ Demo data seeding completed successfully!');\n    console.log('\\nDemo Login Credentials:');\n    console.log('System Admin: system@techcorp.com / sysadmin123');\n    console.log('Company Admin: admin@demo.com / admin123');\n    console.log('Employee: employee@demo.com / emp123');\n\n  } catch (error) {\n    console.error('Error seeding demo data:', error);\n    throw error;\n  }\n}","size_bytes":6328},"server/PayrollService.ts":{"content":"import { db } from \"./db\";\nimport { \n  employees, monthlyAttendance, employeeSalaryStructures, employeePayroll,\n  monthlyPayroll, payrollRecords, employeeSalaryComponentValues,\n  type MonthlyPayroll, type PayrollRecord,\n  type Employee, type SelectEmployeeSalaryStructure, type EmployeePayroll\n} from \"@shared/schema\";\nimport { eq, and, desc, lte, sql } from \"drizzle-orm\";\n\n/**\n * Normalized salary structure to handle different data sources consistently\n */\ninterface NormalizedSalaryStructure {\n  basicSalary: string;\n  hra: string;\n  conveyanceAllowance: string;\n  otherAllowances: string;\n  grossSalary: string;\n  epfEnabled: boolean;\n  esicEnabled: boolean;\n  lwfEnabled: boolean;\n  vpfEnabled: boolean;\n  vpfAmount: string;\n  tdsEnabled: boolean;\n  tdsAmount: string;\n  ptEnabled: boolean;\n  ptAmount: string;\n  bonusEnabled: boolean;\n}\n\n/**\n * Centralized PayrollService for automated payroll generation\n * Handles attendance calculation, salary structure lookup, and payroll calculation in one transaction\n */\nexport class PayrollService {\n  \n  /**\n   * Main entry point - generates complete payroll for a company/month in one shot\n   */\n  static async generate(companyId: number, year: number, month: number, generatedBy: number): Promise<MonthlyPayroll> {\n    console.log(`🚀 PayrollService.generate starting for Company ${companyId}, ${year}-${month}`);\n\n    // 1. Check if payroll already exists\n    const existingPayroll = await db\n      .select()\n      .from(monthlyPayroll)\n      .where(\n        and(\n          eq(monthlyPayroll.companyId, companyId),\n          eq(monthlyPayroll.month, month),\n          eq(monthlyPayroll.year, year)\n        )\n      );\n\n    if (existingPayroll.length > 0) {\n      console.log(`⚠️  Payroll already exists, deleting and regenerating...`);\n      await PayrollService.deleteExistingPayroll(companyId, year, month);\n    }\n\n    // 2. Get all active employees\n    const activeEmployees = await db\n      .select()\n      .from(employees)\n      .where(\n        and(\n          eq(employees.companyId, companyId),\n          eq(employees.status, 'active')\n        )\n      );\n\n    console.log(`👥 Found ${activeEmployees.length} active employees`);\n\n    // 3. Create monthly payroll record\n    const [createdPayroll] = await db\n      .insert(monthlyPayroll)\n      .values({\n        companyId,\n        month,\n        year,\n        generatedBy,\n        status: 'draft'\n      })\n      .returning();\n\n    console.log(`📊 Created monthly payroll record: ${createdPayroll.id}`);\n\n    // 4. Generate payroll for each employee\n    for (const employee of activeEmployees) {\n      try {\n        await PayrollService.generateEmployeePayroll(employee, createdPayroll, year, month);\n      } catch (error) {\n        console.error(`❌ Error generating payroll for employee ${employee.id}:`, error);\n        // Continue with other employees instead of failing entire payroll\n      }\n    }\n\n    console.log(`✅ PayrollService.generate completed successfully`);\n    return createdPayroll;\n  }\n\n  /**\n   * Generate payroll for a single employee with automated attendance and salary structure lookup\n   */\n  private static async generateEmployeePayroll(\n    employee: Employee, \n    payroll: MonthlyPayroll, \n    year: number, \n    month: number\n  ): Promise<void> {\n    console.log(`🧮 Processing employee: ${employee.firstName} ${employee.lastName} (ID: ${employee.id})`);\n\n    // 1. Auto-calculate monthly attendance\n    const monthlyAttendanceData = await PayrollService.calculateMonthlyAttendance(\n      employee.id, \n      employee.companyId, \n      year, \n      month\n    );\n    console.log(`📅 Attendance: ${monthlyAttendanceData.presentDays}/${monthlyAttendanceData.payableDays} days`);\n\n    // 2. Get effective salary structure with smart fallback\n    const salaryStructure = await PayrollService.getEffectiveSalaryStructure(employee.id, year, month);\n    if (!salaryStructure) {\n      console.warn(`⚠️  No salary structure found for employee ${employee.id}, skipping`);\n      return;\n    }\n\n    console.log(`💰 Salary structure found for employee ${employee.id}`);\n\n    // 3. Calculate proportional salary based on attendance\n    const calculations = PayrollService.calculateProportionalSalary(salaryStructure, monthlyAttendanceData, year, month);\n\n    // 4. Insert payroll record\n    await db.insert(payrollRecords).values({\n      monthlyPayrollId: payroll.id,\n      employeeId: employee.id,\n      companyId: employee.companyId,\n      presentDays: monthlyAttendanceData.presentDays,\n      weeklyOffs: monthlyAttendanceData.weeklyOffDays,\n      leaveDays: (monthlyAttendanceData.paidLeaveDays ?? 0) + (monthlyAttendanceData.unpaidLeaveDays ?? 0),\n      holidays: monthlyAttendanceData.holidayDays,\n      payableDays: monthlyAttendanceData.payableDays,\n      overtimeHours: '0',\n      ...calculations\n    });\n\n    console.log(`✅ Payroll record created for ${employee.firstName} ${employee.lastName}`);\n  }\n\n  /**\n   * Smart salary structure lookup with fallback logic\n   * 1. Try exact month match in employeeSalaryStructures\n   * 2. Fallback to latest structure on or before target month\n   * 3. Final fallback to legacy employeePayroll table\n   * Returns normalized salary structure for consistent calculations\n   */\n  private static async getEffectiveSalaryStructure(\n    employeeId: number, \n    year: number, \n    month: number\n  ): Promise<NormalizedSalaryStructure | null> {\n    \n    // 1. Try exact month match\n    const [exactMatch] = await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(\n        and(\n          eq(employeeSalaryStructures.employeeId, employeeId),\n          eq(employeeSalaryStructures.year, year),\n          eq(employeeSalaryStructures.month, month)\n        )\n      );\n\n    if (exactMatch) {\n      console.log(`🎯 Found exact salary structure for ${year}-${month}`);\n      return await PayrollService.normalizeEmployeeSalaryStructure(exactMatch);\n    }\n\n    // 2. Fallback to latest structure on or before target month (cross-year search)\n    const targetDate = `${year}-${month.toString().padStart(2, '0')}-01`;\n    const [fallbackMatch] = await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(\n        and(\n          eq(employeeSalaryStructures.employeeId, employeeId),\n          // Use string comparison for year-month: \"2025-01\" <= \"2025-01\"\n          lte(\n            sql`${employeeSalaryStructures.year} || '-' || LPAD(${employeeSalaryStructures.month}::text, 2, '0')`,\n            sql`${year}::text || '-' || LPAD(${month}::text, 2, '0')`\n          )\n        )\n      )\n      .orderBy(desc(employeeSalaryStructures.year), desc(employeeSalaryStructures.month))\n      .limit(1);\n\n    if (fallbackMatch) {\n      console.log(`🔄 Using fallback salary structure from ${fallbackMatch.year}-${fallbackMatch.month}`);\n      return await PayrollService.normalizeEmployeeSalaryStructure(fallbackMatch);\n    }\n\n    // 3. Final fallback to legacy employeePayroll\n    const [legacyPayroll] = await db\n      .select()\n      .from(employeePayroll)\n      .where(eq(employeePayroll.employeeId, employeeId))\n      .orderBy(desc(employeePayroll.updatedAt))\n      .limit(1);\n\n    if (legacyPayroll) {\n      console.log(`🔄 Using legacy employeePayroll structure`);\n      return PayrollService.normalizeEmployeePayroll(legacyPayroll);\n    }\n\n    console.error(`❌ No salary structure found for employee ${employeeId}`);\n    return null;\n  }\n\n  /**\n   * Auto-calculate monthly attendance or fetch existing data\n   */\n  private static async calculateMonthlyAttendance(\n    employeeId: number, \n    companyId: number, \n    year: number, \n    month: number\n  ) {\n    // Try to get existing monthly attendance\n    const [existingAttendance] = await db\n      .select()\n      .from(monthlyAttendance)\n      .where(\n        and(\n          eq(monthlyAttendance.employeeId, employeeId),\n          eq(monthlyAttendance.year, year),\n          eq(monthlyAttendance.month, month)\n        )\n      );\n\n    const totalDaysInMonth = new Date(year, month, 0).getDate(); // Days in month\n    \n    // If attendance exists, preserve all existing attendance data unchanged\n    if (existingAttendance && (existingAttendance.presentDays ?? 0) > 0) {\n      console.log(`📅 Using existing attendance with unpaidLeaveDays=${existingAttendance.unpaidLeaveDays}`);\n      console.log(`📅 Preserving existing payableDays: ${existingAttendance.payableDays}`);\n      \n      // Return existing attendance data without any modifications\n      // This preserves the actual attendance recorded by the system\n      return existingAttendance;\n    }\n\n    // Only auto-calculate when no attendance data exists\n    console.log(`📅 No existing attendance found, auto-calculating...`);\n    \n    // Count actual Sundays in the month (6-day work week is standard in India)\n    let sundays = 0;\n    for (let day = 1; day <= totalDaysInMonth; day++) {\n      const date = new Date(year, month - 1, day);\n      if (date.getDay() === 0) { // Sunday = 0\n        sundays++;\n      }\n    }\n    \n    const workingDays = totalDaysInMonth - sundays; // Actual working days\n    \n    // Default to 90% attendance if no data exists\n    const presentDays = Math.floor(workingDays * 0.9);\n    const absentDays = workingDays - presentDays;\n    \n    // For auto-calculation, default to no unpaid leaves (full month pay)\n    const unpaidLeaveDays = 0; // Default: no unpaid leaves for auto-calculation\n    const payableDays = totalDaysInMonth - unpaidLeaveDays; // User's formula: total - unpaid\n\n    const calculatedAttendance = {\n      employeeId,\n      companyId,\n      year,\n      month,\n      totalWorkingDays: workingDays,\n      presentDays,\n      absentDays,\n      halfDays: 0,\n      lateDays: 0,\n      paidLeaveDays: workingDays - presentDays, // Absent days treated as paid leave\n      unpaidLeaveDays,\n      compOffDays: 0,\n      weeklyOffDays: sundays,\n      holidayDays: 0,\n      payableDays, // Key fix: Total days minus unpaid leaves (31-0=31 for full month)\n      totalHoursWorked: presentDays * 8,\n      averageCheckInTime: null,\n      averageCheckOutTime: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // Insert new attendance record (convert totalHoursWorked to string for decimal column)\n    const attendanceForDb = {\n      ...calculatedAttendance,\n      totalHoursWorked: calculatedAttendance.totalHoursWorked.toString()\n    };\n    \n    await db\n      .insert(monthlyAttendance)\n      .values(attendanceForDb);\n\n    console.log(`📅 Auto-calculated attendance: Present=${presentDays}, Payable=${payableDays}, Working=${workingDays}, Total=${totalDaysInMonth} days`);\n    return calculatedAttendance;\n  }\n\n  /**\n   * Calculate proportional salary based on attendance using normalized salary structure\n   */\n  private static calculateProportionalSalary(\n    salaryStructure: NormalizedSalaryStructure,\n    attendance: any,\n    year: number,\n    month: number\n  ) {\n    // Extract salary components from normalized structure\n    const basicSalary = parseFloat(salaryStructure.basicSalary || '0');\n    const hra = parseFloat(salaryStructure.hra || '0');\n    const conveyanceAllowance = parseFloat(salaryStructure.conveyanceAllowance || '0');\n    const otherAllowances = parseFloat(salaryStructure.otherAllowances || '0');\n    const grossSalary = parseFloat(salaryStructure.grossSalary || '0');\n\n    // Calculate proportion based on payable days\n    const totalMonthDays = new Date(year, month, 0).getDate();\n    const payableDays = Math.max(0, attendance.payableDays || 0);\n    const proportionFactor = Math.max(0, Math.min(1, payableDays / totalMonthDays));\n    \n    console.log(`💰 Calculation: Gross=${grossSalary}, PayableDays=${payableDays}, TotalDays=${totalMonthDays}, Factor=${proportionFactor}`);\n\n    // Apply proportional calculation\n    const proportionalBasicSalary = Math.round((basicSalary * proportionFactor) * 100) / 100;\n    const proportionalHra = Math.round((hra * proportionFactor) * 100) / 100;\n    const proportionalConveyanceAllowance = Math.round((conveyanceAllowance * proportionFactor) * 100) / 100;\n    const proportionalOtherAllowances = Math.round((otherAllowances * proportionFactor) * 100) / 100;\n    const proportionalGrossSalary = Math.round((grossSalary * proportionFactor) * 100) / 100;\n\n    // Calculate deductions\n    let epfEmployee = 0, esicEmployee = 0, lwfEmployee = 0;\n    let vpfAmount = 0, tdsAmount = 0, ptAmount = 0;\n\n    if (salaryStructure.epfEnabled) {\n      // Apply EPF ceiling as per Indian regulations (₹15,000 max for EPF calculation)\n      const epfBasicSalary = Math.min(proportionalBasicSalary, 15000);\n      epfEmployee = Math.round((epfBasicSalary * 0.12) * 100) / 100;\n    }\n    if (salaryStructure.esicEnabled) {\n      esicEmployee = Math.round((proportionalGrossSalary * 0.0075) * 100) / 100;\n    }\n    if (salaryStructure.lwfEnabled) {\n      lwfEmployee = Math.round((10 * proportionFactor) * 100) / 100;\n    }\n    if (salaryStructure.vpfEnabled && salaryStructure.vpfAmount) {\n      vpfAmount = Math.round((parseFloat(salaryStructure.vpfAmount) * proportionFactor) * 100) / 100;\n    }\n    if (salaryStructure.tdsEnabled && salaryStructure.tdsAmount) {\n      tdsAmount = Math.round((parseFloat(salaryStructure.tdsAmount) * proportionFactor) * 100) / 100;\n    }\n    if (salaryStructure.ptEnabled && salaryStructure.ptAmount) {\n      ptAmount = Math.round((parseFloat(salaryStructure.ptAmount) * proportionFactor) * 100) / 100;\n    }\n\n    const totalDeductions = Math.round((epfEmployee + esicEmployee + lwfEmployee + vpfAmount + tdsAmount + ptAmount) * 100) / 100;\n\n    // Calculate employer contributions\n    let epfEmployer = 0, epfAdmin = 0, esicEmployer = 0, lwfEmployer = 0, bonus = 0;\n\n    if (salaryStructure.epfEnabled) {\n      // Apply EPF ceiling as per Indian regulations (₹15,000 max for EPF calculation)\n      const epfBasicSalary = Math.min(proportionalBasicSalary, 15000);\n      epfEmployer = Math.round((epfBasicSalary * 0.12) * 100) / 100;\n      epfAdmin = Math.round((epfBasicSalary * 0.01) * 100) / 100;\n    }\n    if (salaryStructure.esicEnabled) {\n      esicEmployer = Math.round((proportionalGrossSalary * 0.0325) * 100) / 100;\n    }\n    if (salaryStructure.lwfEnabled) {\n      lwfEmployer = Math.round((10 * proportionFactor) * 100) / 100;\n    }\n    if (salaryStructure.bonusEnabled) {\n      bonus = Math.round((proportionalGrossSalary * 0.0833) * 100) / 100;\n    }\n\n    const totalEmployerContributions = Math.round((epfEmployer + epfAdmin + esicEmployer + lwfEmployer + bonus) * 100) / 100;\n\n    // Final calculations\n    const netSalary = Math.round((proportionalGrossSalary - totalDeductions) * 100) / 100;\n    const ctc = Math.round((proportionalGrossSalary + totalEmployerContributions) * 100) / 100;\n\n    return {\n      basicSalary: proportionalBasicSalary.toFixed(2),\n      hra: proportionalHra.toFixed(2),\n      conveyanceAllowance: proportionalConveyanceAllowance.toFixed(2),\n      otherAllowances: proportionalOtherAllowances.toFixed(2),\n      grossSalary: proportionalGrossSalary.toFixed(2),\n      overtimeAmount: '0',\n      epfEmployee: epfEmployee.toFixed(2),\n      esicEmployee: esicEmployee.toFixed(2),\n      lwfEmployee: lwfEmployee.toFixed(2),\n      vpfAmount: vpfAmount.toFixed(2),\n      tdsAmount: tdsAmount.toFixed(2),\n      ptAmount: ptAmount.toFixed(2),\n      totalDeductions: totalDeductions.toFixed(2),\n      epfEmployer: epfEmployer.toFixed(2),\n      epfAdmin: epfAdmin.toFixed(2),\n      esicEmployer: esicEmployer.toFixed(2),\n      lwfEmployer: lwfEmployer.toFixed(2),\n      bonus: bonus.toFixed(2),\n      totalEmployerContributions: totalEmployerContributions.toFixed(2),\n      netSalary: netSalary.toFixed(2),\n      ctc: ctc.toFixed(2)\n    };\n  }\n\n  /**\n   * Helper to delete existing payroll for regeneration\n   */\n  private static async deleteExistingPayroll(companyId: number, year: number, month: number): Promise<void> {\n    // First delete payroll records\n    const [existingPayroll] = await db\n      .select()\n      .from(monthlyPayroll)\n      .where(\n        and(\n          eq(monthlyPayroll.companyId, companyId),\n          eq(monthlyPayroll.month, month),\n          eq(monthlyPayroll.year, year)\n        )\n      );\n\n    if (existingPayroll) {\n      await db\n        .delete(payrollRecords)\n        .where(eq(payrollRecords.monthlyPayrollId, existingPayroll.id));\n\n      await db\n        .delete(monthlyPayroll)\n        .where(eq(monthlyPayroll.id, existingPayroll.id));\n\n      console.log(`🗑️  Deleted existing payroll for regeneration`);\n    }\n  }\n\n  /**\n   * Normalize employeeSalaryStructures data to consistent interface\n   */\n  private static async normalizeEmployeeSalaryStructure(structure: SelectEmployeeSalaryStructure): Promise<NormalizedSalaryStructure> {\n    let basicSalary = structure.earningHead1 || '0';\n    let hra = structure.earningHead2 || '0';\n    let conveyanceAllowance = structure.earningHead3 || '0';\n    let otherAllowances = structure.earningHead4 || '0';\n\n    // If earningHead fields are zero (legacy structures), fall back to component values\n    if (basicSalary === '0' && hra === '0' && conveyanceAllowance === '0' && otherAllowances === '0') {\n      try {\n        const components = await db\n          .select()\n          .from(employeeSalaryComponentValues)\n          .where(\n            and(\n              eq(employeeSalaryComponentValues.structureId, structure.id),\n              eq(employeeSalaryComponentValues.isEmployerCost, false)\n            )\n          );\n\n        const basicComponent = components.find(c => c.componentKey === 'basic');\n        const hraComponent = components.find(c => c.componentKey === 'hra');\n        const conveyanceComponent = components.find(c => c.componentKey === 'conveyance');\n        const otherComponent = components.find(c => c.componentKey === 'other');\n\n        basicSalary = basicComponent?.amount || '0';\n        hra = hraComponent?.amount || '0';\n        conveyanceAllowance = conveyanceComponent?.amount || '0';\n        otherAllowances = otherComponent?.amount || '0';\n\n        console.log(`🔄 Used component values fallback for structure ${structure.id}: Basic=${basicSalary}, HRA=${hra}, Conv=${conveyanceAllowance}, Other=${otherAllowances}`);\n      } catch (error) {\n        console.warn(`⚠️  Failed to fetch component values for structure ${structure.id}:`, error);\n      }\n    }\n\n    return {\n      basicSalary,\n      hra,\n      conveyanceAllowance,\n      otherAllowances,\n      grossSalary: structure.grossValue || '0',\n      epfEnabled: structure.epfEnabled || false,\n      esicEnabled: structure.esicEnabled || false,\n      lwfEnabled: structure.lwfEnabled || false,\n      vpfEnabled: structure.vpfEnabled || false,\n      vpfAmount: (structure.vpfAmount && structure.vpfAmount.trim()) || '0',\n      tdsEnabled: structure.tdsEnabled || false,\n      tdsAmount: (structure.tdsAmount && structure.tdsAmount.trim()) || '0',\n      ptEnabled: structure.ptEnabled || false,\n      ptAmount: (structure.ptAmount && structure.ptAmount.trim()) || '0',\n      bonusEnabled: structure.bonusEnabled || false\n    };\n  }\n\n  /**\n   * Normalize legacy employeePayroll data to consistent interface\n   */\n  private static normalizeEmployeePayroll(payroll: EmployeePayroll): NormalizedSalaryStructure {\n    return {\n      basicSalary: payroll.earningHead1 || '0',\n      hra: payroll.earningHead2 || '0', \n      conveyanceAllowance: payroll.earningHead3 || '0',\n      otherAllowances: payroll.earningHead4 || '0',\n      grossSalary: payroll.grossValue || '0',\n      epfEnabled: payroll.epfEnabled || false,\n      esicEnabled: payroll.esicEnabled || false,\n      lwfEnabled: payroll.lwfEnabled || false,\n      vpfEnabled: payroll.vpfEnabled || false,\n      vpfAmount: (payroll.vpfAmount && payroll.vpfAmount.trim()) || '0',\n      tdsEnabled: payroll.tdsEnabled || false,\n      tdsAmount: (payroll.tdsAmount && payroll.tdsAmount.trim()) || '0',\n      ptEnabled: payroll.ptEnabled || false,\n      ptAmount: (payroll.ptAmount && payroll.ptAmount.trim()) || '0',\n      bonusEnabled: payroll.bonusEnabled || false\n    };\n  }\n}","size_bytes":20127},"server/SalaryStructureEngine.ts":{"content":"import { db } from \"./db\";\nimport { \n  salaryComponents, \n  companySalaryComponentConfig, \n  employeeSalaryStructures,\n  employeeSalaryComponentValues,\n  salaryEntryModeEnum \n} from \"../shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\n// Types for the salary calculation engine\nexport interface SalaryComponent {\n  componentKey: string;\n  displayName: string;\n  isTaxable: boolean;\n  isEmployerCost: boolean;\n  amount: number;\n  calculatedFromPercentage: boolean;\n}\n\nexport interface SalaryCalculationResult {\n  mode: 'gross' | 'ctc' | 'earning_heads';\n  ctcValue: number;\n  grossValue: number;\n  netPay?: number;\n  components: SalaryComponent[];\n  employerCosts: SalaryComponent[];\n  deductions?: SalaryComponent[];\n  configSnapshot: string; // JSON of percentages used\n}\n\nexport interface ComponentConfig {\n  componentKey: string;\n  displayName: string;\n  percentageOfGross?: number;\n  percentageOfCTC?: number;\n  priority: number;\n  isTaxable: boolean;\n  isEmployerCost: boolean;\n}\n\nexport class SalaryStructureEngine {\n  \n  /**\n   * Get salary component configuration for a company\n   */\n  static async getCompanyComponentConfig(companyId: number, mode: 'gross' | 'ctc' | 'earning_heads'): Promise<ComponentConfig[]> {\n    const configs = await db\n      .select({\n        componentKey: companySalaryComponentConfig.componentKey,\n        displayName: salaryComponents.displayName,\n        percentageOfGross: companySalaryComponentConfig.percentageOfGross,\n        percentageOfCTC: companySalaryComponentConfig.percentageOfCTC,\n        priority: companySalaryComponentConfig.priority,\n        isTaxable: salaryComponents.isTaxable,\n        isEmployerCost: salaryComponents.isEmployerCost,\n      })\n      .from(companySalaryComponentConfig)\n      .leftJoin(salaryComponents, eq(companySalaryComponentConfig.componentKey, salaryComponents.componentKey))\n      .where(\n        and(\n          eq(companySalaryComponentConfig.companyId, companyId),\n          eq(companySalaryComponentConfig.entryMode, mode),\n          eq(companySalaryComponentConfig.isActive, true)\n        )\n      )\n      .orderBy(companySalaryComponentConfig.priority);\n\n    // Return default configuration if none exists\n    if (configs.length === 0) {\n      return this.getDefaultComponentConfig(mode);\n    }\n\n    return configs.map(config => ({\n      componentKey: config.componentKey,\n      displayName: config.displayName || '',\n      percentageOfGross: config.percentageOfGross ? parseFloat(config.percentageOfGross) : undefined,\n      percentageOfCTC: config.percentageOfCTC ? parseFloat(config.percentageOfCTC) : undefined,\n      priority: config.priority ?? 0,\n      isTaxable: config.isTaxable ?? true,\n      isEmployerCost: config.isEmployerCost ?? false,\n    }));\n  }\n\n  /**\n   * Get default component configuration for a mode with custom limits\n   */\n  static getDefaultComponentConfig(mode: 'gross' | 'ctc' | 'earning_heads'): ComponentConfig[] {\n    const configs: ComponentConfig[] = [\n      { componentKey: 'basic', displayName: 'Basic Salary', percentageOfGross: 60, percentageOfCTC: 60, priority: 1, isTaxable: true, isEmployerCost: false },\n      { componentKey: 'hra', displayName: 'House Rent Allowance', percentageOfGross: 30, percentageOfCTC: 30, priority: 2, isTaxable: true, isEmployerCost: false },\n      { componentKey: 'conveyance', displayName: 'Conveyance Allowance', percentageOfGross: 10, percentageOfCTC: 10, priority: 3, isTaxable: true, isEmployerCost: false },\n      { componentKey: 'other', displayName: 'Other Allowances', percentageOfGross: 0, percentageOfCTC: 0, priority: 4, isTaxable: true, isEmployerCost: false },\n    ];\n\n    return configs.filter(config => {\n      if (mode === 'gross') return config.percentageOfGross !== undefined;\n      if (mode === 'ctc') return config.percentageOfCTC !== undefined;\n      return true;\n    });\n  }\n\n  /**\n   * Calculate component amount using waterfall approach based on gross ranges\n   */\n  static calculateComponentAmount(componentKey: string, grossAmount: number, basePercentage: number): number {\n    // Waterfall approach based on gross salary ranges\n    if (grossAmount <= 15000) {\n      // For up to 15000 gross: 100% in basic, others zero\n      switch (componentKey) {\n        case 'basic': return grossAmount;\n        case 'hra': return 0;\n        case 'conveyance': return 0;\n        case 'other': return 0;\n        default: return 0;\n      }\n    } else if (grossAmount <= 22500) {\n      // For 15000 to 22500: 15000 in basic, remaining in HRA\n      switch (componentKey) {\n        case 'basic': return 15000;\n        case 'hra': return grossAmount - 15000;\n        case 'conveyance': return 0;\n        case 'other': return 0;\n        default: return 0;\n      }\n    } else if (grossAmount <= 25000) {\n      // For 22500 to 25000: 15000 in basic, 7500 in HRA, remaining in conveyance\n      switch (componentKey) {\n        case 'basic': return 15000;\n        case 'hra': return 7500;\n        case 'conveyance': return grossAmount - 15000 - 7500;\n        case 'other': return 0;\n        default: return 0;\n      }\n    } else if (grossAmount <= 100000) {\n      // For 25000 to 100000: Basic 60%, HRA 30%, Conveyance 10%, Other 0% (NO CAPS)\n      switch (componentKey) {\n        case 'basic':\n          // Basic: 60% of gross (no cap) - round to whole rupees\n          return Math.round(grossAmount * 0.6);\n        case 'hra':\n          // HRA: 30% of gross (no cap) - round to whole rupees\n          return Math.round(grossAmount * 0.3);\n        case 'conveyance':\n          // Conveyance: 10% of gross (no cap) - round to whole rupees\n          return Math.round(grossAmount * 0.1);\n        case 'other':\n          return 0;\n        default: return 0;\n      }\n    } else {\n      // For above 100000: Basic 60%, HRA 30%, Conveyance 6%, Other 4% (NO CAPS)\n      switch (componentKey) {\n        case 'basic':\n          // Basic: 60% of gross (no cap) - round to whole rupees\n          return Math.round(grossAmount * 0.6);\n        case 'hra':\n          // HRA: 30% of gross (no cap) - round to whole rupees\n          return Math.round(grossAmount * 0.3);\n        case 'conveyance':\n          // Conveyance: 6% of gross (no cap) - round to whole rupees\n          return Math.round(grossAmount * 0.06);\n        case 'other':\n          // Other Allowances: 4% of gross (no cap) - round to whole rupees\n          return Math.round(grossAmount * 0.04);\n        default: return 0;\n      }\n    }\n  }\n\n  /**\n   * Calculate salary structure from gross amount\n   */\n  static async calculateFromGross(\n    companyId: number,\n    grossAmount: number,\n    complianceSettings?: any,\n    complianceValues?: any\n  ): Promise<SalaryCalculationResult> {\n    const config = await this.getCompanyComponentConfig(companyId, 'gross');\n    const components: SalaryComponent[] = [];\n    const employerCosts: SalaryComponent[] = [];\n\n    // Separate employee components from employer costs\n    const employeeComponents = config.filter(c => !c.isEmployerCost);\n    const employerComponents = config.filter(c => c.isEmployerCost);\n\n    // Calculate employee components based on gross percentages with limits\n    for (const configItem of employeeComponents) {\n      if (configItem.percentageOfGross) {\n        const amount = this.calculateComponentAmount(configItem.componentKey, grossAmount, configItem.percentageOfGross);\n        components.push({\n          componentKey: configItem.componentKey,\n          displayName: configItem.displayName,\n          isTaxable: configItem.isTaxable,\n          isEmployerCost: false,\n          amount,\n          calculatedFromPercentage: true,\n        });\n      }\n    }\n\n    // Calculate employer costs based on configuration\n    for (const configItem of employerComponents) {\n      let amount = 0;\n      \n      if (configItem.percentageOfGross) {\n        // Use configured percentage of gross\n        amount = Math.round((grossAmount * configItem.percentageOfGross / 100) * 100) / 100;\n      } else {\n        // Use compliance settings for statutory calculations\n        if (configItem.componentKey === 'epf_employer' && complianceSettings?.epfEnabled !== false) {\n          // Calculate PF on all earning heads except HRA\n          const hraComponent = components.find(c => c.componentKey === 'hra');\n          const pfBaseAmount = grossAmount - (hraComponent ? hraComponent.amount : 0);\n          \n          let epfLimit = 15000; // Default statutory limit\n          if (complianceSettings?.pfLimit) epfLimit = 21000;\n          if (complianceSettings?.pfLimitHigher) epfLimit = 25000;\n          const epfBasic = Math.min(pfBaseAmount, epfLimit);\n          amount = Math.round((epfBasic * 0.12) * 100) / 100;\n        } else if (configItem.componentKey === 'esic_employer' && grossAmount <= 25000 && complianceSettings?.esicEnabled !== false) {\n          amount = Math.round((grossAmount * 0.0325) * 100) / 100;\n        } else if (configItem.componentKey === 'bonus' && complianceSettings?.bonusEnabled !== false && !complianceSettings?.bonusMonthly) {\n          // Calculate bonus on gross salary (only add to employer costs if NOT monthly)\n          const bonusRate = 0.0833; // 8.33%\n          amount = Math.round((grossAmount * bonusRate) * 100) / 100;\n        } else if (configItem.componentKey === 'lwf_employer' && complianceSettings?.lwfEnabled !== false) {\n          amount = 20; // Fixed amount\n        }\n      }\n      \n      if (amount > 0) {\n        employerCosts.push({\n          componentKey: configItem.componentKey,\n          displayName: configItem.displayName,\n          isTaxable: configItem.isTaxable,\n          isEmployerCost: true,\n          amount,\n          calculatedFromPercentage: !!configItem.percentageOfGross,\n        });\n      }\n    }\n\n    // If no employer costs configured, use statutory defaults with compliance settings\n    if (employerCosts.length === 0) {\n      // EPF Employer Contribution\n      if (complianceSettings?.epfEnabled !== false) {\n        // Calculate PF on all earning heads except HRA\n        const hraComponent = components.find(c => c.componentKey === 'hra');\n        const pfBaseAmount = grossAmount - (hraComponent ? hraComponent.amount : 0);\n        \n        let epfLimit = 15000; // Default statutory limit\n        if (complianceSettings?.pfLimit) epfLimit = 21000;\n        if (complianceSettings?.pfLimitHigher) epfLimit = 25000;\n        const epfBasic = Math.min(pfBaseAmount, epfLimit);\n        \n        employerCosts.push(\n          {\n            componentKey: 'epf_employer',\n            displayName: 'EPF Employer Contribution',\n            isTaxable: false,\n            isEmployerCost: true,\n            amount: Math.round((epfBasic * 0.12) * 100) / 100,\n            calculatedFromPercentage: true,\n          },\n          {\n            componentKey: 'epf_admin',\n            displayName: 'EPF Admin Charges',\n            isTaxable: false,\n            isEmployerCost: true,\n            amount: Math.round((epfBasic * 0.01) * 100) / 100,\n            calculatedFromPercentage: true,\n          }\n        );\n      }\n\n      // Bonus (calculated on gross salary) - only add to employer costs if NOT monthly\n      if (complianceSettings?.bonusEnabled !== false && !complianceSettings?.bonusMonthly) {\n        employerCosts.push({\n          componentKey: 'bonus',\n          displayName: 'Bonus',\n          isTaxable: false,\n          isEmployerCost: true,\n          amount: Math.round((grossAmount * 0.0833) * 100) / 100,\n          calculatedFromPercentage: true,\n        });\n      }\n      \n      // ESIC if applicable\n      if (complianceSettings?.esicEnabled !== false && grossAmount <= 25000) {\n        employerCosts.push({\n          componentKey: 'esic_employer',\n          displayName: 'ESIC Employer Contribution',\n          isTaxable: false,\n          isEmployerCost: true,\n          amount: Math.round((grossAmount * 0.0325) * 100) / 100,\n          calculatedFromPercentage: true,\n        });\n      }\n      \n      // LWF\n      if (complianceSettings?.lwfEnabled !== false) {\n        employerCosts.push({\n          componentKey: 'lwf_employer',\n          displayName: 'LWF Employer Contribution',\n          isTaxable: false,\n          isEmployerCost: true,\n          amount: 20,\n          calculatedFromPercentage: false,\n        });\n      }\n    }\n\n    // Calculate employee deductions based on compliance settings\n    const deductions: SalaryComponent[] = [];\n    \n    // EPF Employee Deduction\n    if (complianceSettings?.epfEnabled !== false) {\n      // Calculate PF on all earning heads except HRA\n      const hraComponent = components.find(c => c.componentKey === 'hra');\n      const pfBaseAmount = grossAmount - (hraComponent ? hraComponent.amount : 0);\n      \n      let epfLimit = 15000; // Default statutory limit\n      if (complianceSettings?.pfLimit) epfLimit = 21000;\n      if (complianceSettings?.pfLimitHigher) epfLimit = 25000;\n      const epfBasic = Math.min(pfBaseAmount, epfLimit);\n      deductions.push({\n        componentKey: 'epf_employee',\n        displayName: 'EPF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((epfBasic * 0.12) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // ESIC Employee Deduction\n    if (complianceSettings?.esicEnabled !== false && grossAmount <= 25000) {\n      deductions.push({\n        componentKey: 'esic_employee',\n        displayName: 'ESIC Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((grossAmount * 0.0075) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // LWF Employee Deduction\n    if (complianceSettings?.lwfEnabled !== false) {\n      deductions.push({\n        componentKey: 'lwf_employee',\n        displayName: 'LWF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: 10,\n        calculatedFromPercentage: false,\n      });\n    }\n\n    // VPF Employee Deduction\n    if (complianceSettings?.vpfEnabled && complianceValues?.vpfPercentage > 0) {\n      // Calculate VPF on all earning heads except HRA\n      const hraComponent = components.find(c => c.componentKey === 'hra');\n      const vpfBaseAmount = grossAmount - (hraComponent ? hraComponent.amount : 0);\n      \n      deductions.push({\n        componentKey: 'vpf_employee',\n        displayName: 'VPF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((vpfBaseAmount * complianceValues.vpfPercentage / 100) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // TDS Deduction\n    if (complianceSettings?.tdsEnabled && complianceValues?.tdsPercentage > 0) {\n      deductions.push({\n        componentKey: 'tds',\n        displayName: 'TDS',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((grossAmount * complianceValues.tdsPercentage / 100) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // PT Deduction\n    if (complianceSettings?.ptEnabled && complianceValues?.ptAmount > 0) {\n      deductions.push({\n        componentKey: 'pt',\n        displayName: 'Professional Tax',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: complianceValues.ptAmount,\n        calculatedFromPercentage: false,\n      });\n    }\n\n    // Handle monthly bonus - add to net take home instead of employer cost\n    let bonusAddedToNetPay = 0;\n    if (complianceSettings?.bonusEnabled !== false && complianceSettings?.bonusMonthly) {\n      const bonusAmount = Math.round((grossAmount * 0.0833) * 100) / 100;\n      bonusAddedToNetPay = bonusAmount;\n      \n      // Add monthly bonus as an employee component (earnings)\n      components.push({\n        componentKey: 'monthly_bonus',\n        displayName: 'Monthly Bonus',\n        isTaxable: true,\n        isEmployerCost: false,\n        amount: bonusAmount,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    const totalEmployerCosts = employerCosts.reduce((sum, cost) => sum + cost.amount, 0);\n    const totalDeductions = deductions.reduce((sum, deduction) => sum + deduction.amount, 0);\n    const ctcValue = Math.round((grossAmount + totalEmployerCosts) * 100) / 100;\n    const netPay = Math.round((grossAmount - totalDeductions + bonusAddedToNetPay) * 100) / 100;\n\n    return {\n      mode: 'gross',\n      ctcValue,\n      grossValue: grossAmount,\n      netPay,\n      components,\n      employerCosts,\n      deductions,\n      configSnapshot: JSON.stringify(config),\n    };\n  }\n\n  /**\n   * Calculate salary structure from CTC amount  \n   */\n  static async calculateFromCTC(\n    companyId: number,\n    ctcAmount: number,\n    complianceSettings?: any,\n    complianceValues?: any\n  ): Promise<SalaryCalculationResult> {\n    const config = await this.getCompanyComponentConfig(companyId, 'ctc');\n    const components: SalaryComponent[] = [];\n    const employerCosts: SalaryComponent[] = [];\n\n    // Separate employee components from employer costs\n    const employeeComponents = config.filter(c => !c.isEmployerCost);\n    const employerComponents = config.filter(c => c.isEmployerCost);\n\n    // Calculate total percentage for employee components\n    const totalEmployeePercentage = employeeComponents.reduce((sum, c) => \n      sum + (c.percentageOfCTC || 0), 0);\n    \n    // Calculate total percentage for employer components\n    const totalEmployerPercentage = employerComponents.reduce((sum, c) => \n      sum + (c.percentageOfCTC || 0), 0);\n\n    // Calculate gross as percentage of CTC (total - employer costs)\n    const grossPercentageOfCTC = 100 - totalEmployerPercentage;\n    const grossAmount = Math.round((ctcAmount * grossPercentageOfCTC / 100) * 100) / 100;\n\n    // Calculate employee components based on CTC percentages with limits\n    for (const configItem of employeeComponents) {\n      if (configItem.percentageOfCTC) {\n        // Use the gross amount for limits calculation to maintain 60/30/10/0 split\n        const amount = this.calculateComponentAmount(configItem.componentKey, grossAmount, configItem.percentageOfCTC);\n        components.push({\n          componentKey: configItem.componentKey,\n          displayName: configItem.displayName,\n          isTaxable: configItem.isTaxable,\n          isEmployerCost: false,\n          amount,\n          calculatedFromPercentage: true,\n        });\n      }\n    }\n\n    // Calculate employer costs based on CTC percentages\n    for (const configItem of employerComponents) {\n      if (configItem.percentageOfCTC) {\n        const amount = Math.round((ctcAmount * configItem.percentageOfCTC / 100) * 100) / 100;\n        employerCosts.push({\n          componentKey: configItem.componentKey,\n          displayName: configItem.displayName,\n          isTaxable: configItem.isTaxable,\n          isEmployerCost: true,\n          amount,\n          calculatedFromPercentage: true,\n        });\n      }\n    }\n\n    // If no employer costs configured, use statutory defaults with compliance settings\n    if (employerCosts.length === 0) {\n      // EPF Employer Contribution\n      if (complianceSettings?.epfEnabled !== false) {\n        // Calculate PF on all earning heads except HRA\n        const hraComponent = components.find(c => c.componentKey === 'hra');\n        const pfBaseAmount = grossAmount - (hraComponent ? hraComponent.amount : 0);\n        \n        let epfLimit = 15000; // Default statutory limit\n        if (complianceSettings?.pfLimit) epfLimit = 21000;\n        if (complianceSettings?.pfLimitHigher) epfLimit = 25000;\n        const epfBasic = Math.min(pfBaseAmount, epfLimit);\n        \n        employerCosts.push(\n          {\n            componentKey: 'epf_employer',\n            displayName: 'EPF Employer Contribution',\n            isTaxable: false,\n            isEmployerCost: true,\n            amount: Math.round((epfBasic * 0.12) * 100) / 100,\n            calculatedFromPercentage: true,\n          },\n          {\n            componentKey: 'epf_admin',\n            displayName: 'EPF Admin Charges',\n            isTaxable: false,\n            isEmployerCost: true,\n            amount: Math.round((epfBasic * 0.01) * 100) / 100,\n            calculatedFromPercentage: true,\n          }\n        );\n      }\n\n      // Bonus (calculated on gross salary) - only add to employer costs if NOT monthly\n      if (complianceSettings?.bonusEnabled !== false && !complianceSettings?.bonusMonthly) {\n        employerCosts.push({\n          componentKey: 'bonus',\n          displayName: 'Bonus',\n          isTaxable: false,\n          isEmployerCost: true,\n          amount: Math.round((grossAmount * 0.0833) * 100) / 100,\n          calculatedFromPercentage: true,\n        });\n      }\n\n      // ESIC if applicable\n      if (complianceSettings?.esicEnabled !== false && grossAmount <= 25000) {\n        employerCosts.push({\n          componentKey: 'esic_employer',\n          displayName: 'ESIC Employer Contribution',\n          isTaxable: false,\n          isEmployerCost: true,\n          amount: Math.round((grossAmount * 0.0325) * 100) / 100,\n          calculatedFromPercentage: true,\n        });\n      }\n\n      // LWF\n      if (complianceSettings?.lwfEnabled !== false) {\n        employerCosts.push({\n          componentKey: 'lwf_employer',\n          displayName: 'LWF Employer Contribution',\n          isTaxable: false,\n          isEmployerCost: true,\n          amount: 20,\n          calculatedFromPercentage: false,\n        });\n      }\n    }\n\n    // Calculate employee deductions based on compliance settings\n    const deductions: SalaryComponent[] = [];\n    \n    // EPF Employee Deduction\n    if (complianceSettings?.epfEnabled !== false) {\n      // Calculate PF on all earning heads except HRA\n      const hraComponent = components.find(c => c.componentKey === 'hra');\n      const pfBaseAmount = grossAmount - (hraComponent ? hraComponent.amount : 0);\n      \n      let epfLimit = 15000; // Default statutory limit\n      if (complianceSettings?.pfLimit) epfLimit = 21000;\n      if (complianceSettings?.pfLimitHigher) epfLimit = 25000;\n      const epfBasic = Math.min(pfBaseAmount, epfLimit);\n      deductions.push({\n        componentKey: 'epf_employee',\n        displayName: 'EPF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((epfBasic * 0.12) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // ESIC Employee Deduction\n    if (complianceSettings?.esicEnabled !== false && grossAmount <= 25000) {\n      deductions.push({\n        componentKey: 'esic_employee',\n        displayName: 'ESIC Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((grossAmount * 0.0075) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // LWF Employee Deduction\n    if (complianceSettings?.lwfEnabled !== false) {\n      deductions.push({\n        componentKey: 'lwf_employee',\n        displayName: 'LWF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: 10,\n        calculatedFromPercentage: false,\n      });\n    }\n\n    // VPF Employee Deduction\n    if (complianceSettings?.vpfEnabled && complianceValues?.vpfPercentage > 0) {\n      // Calculate VPF on all earning heads except HRA\n      const hraComponent = components.find(c => c.componentKey === 'hra');\n      const vpfBaseAmount = grossAmount - (hraComponent ? hraComponent.amount : 0);\n      \n      deductions.push({\n        componentKey: 'vpf_employee',\n        displayName: 'VPF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((vpfBaseAmount * complianceValues.vpfPercentage / 100) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // TDS Deduction\n    if (complianceSettings?.tdsEnabled && complianceValues?.tdsPercentage > 0) {\n      deductions.push({\n        componentKey: 'tds',\n        displayName: 'TDS',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((grossAmount * complianceValues.tdsPercentage / 100) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // PT Deduction\n    if (complianceSettings?.ptEnabled && complianceValues?.ptAmount > 0) {\n      deductions.push({\n        componentKey: 'pt',\n        displayName: 'Professional Tax',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: complianceValues.ptAmount,\n        calculatedFromPercentage: false,\n      });\n    }\n\n    // Handle monthly bonus - add to net take home instead of employer cost\n    let bonusAddedToNetPay = 0;\n    if (complianceSettings?.bonusEnabled !== false && complianceSettings?.bonusMonthly) {\n      const bonusAmount = Math.round((grossAmount * 0.0833) * 100) / 100;\n      bonusAddedToNetPay = bonusAmount;\n      \n      // Add monthly bonus as an employee component (earnings)\n      components.push({\n        componentKey: 'monthly_bonus',\n        displayName: 'Monthly Bonus',\n        isTaxable: true,\n        isEmployerCost: false,\n        amount: bonusAmount,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    const totalEmployerCosts = employerCosts.reduce((sum, cost) => sum + cost.amount, 0);\n    const totalDeductions = deductions.reduce((sum, deduction) => sum + deduction.amount, 0);\n    const netPay = Math.round((grossAmount - totalDeductions + bonusAddedToNetPay) * 100) / 100;\n\n    return {\n      mode: 'ctc',\n      ctcValue: ctcAmount,\n      grossValue: grossAmount,\n      netPay,\n      components,\n      employerCosts,\n      deductions,\n      configSnapshot: JSON.stringify(config),\n    };\n  }\n\n  /**\n   * Calculate salary structure from earning heads\n   */\n  static async calculateFromEarningHeads(\n    companyId: number,\n    components: { componentKey: string; amount: number }[],\n    complianceSettings?: any,\n    complianceValues?: any\n  ): Promise<SalaryCalculationResult> {\n    const config = await this.getCompanyComponentConfig(companyId, 'earning_heads');\n    const salaryComponents: SalaryComponent[] = [];\n    let grossValue = 0;\n\n    // Process each component\n    for (const component of components) {\n      const configItem = config.find(c => c.componentKey === component.componentKey);\n      if (configItem) {\n        salaryComponents.push({\n          componentKey: component.componentKey,\n          displayName: configItem.displayName,\n          isTaxable: configItem.isTaxable,\n          isEmployerCost: false,\n          amount: component.amount.toString(),\n          calculatedFromPercentage: false,\n        });\n        grossValue += component.amount;\n      }\n    }\n\n    // Add monthly bonus early so it's included in PF calculations\n    if (complianceSettings?.bonusEnabled !== false && complianceSettings?.bonusMonthly) {\n      const bonusAmount = Math.round((grossValue * 0.0833) * 100) / 100;\n      \n      // Add monthly bonus as an employee component (earnings)\n      salaryComponents.push({\n        componentKey: 'monthly_bonus',\n        displayName: 'Monthly Bonus',\n        isTaxable: true,\n        isEmployerCost: false,\n        amount: bonusAmount,\n        calculatedFromPercentage: true,\n      });\n      \n      // Update grossValue to include monthly bonus for PF calculations\n      grossValue += bonusAmount;\n    }\n\n    const employerCosts: SalaryComponent[] = [];\n\n    // Calculate statutory employer costs with compliance settings\n    if (complianceSettings?.epfEnabled !== false) {\n      // Calculate PF on all earning heads except HRA\n      const hraComponent = salaryComponents.find(c => c.componentKey === 'hra');\n      const pfBaseAmount = grossValue - (hraComponent ? hraComponent.amount : 0);\n      \n      let epfLimit = 15000; // Default statutory limit\n      if (complianceSettings?.pfLimit) epfLimit = 21000;\n      if (complianceSettings?.pfLimitHigher) epfLimit = 25000;\n      const epfBasic = Math.min(pfBaseAmount, epfLimit);\n      \n      employerCosts.push({\n        componentKey: 'epf_employer',\n        displayName: 'EPF Employer Contribution',\n        isTaxable: false,\n        isEmployerCost: true,\n        amount: Math.round((epfBasic * 0.12) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n\n      // EPF admin charges\n      employerCosts.push({\n        componentKey: 'epf_admin',\n        displayName: 'EPF Admin Charges',\n        isTaxable: false,\n        isEmployerCost: true,\n        amount: Math.round((epfBasic * 0.01) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // Bonus (calculated on gross salary) - only add to employer costs if NOT monthly\n    if (complianceSettings?.bonusEnabled !== false && !complianceSettings?.bonusMonthly) {\n      employerCosts.push({\n        componentKey: 'bonus',\n        displayName: 'Bonus',\n        isTaxable: false,\n        isEmployerCost: true,\n        amount: Math.round((grossValue * 0.0833) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // ESIC employer contribution if applicable\n    if (complianceSettings?.esicEnabled !== false && grossValue <= 25000) {\n      employerCosts.push({\n        componentKey: 'esic_employer',\n        displayName: 'ESIC Employer Contribution',\n        isTaxable: false,\n        isEmployerCost: true,\n        amount: Math.round((grossValue * 0.0325) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // LWF employer contribution\n    if (complianceSettings?.lwfEnabled !== false) {\n      employerCosts.push({\n        componentKey: 'lwf_employer',\n        displayName: 'LWF Employer Contribution',\n        isTaxable: false,\n        isEmployerCost: true,\n        amount: 20,\n        calculatedFromPercentage: false,\n      });\n    }\n\n    // Calculate employee deductions based on compliance settings\n    const deductions: SalaryComponent[] = [];\n    \n    // EPF Employee Deduction\n    if (complianceSettings?.epfEnabled !== false) {\n      // Calculate PF on all earning heads except HRA\n      const hraComponent = salaryComponents.find(c => c.componentKey === 'hra');\n      const pfBaseAmount = grossValue - (hraComponent ? hraComponent.amount : 0);\n      \n      let epfLimit = 15000; // Default statutory limit\n      if (complianceSettings?.pfLimit) epfLimit = 21000;\n      if (complianceSettings?.pfLimitHigher) epfLimit = 25000;\n      const epfBasic = Math.min(pfBaseAmount, epfLimit);\n      deductions.push({\n        componentKey: 'epf_employee',\n        displayName: 'EPF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((epfBasic * 0.12) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // ESIC employee deduction if applicable\n    if (complianceSettings?.esicEnabled !== false && grossValue <= 25000) {\n      deductions.push({\n        componentKey: 'esic_employee',\n        displayName: 'ESIC Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((grossValue * 0.0075) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // LWF employee deduction\n    if (complianceSettings?.lwfEnabled !== false) {\n      deductions.push({\n        componentKey: 'lwf_employee',\n        displayName: 'LWF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: 10,\n        calculatedFromPercentage: false,\n      });\n    }\n\n    // VPF Employee Deduction\n    if (complianceSettings?.vpfEnabled && complianceValues?.vpfPercentage > 0) {\n      // Calculate VPF on all earning heads except HRA\n      const hraComponent = salaryComponents.find(c => c.componentKey === 'hra');\n      const vpfBaseAmount = grossValue - (hraComponent ? hraComponent.amount : 0);\n      \n      deductions.push({\n        componentKey: 'vpf_employee',\n        displayName: 'VPF Employee Contribution',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((vpfBaseAmount * complianceValues.vpfPercentage / 100) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // TDS Deduction\n    if (complianceSettings?.tdsEnabled && complianceValues?.tdsPercentage > 0) {\n      deductions.push({\n        componentKey: 'tds',\n        displayName: 'TDS',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: Math.round((grossValue * complianceValues.tdsPercentage / 100) * 100) / 100,\n        calculatedFromPercentage: true,\n      });\n    }\n\n    // PT Deduction\n    if (complianceSettings?.ptEnabled && complianceValues?.ptAmount > 0) {\n      deductions.push({\n        componentKey: 'pt',\n        displayName: 'Professional Tax',\n        isTaxable: false,\n        isEmployerCost: false,\n        amount: complianceValues.ptAmount,\n        calculatedFromPercentage: false,\n      });\n    }\n\n    // Monthly bonus already handled above (added early for PF calculations)\n\n    const totalEmployerCosts = employerCosts.reduce((sum, cost) => sum + cost.amount, 0);\n    const totalDeductions = deductions.reduce((sum, deduction) => sum + deduction.amount, 0);\n    const ctcValue = Math.round((grossValue + totalEmployerCosts) * 100) / 100;\n    const netPay = Math.round((grossValue - totalDeductions) * 100) / 100;\n\n    return {\n      mode: 'earning_heads',\n      ctcValue,\n      grossValue,\n      netPay,\n      components: salaryComponents,\n      employerCosts,\n      deductions,\n      configSnapshot: JSON.stringify(config),\n    };\n  }\n\n  /**\n   * Save salary structure to database\n   */\n  static async saveSalaryStructure(\n    employeeId: number,\n    companyId: number,\n    year: number,\n    month: number,\n    calculationResult: SalaryCalculationResult\n  ): Promise<void> {\n    // Save or update the salary structure\n    const existingStructure = await db\n      .select()\n      .from(employeeSalaryStructures)\n      .where(\n        and(\n          eq(employeeSalaryStructures.employeeId, employeeId),\n          eq(employeeSalaryStructures.year, year),\n          eq(employeeSalaryStructures.month, month)\n        )\n      )\n      .limit(1);\n\n    let structureId: number;\n\n    // Extract component amounts for earningHead fields (PayrollService compatibility)\n    const basicComponent = calculationResult.components.find(c => c.componentKey === 'basic');\n    const hraComponent = calculationResult.components.find(c => c.componentKey === 'hra');\n    const conveyanceComponent = calculationResult.components.find(c => c.componentKey === 'conveyance');\n    const otherComponent = calculationResult.components.find(c => c.componentKey === 'other');\n\n    const earningHead1 = basicComponent ? basicComponent.amount.toString() : '0';\n    const earningHead2 = hraComponent ? hraComponent.amount.toString() : '0';\n    const earningHead3 = conveyanceComponent ? conveyanceComponent.amount.toString() : '0';\n    const earningHead4 = otherComponent ? otherComponent.amount.toString() : '0';\n\n    if (existingStructure.length > 0) {\n      // Update existing structure\n      await db\n        .update(employeeSalaryStructures)\n        .set({\n          grossValue: calculationResult.grossValue.toString(),\n          ctcValue: calculationResult.ctcValue.toString(),\n          entryType: calculationResult.mode,\n          earningHead1, // Basic Salary\n          earningHead2, // House Rent Allowance\n          earningHead3, // Conveyance Allowance\n          earningHead4, // Other Allowances\n          updatedAt: new Date(),\n        })\n        .where(eq(employeeSalaryStructures.id, existingStructure[0].id));\n\n      structureId = existingStructure[0].id;\n\n      // Delete existing component values\n      await db\n        .delete(employeeSalaryComponentValues)\n        .where(eq(employeeSalaryComponentValues.structureId, structureId));\n    } else {\n      // Create new structure\n      const [newStructure] = await db\n        .insert(employeeSalaryStructures)\n        .values({\n          employeeId,\n          companyId,\n          year,\n          month,\n          grossValue: calculationResult.grossValue.toString(),\n          ctcValue: calculationResult.ctcValue.toString(),\n          entryType: calculationResult.mode,\n          earningHead1, // Basic Salary\n          earningHead2, // House Rent Allowance\n          earningHead3, // Conveyance Allowance\n          earningHead4, // Other Allowances\n        })\n        .returning({ id: employeeSalaryStructures.id });\n\n      structureId = newStructure.id;\n    }\n\n    // Save component values\n    const componentValues = [\n      ...calculationResult.components.map(component => ({\n        structureId,\n        componentKey: component.componentKey,\n        amount: component.amount.toString(),\n        isEmployerCost: false,\n        calculatedFromPercentage: component.calculatedFromPercentage,\n      })),\n      ...calculationResult.employerCosts.map(cost => ({\n        structureId,\n        componentKey: cost.componentKey,\n        amount: cost.amount,\n        isEmployerCost: true,\n        calculatedFromPercentage: cost.calculatedFromPercentage,\n      })),\n      ...(calculationResult.deductions || []).map(deduction => ({\n        structureId,\n        componentKey: deduction.componentKey,\n        amount: (-deduction.amount).toString(), // Store as negative for deductions\n        isEmployerCost: false,\n        calculatedFromPercentage: deduction.calculatedFromPercentage,\n      })),\n    ];\n\n    if (componentValues.length > 0) {\n      await db.insert(employeeSalaryComponentValues).values(componentValues);\n    }\n  }\n}","size_bytes":37415},"server/types.ts":{"content":"import type { Request } from 'express';\n\n// Extend Express Request interface to include custom user property\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: number;\n        username: string;\n        email: string;\n        role: 'system_admin' | 'admin' | 'employee';\n        companyId: number | null;\n        isActive: boolean;\n        createdAt: Date;\n        updatedAt: Date;\n      };\n    }\n  }\n}\n\nexport {};","size_bytes":452},"client/src/components/SalaryStructureForm.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Loader2, Calculator, Eye, Save } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequestWithAuth } from '@/lib/auth';\n\ninterface SalaryStructureFormProps {\n  companyId: number;\n  employeeId: number;\n  initialData?: any;\n  onSave?: (data: any) => void;\n}\n\ninterface SalaryComponent {\n  componentKey: string;\n  displayName: string;\n  isTaxable: boolean;\n  isEmployerCost: boolean;\n  amount: number;\n  calculatedFromPercentage: boolean;\n}\n\ninterface SalaryCalculationResult {\n  mode: 'gross' | 'ctc' | 'earning_heads';\n  ctcValue: number;\n  grossValue: number;\n  components: SalaryComponent[];\n  employerCosts: SalaryComponent[];\n  configSnapshot: string;\n}\n\ntype SalaryMode = 'gross' | 'ctc' | 'earning_heads';\n\nexport default function SalaryStructureForm({ companyId, employeeId, initialData, onSave }: SalaryStructureFormProps) {\n  const { toast } = useToast();\n  \n  // Form state\n  const [selectedMode, setSelectedMode] = useState<SalaryMode>('gross');\n  const [grossAmount, setGrossAmount] = useState('');\n  const [ctcAmount, setCtcAmount] = useState('');\n  const [earningHeads, setEarningHeads] = useState<Record<string, string>>({});\n  const [complianceSettings, setComplianceSettings] = useState({\n    epfEnabled: true,\n    esicEnabled: true,\n    lwfEnabled: true,\n    otEnabled: false,\n    vpfEnabled: false,\n    tdsEnabled: false,\n    ptEnabled: false,\n    bonusEnabled: true,\n    pfLimit: false,\n    pfLimitHigher: false,\n    bonusMonthly: false,\n  });\n\n  // Additional fields for compliance values\n  const [complianceValues, setComplianceValues] = useState({\n    vpfPercentage: '',\n    tdsPercentage: '',\n    ptAmount: '',\n  });\n\n  // Real-time calculation preview\n  const [previewData, setPreviewData] = useState<SalaryCalculationResult | null>(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n\n  // Load salary components configuration\n  const { data: salaryComponents } = useQuery({\n    queryKey: ['/api/salary-components'],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', '/api/salary-components');\n      return response.json();\n    },\n  });\n\n  // Load company salary component configuration\n  const { data: companyConfig } = useQuery({\n    queryKey: [`/api/company-salary-config/${companyId}`, selectedMode],\n    queryFn: async () => {\n      const response = await apiRequestWithAuth('GET', `/api/company-salary-config/${companyId}?entryMode=${selectedMode}`);\n      return response.json();\n    },\n    enabled: !!companyId,\n  });\n\n  // Salary calculation preview mutation\n  const calculatePreviewMutation = useMutation({\n    mutationFn: async (data: { mode: SalaryMode; amount?: number; components?: any[] }) => {\n      const payload = data.mode === 'earning_heads' \n        ? { mode: data.mode, components: data.components, compliance: complianceSettings, complianceValues: complianceValues }\n        : { mode: data.mode, amount: data.amount, compliance: complianceSettings, complianceValues: complianceValues };\n      \n      const response = await apiRequestWithAuth('POST', `/api/salary-calculation/preview/${companyId}`, payload);\n      return response.json();\n    },\n    onSuccess: (result) => {\n      setPreviewData(result);\n      setIsCalculating(false);\n    },\n    onError: (error: any) => {\n      console.error('Calculation error:', error);\n      toast({\n        title: \"Calculation Error\",\n        description: error.message || \"Failed to calculate salary preview\",\n        variant: \"destructive\",\n      });\n      setIsCalculating(false);\n    }\n  });\n\n  // Initialize form with existing data\n  useEffect(() => {\n    if (initialData) {\n      setSelectedMode(initialData.entryType || 'gross');\n      setGrossAmount(initialData.grossValue?.toString() || '');\n      setCtcAmount(initialData.ctcValue?.toString() || '');\n      \n      // Load earning heads from initial data\n      const heads: Record<string, string> = {};\n      if (initialData.earningHead1) heads.basic = initialData.earningHead1.toString();\n      if (initialData.earningHead2) heads.hra = initialData.earningHead2.toString();\n      if (initialData.earningHead3) heads.conveyance = initialData.earningHead3.toString();\n      if (initialData.earningHead4) heads.other = initialData.earningHead4.toString();\n      setEarningHeads(heads);\n\n      setComplianceSettings({\n        epfEnabled: initialData.epfEnabled ?? true,\n        esicEnabled: initialData.esicEnabled ?? true,\n        lwfEnabled: initialData.lwfEnabled ?? true,\n        otEnabled: initialData.otEnabled ?? false,\n        vpfEnabled: initialData.vpfEnabled ?? false,\n        tdsEnabled: initialData.tdsEnabled ?? false,\n        ptEnabled: initialData.ptEnabled ?? false,\n        bonusEnabled: initialData.bonusEnabled ?? true,\n        pfLimit: initialData.pfLimit ?? false,\n        pfLimitHigher: initialData.pfLimitHigher ?? false,\n        bonusMonthly: initialData.bonusMonthly ?? false,\n      });\n      setComplianceValues({\n        vpfPercentage: initialData.vpfPercentage?.toString() || '',\n        tdsPercentage: initialData.tdsPercentage?.toString() || '',\n        ptAmount: initialData.ptAmount?.toString() || '',\n      });\n    }\n  }, [initialData]);\n\n  // Trigger calculation when relevant data changes\n  useEffect(() => {\n    const triggerCalculation = () => {\n      if (selectedMode === 'gross' && grossAmount && !isNaN(parseFloat(grossAmount))) {\n        setIsCalculating(true);\n        calculatePreviewMutation.mutate({ mode: 'gross', amount: parseFloat(grossAmount) });\n      } else if (selectedMode === 'ctc' && ctcAmount && !isNaN(parseFloat(ctcAmount))) {\n        setIsCalculating(true);\n        calculatePreviewMutation.mutate({ mode: 'ctc', amount: parseFloat(ctcAmount) });\n      } else if (selectedMode === 'earning_heads') {\n        const components = Object.entries(earningHeads)\n          .filter(([_, amount]) => amount && !isNaN(parseFloat(amount)))\n          .map(([key, amount]) => ({ componentKey: key, amount: parseFloat(amount) }));\n        \n        if (components.length > 0) {\n          setIsCalculating(true);\n          calculatePreviewMutation.mutate({ mode: 'earning_heads', components });\n        }\n      }\n    };\n\n    const timeoutId = setTimeout(triggerCalculation, 500); // Debounce calculations\n    return () => clearTimeout(timeoutId);\n  }, [selectedMode, grossAmount, ctcAmount, earningHeads, complianceSettings, complianceValues]);\n\n  const handleSave = async () => {\n    if (!previewData) {\n      toast({\n        title: \"Error\",\n        description: \"Please calculate the salary structure first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const salaryData = {\n      entryType: selectedMode,\n      ctcValue: previewData.ctcValue.toString(),\n      grossValue: previewData.grossValue.toString(),\n      // Map components back to legacy format for now\n      earningHead1: previewData.components.find(c => c.componentKey === 'basic')?.amount?.toString() || '0',\n      earningHead2: previewData.components.find(c => c.componentKey === 'hra')?.amount?.toString() || '0',\n      earningHead3: previewData.components.find(c => c.componentKey === 'conveyance')?.amount?.toString() || '0',\n      earningHead4: previewData.components.find(c => c.componentKey === 'other')?.amount?.toString() || '0',\n      epfEmployeeAmount: previewData.components.find(c => c.componentKey === 'epf_employee')?.amount?.toString() || '0',\n      esicEmployeeAmount: previewData.components.find(c => c.componentKey === 'esic_employee')?.amount?.toString() || '0',\n      lwfEmployeeAmount: previewData.components.find(c => c.componentKey === 'lwf_employee')?.amount?.toString() || '0',\n      ...complianceSettings,\n      // Include new compliance values\n      vpfPercentage: complianceValues.vpfPercentage ? parseFloat(complianceValues.vpfPercentage) : null,\n      tdsPercentage: complianceValues.tdsPercentage ? parseFloat(complianceValues.tdsPercentage) : null,\n      ptAmount: complianceValues.ptAmount ? parseFloat(complianceValues.ptAmount) : null,\n    };\n\n    if (onSave) {\n      onSave(salaryData);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Integrated Salary Entry Mode & Input */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calculator className=\"w-5 h-5\" />\n            Salary Structure Configuration\n          </CardTitle>\n          <CardDescription>\n            Choose your entry method and configure the salary details\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            \n            {/* Mode Selection - Visual Cards */}\n            <div className=\"space-y-3\">\n              <h4 className=\"text-sm font-semibold text-foreground\">Entry Mode</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                \n                {/* Gross Mode Card */}\n                <div \n                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                    selectedMode === 'gross' \n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/20' \n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => setSelectedMode('gross')}\n                  data-testid=\"mode-gross\"\n                >\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className={`w-4 h-4 rounded-full border-2 ${\n                      selectedMode === 'gross' ? 'border-blue-500 bg-blue-500' : 'border-gray-300'\n                    }`}>\n                      {selectedMode === 'gross' && <div className=\"w-2 h-2 bg-white rounded-full m-0.5\"></div>}\n                    </div>\n                    <span className=\"font-medium\">Gross Mode</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    System calculates CTC and components from gross salary amount\n                  </p>\n                </div>\n\n                {/* CTC Mode Card */}\n                <div \n                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                    selectedMode === 'ctc' \n                      ? 'border-green-500 bg-green-50 dark:bg-green-950/20' \n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => setSelectedMode('ctc')}\n                  data-testid=\"mode-ctc\"\n                >\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className={`w-4 h-4 rounded-full border-2 ${\n                      selectedMode === 'ctc' ? 'border-green-500 bg-green-500' : 'border-gray-300'\n                    }`}>\n                      {selectedMode === 'ctc' && <div className=\"w-2 h-2 bg-white rounded-full m-0.5\"></div>}\n                    </div>\n                    <span className=\"font-medium\">CTC Mode</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    System calculates gross and components from total CTC amount\n                  </p>\n                </div>\n\n                {/* Earning Heads Mode Card */}\n                <div \n                  className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                    selectedMode === 'earning_heads' \n                      ? 'border-purple-500 bg-purple-50 dark:bg-purple-950/20' \n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => setSelectedMode('earning_heads')}\n                  data-testid=\"mode-earning-heads\"\n                >\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <div className={`w-4 h-4 rounded-full border-2 ${\n                      selectedMode === 'earning_heads' ? 'border-purple-500 bg-purple-500' : 'border-gray-300'\n                    }`}>\n                      {selectedMode === 'earning_heads' && <div className=\"w-2 h-2 bg-white rounded-full m-0.5\"></div>}\n                    </div>\n                    <span className=\"font-medium\">Earning Heads</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Enter individual amounts, system calculates totals\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Input Fields based on Selected Mode */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-sm font-semibold text-foreground\">Salary Input</h4>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {selectedMode === 'gross' && 'Gross Mode'}\n                  {selectedMode === 'ctc' && 'CTC Mode'}\n                  {selectedMode === 'earning_heads' && 'Earning Heads Mode'}\n                </Badge>\n              </div>\n\n              {/* Gross Mode Input */}\n              {selectedMode === 'gross' && (\n                <div className=\"p-4 border rounded-lg bg-blue-50 dark:bg-blue-950/20\">\n                  <div className=\"max-w-md space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <Label htmlFor=\"gross-amount\" className=\"text-sm font-medium\">Gross Salary Amount</Label>\n                    </div>\n                    <Input\n                      id=\"gross-amount\"\n                      type=\"number\"\n                      value={grossAmount}\n                      onChange={(e) => setGrossAmount(e.target.value)}\n                      placeholder=\"Enter gross salary amount (e.g., 50000)\"\n                      data-testid=\"input-gross-amount\"\n                      className=\"text-lg font-semibold\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      The system will automatically calculate CTC and deduction components based on this gross amount.\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* CTC Mode Input */}\n              {selectedMode === 'ctc' && (\n                <div className=\"p-4 border rounded-lg bg-green-50 dark:bg-green-950/20\">\n                  <div className=\"max-w-md space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <Label htmlFor=\"ctc-amount\" className=\"text-sm font-medium\">Cost to Company (CTC) Amount</Label>\n                    </div>\n                    <Input\n                      id=\"ctc-amount\"\n                      type=\"number\"\n                      value={ctcAmount}\n                      onChange={(e) => setCtcAmount(e.target.value)}\n                      placeholder=\"Enter total CTC amount (e.g., 600000)\"\n                      data-testid=\"input-ctc-amount\"\n                      className=\"text-lg font-semibold\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      The system will calculate gross salary and all components from this total CTC amount.\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* Earning Heads Mode Input */}\n              {selectedMode === 'earning_heads' && (\n                <div className=\"p-4 border rounded-lg bg-purple-50 dark:bg-purple-950/20\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                      <Label className=\"text-sm font-medium\">Individual Earning Components</Label>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"basic-salary\" className=\"text-sm\">Basic Salary *</Label>\n                        <Input\n                          id=\"basic-salary\"\n                          type=\"number\"\n                          value={earningHeads.basic || ''}\n                          onChange={(e) => setEarningHeads(prev => ({ ...prev, basic: e.target.value }))}\n                          placeholder=\"e.g., 25000\"\n                          data-testid=\"input-basic-salary\"\n                          className=\"font-medium\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"hra\" className=\"text-sm\">House Rent Allowance (HRA)</Label>\n                        <Input\n                          id=\"hra\"\n                          type=\"number\"\n                          value={earningHeads.hra || ''}\n                          onChange={(e) => setEarningHeads(prev => ({ ...prev, hra: e.target.value }))}\n                          placeholder=\"e.g., 12500\"\n                          data-testid=\"input-hra\"\n                          className=\"font-medium\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"conveyance\" className=\"text-sm\">Conveyance Allowance</Label>\n                        <Input\n                          id=\"conveyance\"\n                          type=\"number\"\n                          value={earningHeads.conveyance || ''}\n                          onChange={(e) => setEarningHeads(prev => ({ ...prev, conveyance: e.target.value }))}\n                          placeholder=\"e.g., 1600\"\n                          data-testid=\"input-conveyance\"\n                          className=\"font-medium\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"other\" className=\"text-sm\">Other Allowances</Label>\n                        <Input\n                          id=\"other\"\n                          type=\"number\"\n                          value={earningHeads.other || ''}\n                          onChange={(e) => setEarningHeads(prev => ({ ...prev, other: e.target.value }))}\n                          placeholder=\"e.g., 5000\"\n                          data-testid=\"input-other\"\n                          className=\"font-medium\"\n                        />\n                      </div>\n                    </div>\n                    \n                    {/* Quick Total Display */}\n                    {(earningHeads.basic || earningHeads.hra || earningHeads.conveyance || earningHeads.other) && (\n                      <div className=\"mt-4 p-3 bg-white dark:bg-gray-800 border rounded-lg\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium\">Gross Total (estimated):</span>\n                          <span className=\"text-lg font-bold text-purple-600\">\n                            ₹{(\n                              (parseFloat(earningHeads.basic) || 0) +\n                              (parseFloat(earningHeads.hra) || 0) +\n                              (parseFloat(earningHeads.conveyance) || 0) +\n                              (parseFloat(earningHeads.other) || 0)\n                            ).toLocaleString('en-IN')}\n                          </span>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          * Final amounts may vary after applying compliance deductions\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"flex items-center justify-between pt-4 border-t\">\n              <div className=\"text-xs text-muted-foreground\">\n                {selectedMode === 'gross' && grossAmount && `Gross: ₹${parseFloat(grossAmount).toLocaleString('en-IN')}`}\n                {selectedMode === 'ctc' && ctcAmount && `CTC: ₹${parseFloat(ctcAmount).toLocaleString('en-IN')}`}\n                {selectedMode === 'earning_heads' && (earningHeads.basic || earningHeads.hra) && 'Multiple components entered'}\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => {\n                  setGrossAmount('');\n                  setCtcAmount('');\n                  setEarningHeads({});\n                }}\n                className=\"text-xs\"\n              >\n                Clear All\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n\n      {/* Compliance Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Compliance Settings</CardTitle>\n          <CardDescription>Configure applicable compliance and deduction components</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-6 sm:grid-cols-1 lg:grid-cols-2\">\n            \n            {/* Statutory Contributions */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-semibold text-foreground border-b pb-2\">Statutory Contributions</h4>\n              \n              {/* EPF Section */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Employee Provident Fund (EPF)</Label>\n                    <Switch\n                      checked={complianceSettings.epfEnabled}\n                      onCheckedChange={(checked) => \n                        setComplianceSettings(prev => ({ ...prev, epfEnabled: checked }))\n                      }\n                      data-testid=\"switch-epfEnabled\"\n                    />\n                  </div>\n                  \n                  {complianceSettings.epfEnabled && (\n                    <div className=\"grid gap-3 sm:grid-cols-2 pl-4 border-l-2 border-blue-200\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={complianceSettings.pfLimit}\n                          onCheckedChange={(checked) => \n                            setComplianceSettings(prev => ({ ...prev, pfLimit: checked }))\n                          }\n                          data-testid=\"switch-pfLimit\"\n                        />\n                        <Label className=\"text-xs\">PF Limit</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={complianceSettings.pfLimitHigher}\n                          onCheckedChange={(checked) => \n                            setComplianceSettings(prev => ({ ...prev, pfLimitHigher: checked }))\n                          }\n                          data-testid=\"switch-pfLimitHigher\"\n                        />\n                        <Label className=\"text-xs\">PF Limit Higher</Label>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* ESIC */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Employee State Insurance (ESIC)</Label>\n                  <Switch\n                    checked={complianceSettings.esicEnabled}\n                    onCheckedChange={(checked) => \n                      setComplianceSettings(prev => ({ ...prev, esicEnabled: checked }))\n                    }\n                    data-testid=\"switch-esicEnabled\"\n                  />\n                </div>\n              </div>\n\n              {/* LWF */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Labour Welfare Fund (LWF)</Label>\n                  <Switch\n                    checked={complianceSettings.lwfEnabled}\n                    onCheckedChange={(checked) => \n                      setComplianceSettings(prev => ({ ...prev, lwfEnabled: checked }))\n                    }\n                    data-testid=\"switch-lwfEnabled\"\n                  />\n                </div>\n              </div>\n\n              {/* OT */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Overtime (OT)</Label>\n                  <Switch\n                    checked={complianceSettings.otEnabled}\n                    onCheckedChange={(checked) => \n                      setComplianceSettings(prev => ({ ...prev, otEnabled: checked }))\n                    }\n                    data-testid=\"switch-otEnabled\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Additional Deductions & Benefits */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-semibold text-foreground border-b pb-2\">Additional Deductions & Benefits</h4>\n              \n              {/* VPF */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Voluntary Provident Fund (VPF)</Label>\n                    <Switch\n                      checked={complianceSettings.vpfEnabled}\n                      onCheckedChange={(checked) => \n                        setComplianceSettings(prev => ({ ...prev, vpfEnabled: checked }))\n                      }\n                      data-testid=\"switch-vpfEnabled\"\n                    />\n                  </div>\n                  \n                  {complianceSettings.vpfEnabled && (\n                    <div className=\"pl-4 border-l-2 border-green-200\">\n                      <Label htmlFor=\"vpf-percentage\" className=\"text-xs font-medium\">VPF Percentage</Label>\n                      <Input\n                        id=\"vpf-percentage\"\n                        type=\"number\"\n                        value={complianceValues.vpfPercentage}\n                        onChange={(e) => setComplianceValues(prev => ({ ...prev, vpfPercentage: e.target.value }))}\n                        placeholder=\"Enter VPF %\"\n                        data-testid=\"input-vpf-percentage\"\n                        className=\"mt-1 text-sm\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* TDS */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Tax Deducted at Source (TDS)</Label>\n                    <Switch\n                      checked={complianceSettings.tdsEnabled}\n                      onCheckedChange={(checked) => \n                        setComplianceSettings(prev => ({ ...prev, tdsEnabled: checked }))\n                      }\n                      data-testid=\"switch-tdsEnabled\"\n                    />\n                  </div>\n                  \n                  {complianceSettings.tdsEnabled && (\n                    <div className=\"pl-4 border-l-2 border-orange-200\">\n                      <Label htmlFor=\"tds-percentage\" className=\"text-xs font-medium\">TDS Percentage</Label>\n                      <Input\n                        id=\"tds-percentage\"\n                        type=\"number\"\n                        value={complianceValues.tdsPercentage}\n                        onChange={(e) => setComplianceValues(prev => ({ ...prev, tdsPercentage: e.target.value }))}\n                        placeholder=\"Enter TDS %\"\n                        data-testid=\"input-tds-percentage\"\n                        className=\"mt-1 text-sm\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* PT */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Professional Tax (PT)</Label>\n                    <Switch\n                      checked={complianceSettings.ptEnabled}\n                      onCheckedChange={(checked) => \n                        setComplianceSettings(prev => ({ ...prev, ptEnabled: checked }))\n                      }\n                      data-testid=\"switch-ptEnabled\"\n                    />\n                  </div>\n                  \n                  {complianceSettings.ptEnabled && (\n                    <div className=\"pl-4 border-l-2 border-purple-200\">\n                      <Label htmlFor=\"pt-amount\" className=\"text-xs font-medium\">PT Amount</Label>\n                      <Input\n                        id=\"pt-amount\"\n                        type=\"number\"\n                        value={complianceValues.ptAmount}\n                        onChange={(e) => setComplianceValues(prev => ({ ...prev, ptAmount: e.target.value }))}\n                        placeholder=\"Enter PT amount\"\n                        data-testid=\"input-pt-amount\"\n                        className=\"mt-1 text-sm\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Bonus */}\n              <div className=\"p-4 border rounded-lg bg-muted/20\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Bonus</Label>\n                    <Switch\n                      checked={complianceSettings.bonusEnabled}\n                      onCheckedChange={(checked) => \n                        setComplianceSettings(prev => ({ ...prev, bonusEnabled: checked }))\n                      }\n                      data-testid=\"switch-bonusEnabled\"\n                    />\n                  </div>\n                  \n                  {complianceSettings.bonusEnabled && (\n                    <div className=\"pl-4 border-l-2 border-yellow-200\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          checked={complianceSettings.bonusMonthly}\n                          onCheckedChange={(checked) => \n                            setComplianceSettings(prev => ({ ...prev, bonusMonthly: checked }))\n                          }\n                          data-testid=\"switch-bonusMonthly\"\n                        />\n                        <Label className=\"text-xs font-medium\">Monthly Payment</Label>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Real-time Calculation Preview */}\n      {(isCalculating || previewData) && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"w-5 h-5\" />\n              Salary Structure Preview\n              {isCalculating && <Loader2 className=\"w-4 h-4 animate-spin\" />}\n            </CardTitle>\n            <CardDescription>Real-time calculation based on your inputs</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isCalculating ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-8 h-8 animate-spin\" />\n                <span className=\"ml-2\">Calculating salary structure...</span>\n              </div>\n            ) : previewData ? (\n              <div className=\"space-y-6\">\n                {/* Summary */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div className=\"p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">Gross Salary</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"preview-gross\">\n                      {formatCurrency(previewData.grossValue)}\n                    </p>\n                  </div>\n                  <div className=\"p-4 bg-red-50 dark:bg-red-950/20 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">Total Deductions</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"preview-deductions\">\n                      {formatCurrency(previewData.deductions?.reduce((sum, d) => sum + d.amount, 0) || 0)}\n                    </p>\n                  </div>\n                  <div className=\"p-4 bg-orange-50 dark:bg-orange-950/20 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">Net Take Home</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"preview-net-pay\">\n                      {formatCurrency(previewData.netPay || previewData.grossValue)}\n                    </p>\n                  </div>\n                  <div className=\"p-4 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">Cost to Company (CTC)</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"preview-ctc\">\n                      {formatCurrency(previewData.ctcValue)}\n                    </p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Detailed Breakdown */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  {/* Employee Components */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-green-700 dark:text-green-300\">\n                      Employee Components (Earnings)\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {previewData.components.map((component) => (\n                        <div key={component.componentKey} \n                             className=\"flex justify-between items-center py-2 border-b\"\n                             data-testid={`component-${component.componentKey}`}>\n                          <div>\n                            <span className=\"text-sm\">{component.displayName}</span>\n                            {component.calculatedFromPercentage && (\n                              <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Auto</Badge>\n                            )}\n                          </div>\n                          <span className=\"font-medium\">{formatCurrency(component.amount)}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Employee Deductions */}\n                  {previewData.deductions && previewData.deductions.length > 0 && (\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-semibold text-red-700 dark:text-red-300\">\n                        Employee Deductions\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {previewData.deductions.map((deduction) => (\n                          <div key={deduction.componentKey} \n                               className=\"flex justify-between items-center py-2 border-b\"\n                               data-testid={`deduction-${deduction.componentKey}`}>\n                            <div>\n                              <span className=\"text-sm\">{deduction.displayName}</span>\n                              {deduction.calculatedFromPercentage && (\n                                <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Auto</Badge>\n                              )}\n                            </div>\n                            <span className=\"font-medium text-red-600\">-{formatCurrency(deduction.amount)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Employer Costs */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-blue-700 dark:text-blue-300\">\n                      Employer Costs\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {previewData.employerCosts.map((cost) => (\n                        <div key={cost.componentKey} \n                             className=\"flex justify-between items-center py-2 border-b\"\n                             data-testid={`employer-cost-${cost.componentKey}`}>\n                          <div>\n                            <span className=\"text-sm\">{cost.displayName}</span>\n                            {cost.calculatedFromPercentage && (\n                              <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Auto</Badge>\n                            )}\n                          </div>\n                          <span className=\"font-medium\">{formatCurrency(cost.amount)}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : null}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button \n          onClick={handleSave} \n          disabled={!previewData || isCalculating}\n          className=\"flex items-center gap-2\"\n          data-testid=\"button-save-salary\"\n        >\n          <Save className=\"w-4 h-4\" />\n          Save Salary Structure\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":39002}},"version":1}